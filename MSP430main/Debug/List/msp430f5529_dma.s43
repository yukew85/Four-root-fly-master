///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          17/Nov/2018  19:57:25
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_dma.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EWF0E7.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_dma.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\msp430f5529_dma.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME msp430f5529_dma

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?DivMod16s
        EXTERN ?DivMod8u
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC DMAX
        PUBLIC DMA_ClearITPendingBit
        PUBLIC DMA_Cmd
        PUBLIC DMA_GetITStatus
        PUBLIC DMA_ITConfig
        PUBLIC DMA_Init
        PUBLIC DMA_SoftwareTrigger
        PUBWEAK _A_DMACTL0_L
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_dma.c
//    1 #include "msp430f5529_dma.h"

        ASEGN DATA16_AN:DATA:NOROOT,0500H
// union <unnamed> __data16 _A_DMACTL0_L
_A_DMACTL0_L:
        DS8 2
//    2 

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//    3 const DMA_MemMapPtr      DMAX = DMA_BASE_PTR;
DMAX:
        DATA32
        DC32 500H
//    4 /*******************************************************************************
//    5 *  函数名称：DMA_Init(DMA_CHn dma_ch, void *SADDR, void *DADDR, DMA_Trigger Trigger, uint16_t count, uint16_t config)
//    6 *  功能说明：初始化一个DMA通道
//    7 *  参数说明：DMA_CHn dma_ch             :DMA通道
//    8              void *SADDR                :DMA传输源地址
//    9              void *DADDR                :DMA传输目的地址
//   10              DMA_Trigger Trigger        :DMA传输触发条件
//   11              uint16_t count               :DMA传输次数
//   12              uint16_t config              :DMA传输配置
//   13 *  函数返回：无
//   14 *  使用示例： DMA_Init(DMA_CH2, &Sdata, &DData,DMATSEL_DMA_REQ,255,  DMA_SRCAddr_KeepOn|DMA_DSTAddr_KeepOn|DMA_WORD|DMA_Single|DMA_Edge);
//   15                        //通道2，源地址，目的地址，触发源，传输255个字，源地址不变，目的地址不变，字传输，单次触发，边沿触发
//   16 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   17 void DMA_Init(DMA_CHn dma_ch, void *SADDR, void *DADDR, DMA_Trigger Trigger, uint16_t count, uint16_t config)
DMA_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function DMA_Init
//   18 { 
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOV.B   R12, R10
        MOVA    R13, R7
        MOVA    R14, R8
        MOV.B   R15, R11
        MOV.W   0x24(SP), R9
        MOV.W   0x26(SP), R6
//   19   DMAX->CHX[dma_ch].EN = RESET;                          //关闭DMA模块
        MOVA    &DMAX, R15
        MOV.B   R10, R14
        RLAM.A  #0x4, R14
        MOVA    R14, R13
        ADDA    R13, R15
        BIC.W   #0x10, 0x10(R15)
//   20   DMAX->CHX[dma_ch].DA = (uint32_t)DADDR;                  //设置目的地址
        PUSHM.A #0x1, R8
          CFI CFA SP+40
        POPM.W  #0x2, R15
          CFI CFA SP+36
        MOVA    &DMAX, R13
        MOV.B   R10, R12
        RLAM.A  #0x4, R12
        MOVA    R12, R4
        ADDA    R4, R13
        MOV.W   R14, 0x16(R13)
        MOV.W   R15, 0x18(R13)
//   21   DMAX->CHX[dma_ch].SA = (uint32_t)SADDR;                  //设置源地址
        PUSHM.A #0x1, R7
          CFI CFA SP+40
        POPM.W  #0x2, R15
          CFI CFA SP+36
        MOVA    &DMAX, R13
        MOV.B   R10, R12
        RLAM.A  #0x4, R12
        MOVA    R12, R4
        ADDA    R4, R13
        MOV.W   R14, 0x12(R13)
        MOV.W   R15, 0x14(R13)
//   22   DMAX->CHX[dma_ch].SZ = count;                          //设置写入数据大小
        MOVA    &DMAX, R15
        MOV.B   R10, R14
        RLAM.A  #0x4, R14
        MOVA    R14, R13
        ADDA    R13, R15
        MOV.W   R9, 0x1a(R15)
//   23   
//   24   //DMAX->TSSEL[dma_ch] = Trigger;                         //这样写会有问题，不知道为什么！
//   25   if((dma_ch%2) == 0)
        MOV.W   #0x2, R14
        MOV.B   R10, R12
          CFI FunCall ?DivMod16s
        CALLA   #?DivMod16s
        CMP.W   #0x0, R14
        JNE     ??DMA_Init_1
//   26   {
//   27    *(&DMACTL0 + (dma_ch/2)) &= 0xFF00;      //先清除触发源
        MOV.B   R10, R12
        MOV.B   #0x2, R14
          CFI FunCall ?DivMod8u
        CALLA   #?DivMod8u
        MOV.B   R12, R12
        RLA.W   R12
        AND.W   #0xff00, 0x500(R12)
//   28    *(&DMACTL0 + (dma_ch/2)) |= Trigger;     //再设置触发源
        MOV.B   R10, R12
        MOV.B   #0x2, R14
          CFI FunCall ?DivMod8u
        CALLA   #?DivMod8u
        MOV.B   R12, R12
        RLA.W   R12
        MOV.B   R11, R11
        BIS.W   R11, 0x500(R12)
        JMP     ??DMA_Init_0
//   29   }
//   30   else
//   31   {
//   32     *(&DMACTL0 + (dma_ch/2)) &= 0x00FF;
??DMA_Init_1:
        MOV.B   R10, R12
        MOV.B   #0x2, R14
          CFI FunCall ?DivMod8u
        CALLA   #?DivMod8u
        MOV.B   R12, R12
        RLA.W   R12
        AND.W   #0xff, 0x500(R12)
//   33     *(&DMACTL0 + (dma_ch/2)) |= Trigger<<8;
        MOV.B   R10, R12
        MOV.B   #0x2, R14
          CFI FunCall ?DivMod8u
        CALLA   #?DivMod8u
        MOV.B   R12, R12
        RLA.W   R12
        MOV.B   R11, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R15, 0x500(R12)
//   34   }
//   35   DMAX->CHX[dma_ch].CTL = config;                       //配置DMA模块
??DMA_Init_0:
        MOVA    &DMAX, R15
        MOV.B   R10, R14
        RLAM.A  #0x4, R14
        MOVA    R14, R13
        ADDA    R13, R15
        MOV.W   R6, 0x10(R15)
//   36   DMAX->CHX[dma_ch].EN = BIT_SET;                           //使能DMA模块
        MOVA    &DMAX, R15
        MOV.B   R10, R14
        RLAM.A  #0x4, R14
        MOVA    R14, R13
        ADDA    R13, R15
        BIS.W   #0x10, 0x10(R15)
//   37 }
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
        REQUIRE _A_DMACTL0_L
//   38 /*******************************************************************************
//   39 *  函数名称：DMA_Cmd  (DMA_CHn dma_ch,BOOL State)
//   40 *  功能说明：DMA使能或禁止
//   41 *  参数说明：DMA_CHn dma_ch     :DMA传输通道
//   42              STATUS State       :DMA是否使能
//   43 *  函数返回：无
//   44 *  使用示例：DMA_Cmd  (DMA_CH1,ENABLE);  //使能DMA通道1
//   45 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   46 void DMA_Cmd  (DMA_CHn dma_ch,STATUS State)
DMA_Cmd:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function DMA_Cmd
          CFI NoCalls
//   47 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
//   48   DMAX->CHX[dma_ch].EN = State; 
        MOVA    &DMAX, R15
        MOV.B   R12, R14
        RLAM.A  #0x4, R14
        MOVA    R14, R10
        ADDA    R10, R15
        BIT.B   #0x1, R13
        JC      ??DMA_Cmd_1
        BIC.W   #0x10, 0x10(R15)
        JMP     ??DMA_Cmd_0
??DMA_Cmd_1:
        BIS.W   #0x10, 0x10(R15)
//   49 }
??DMA_Cmd_0:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//   50 /*******************************************************************************
//   51 *  函数名称：DMA_SoftwareTrigger(DMA_CHn dma_ch)
//   52 *  功能说明：软件触发一次DMA传输
//   53 *  参数说明：DMA_CHn dma_ch     :DMA传输通道
//   54 *  函数返回：无
//   55 *  使用示例：DMA_SoftwareTrigger(DMA_CH1);  //软件触发一次DMA通道1传输
//   56 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   57 void DMA_SoftwareTrigger(DMA_CHn dma_ch)
DMA_SoftwareTrigger:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function DMA_SoftwareTrigger
          CFI NoCalls
//   58 {    
//   59   DMAX->CHX[dma_ch].REQ = RESET; 
        MOVA    &DMAX, R15
        MOV.B   R12, R14
        RLAM.A  #0x4, R14
        MOVA    R14, R13
        ADDA    R13, R15
        BIC.W   #0x1, 0x10(R15)
//   60   DMAX->CHX[dma_ch].REQ = BIT_SET; 
        MOVA    &DMAX, R15
        MOV.B   R12, R14
        RLAM.A  #0x4, R14
        MOVA    R14, R13
        ADDA    R13, R15
        BIS.W   #0x1, 0x10(R15)
//   61 }
        RETA
          CFI EndBlock cfiBlock2
//   62 /*******************************************************************************
//   63 *  函数名称：DMA_ITConfig (DMA_CHn dma_ch,STATUS ITState)
//   64 *  功能说明：设置是否使能DMA某一通道完成中断
//   65 *  参数说明：DMA_CHn dma_ch     :DMA传输通道
//   66              BOOL ITState       :是否使能DMA传输完成中断
//   67 *  函数返回：无
//   68 *  使用示例：DMA_ITConfig (DMA_CH0,ENABLE);  //使能DMA通道1传输完成中断
//   69 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   70 void DMA_ITConfig (DMA_CHn dma_ch,STATUS ITState)
DMA_ITConfig:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function DMA_ITConfig
          CFI NoCalls
//   71 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
//   72   DMAX->CHX[dma_ch].IFG = RESET;
        MOVA    &DMAX, R15
        MOV.B   R12, R14
        RLAM.A  #0x4, R14
        MOVA    R14, R10
        ADDA    R10, R15
        BIC.W   #0x8, 0x10(R15)
//   73   DMAX->CHX[dma_ch].IE = ITState; 
        MOVA    &DMAX, R15
        MOV.B   R12, R14
        RLAM.A  #0x4, R14
        MOVA    R14, R10
        ADDA    R10, R15
        BIT.B   #0x1, R13
        JC      ??DMA_ITConfig_1
        BIC.W   #0x4, 0x10(R15)
        JMP     ??DMA_ITConfig_0
??DMA_ITConfig_1:
        BIS.W   #0x4, 0x10(R15)
//   74 }
??DMA_ITConfig_0:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//   75 /*******************************************************************************
//   76 *  函数名称：DMA_GetITStatus(DMA_CHn dma_ch)
//   77 *  功能说明：判断某一个通道中断标志位状态
//   78 *  参数说明：DMA_CHn dma_ch     :DMA传输通道
//   79 *  函数返回：STATUS  :TRUE 中断事件发生 FALSE 中断事件未发生
//   80 *  使用示例：if(TRUE == DMA_GetITStatus(DMA_CH0)){...}  //判断DMA通道1是否发生传输完成中断
//   81 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   82 STATUS DMA_GetITStatus(DMA_CHn dma_ch)
DMA_GetITStatus:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function DMA_GetITStatus
          CFI NoCalls
//   83 {
//   84   return ((DMAX->CHX[dma_ch].IFG) ? TRUE : FALSE);
        MOVA    &DMAX, R15
        MOV.B   R12, R12
        RLAM.A  #0x4, R12
        MOVA    R12, R14
        ADDA    R14, R15
        MOV.W   0x10(R15), R14
        BIT.B   #0x8, R14
        SUBC.W  R12, R12
        ADD.B   #0x1, R12
        RETA
//   85 }
          CFI EndBlock cfiBlock4
//   86 /*******************************************************************************
//   87 *  函数名称：DMA_ClearITPendingBit(DMA_CHn dma_ch)
//   88 *  功能说明：DMA清除某一通道中断标志
//   89 *  参数说明：DMA_CHn dma_ch     :DMA传输通道
//   90 *  函数返回：无
//   91 *  使用示例：DMA_ClearITPendingBit(DMA_CH0);  //清除DMA通道1传输完成中断标志位
//   92 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   93 void DMA_ClearITPendingBit(DMA_CHn dma_ch)
DMA_ClearITPendingBit:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function DMA_ClearITPendingBit
          CFI NoCalls
//   94 {
//   95   DMAX->CHX[dma_ch].IFG = RESET;
        MOVA    &DMAX, R15
        MOV.B   R12, R14
        RLAM.A  #0x4, R14
        MOVA    R14, R13
        ADDA    R13, R15
        BIC.W   #0x8, 0x10(R15)
//   96 }
        RETA
          CFI EndBlock cfiBlock5

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 390 bytes in segment CODE
//   2 bytes in segment DATA16_AN
//   4 bytes in segment DATA20_C
// 
// 390 bytes of CODE  memory
//   4 bytes of CONST memory
//   0 bytes of DATA  memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none
