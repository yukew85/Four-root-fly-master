///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          17/Nov/2018  19:57:23
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\assert.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EWE6FF.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\assert.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\assert.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME assert

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__iar_require _Printf", "unknown"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC ASSERT_FAILED_STR
        PUBLIC assert_failed
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L Undefined
          CFI R4H Undefined
          CFI R4 Undefined
          CFI R5L Undefined
          CFI R5H Undefined
          CFI R5 Undefined
          CFI R6L Undefined
          CFI R6H Undefined
          CFI R6 Undefined
          CFI R7L Undefined
          CFI R7H Undefined
          CFI R7 Undefined
          CFI R8L Undefined
          CFI R8H Undefined
          CFI R8 Undefined
          CFI R9L Undefined
          CFI R9H Undefined
          CFI R9 Undefined
          CFI R10L Undefined
          CFI R10H Undefined
          CFI R10 Undefined
          CFI R11L Undefined
          CFI R11H Undefined
          CFI R11 Undefined
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN printf

// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\assert.c
//    1 /********************                                        
//    2  * 文件名       ：assert.c
//    3  * 描述         ：断言条件不成立的执行函数
//    4  *
//    5  * 实验平台     ：MSP430F5529
//    6  * 库版本       ：
//    7  * 嵌入系统     ：
//    8  * 备    注     ：
//    9  *
//   10  * 作者         ：
//   11 **********************************************************************************/
//   12 
//   13 /*
//   14  * File:        assert.c
//   15  * Purpose:     Provide macro for software assertions
//   16  *
//   17  * Notes:       ASSERT macro defined in assert.h calls assert_failed()
//   18  */
//   19 
//   20 #include "common.h"
//   21 #include "msp430f5529_system.h"
//   22 

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
//   23 const char ASSERT_FAILED_STR[] = "断言条件不成立，请检测错误原因：\n断言发生在%s文件的第%d行！\n断言所在函数：%s\n断言失败说明：%s\t―― by CTGU-GB\n\n";
ASSERT_FAILED_STR:
        DC8 0B6H, 0CFH, 0D1H, 0D4H, 0CCH, 0F5H, 0BCH, 0FEH
        DC8 0B2H, 0BBH, 0B3H, 0C9H, 0C1H, 0A2H, 0A3H, 0ACH
        DC8 0C7H, 0EBH, 0BCH, 0ECH, 0B2H, 0E2H, 0B4H, 0EDH
        DC8 0CEH, 0F3H, 0D4H, 0ADH, 0D2H, 0F2H, 0A3H, 0BAH
        DC8 0AH, 0B6H, 0CFH, 0D1H, 0D4H, 0B7H, 0A2H, 0C9H
        DC8 0FAH, 0D4H, 0DAH, 25H, 73H, 0CEH, 0C4H, 0BCH
        DC8 0FEH, 0B5H, 0C4H, 0B5H, 0DAH, 25H, 64H, 0D0H
        DC8 0D0H, 0A3H, 0A1H, 0AH, 0B6H, 0CFH, 0D1H, 0D4H
        DC8 0CBH, 0F9H, 0D4H, 0DAH, 0BAH, 0AFH, 0CAH, 0FDH
        DC8 0A3H, 0BAH, 25H, 73H, 0AH, 0B6H, 0CFH, 0D1H
        DC8 0D4H, 0CAH, 0A7H, 0B0H, 0DCH, 0CBH, 0B5H, 0C3H
        DC8 0F7H, 0A3H, 0BAH, 25H, 73H, 9, 0A1H, 0AAH
        DC8 0A1H, 0AAH, 20H, 62H, 79H, 20H, 43H, 54H
        DC8 47H, 55H, 2DH, 47H, 42H, 0AH, 0AH, 0
//   24 /********************************************************************/
//   25 //如果断言条件不成立，进入了错误状态，就会打印错误信息和用LED来显示状态

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   26 void assert_failed(char *file, int line,char *funName,char *str)
assert_failed:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function assert_failed
//   27 {
        MOVA    R12, R11
        MOV.W   R13, R10
        MOVA    R14, R8
        MOVA    R15, R9
//   28 #ifdef DEBUG
//   29 #ifdef DEBUG_UART_PRINT
//   30     //启动函数中已经初始化过串口，主函数中若修改了SMCLK频率则需再设置波特率，以便从新设置波特率
//   31     UART_SetBaudRate (Print_UART,Print_Baud);                    
//   32 #endif
//   33 
//   34     while (1)
//   35     {
//   36         DEBUG_PRINTF(ASSERT_FAILED_STR, file, line,funName,str);  //打印错误信息
??assert_failed_0:
        PUSHM.A #0x1, R9
          CFI CFA SP+8
        PUSHM.A #0x1, R8
          CFI CFA SP+12
        PUSH.W  R10
          CFI CFA SP+14
        PUSHM.A #0x1, R11
          CFI CFA SP+18
        MOVA    #ASSERT_FAILED_STR, R12
          CFI FunCall printf
        CALLA   #printf
        ADDA    #0xe, SP
          CFI CFA SP+4
        JMP     ??assert_failed_0
        NOP
//   37     }
//   38 #endif
//   39 }
          CFI EndBlock cfiBlock0

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//   40 /********************************************************************/
// 
//  32 bytes in segment CODE
// 112 bytes in segment DATA20_C
// 
//  32 bytes of CODE  memory
// 112 bytes of CONST memory
//
//Errors: none
//Warnings: none
