///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  16:49:48
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\control.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW650B.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\control.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\control.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME control

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN _Cast32sto32f
        EXTERN _Mul32f
        EXTERN ?FLT_LT
        EXTERN ?FLT_GE
        EXTERN _Sub32f
        EXTERN _Add32f
        EXTERN _Cast32fto32s
        EXTERN ?cstart_init_copy20
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC FlightPidControl
        PUBLIC MotorControl
        PUBLIC g_FMUflg
        PUBLIC motor
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN ResetPID
        EXTERN g_Attitude
        EXTERN PIDGroup
        EXTERN g_MPUManager
        EXTERN Gyro_G
        EXTERN ClacCascadePID
        EXTERN Remote
        EXTERN ResetAlt
        EXTERN memset
        EXTERN ResetAltSpeed
        EXTERN g_UAVinfo
        EXTERN HeightInfo
        EXTERN UpdateMotor

// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\control.c
//    1 /**
//    2   ******************************************************************************
//    3   * Copyright (c) 2018,北京中科浩电科技有限公司
//    4   * All rights reserved.
//    5   * 文件名称：control.c
//    6   * 摘    要：
//    7   *
//    8   * 当前版本：V1.0
//    9   * 作    者：北京中科浩电科技有限公司研发部 
//   10   * 完成日期：    
//   11   * 修改说明：
//   12   * 
//   13   * 
//   14   * 历史版本：
//   15   *
//   16   *
//   17   *******************************************************************************/
//   18 
//   19 /*==============================================================================
//   20                          ##### How to use this driver #####
//   21 ==============================================================================
//   22 飞行函数自动调用，在轮训系统中调用
//   23 1.FlightPidControl函数3ms时间调用一次
//   24 2.MotorControl函数3ms调用一次
//   25 
//   26 */
//   27 //外部文件引用
//   28 #include "include.h" 
//   29 #include "control.h"
//   30 #include "pid.h"
//   31 #include "math.h"
//   32 #include "fmuConfig.h"
//   33 #include "led.h"
//   34 #include "remote.h"
//   35 #include "spl06.h"
//   36 #include "imu.h"
//   37 #include "myMath.h"
//   38 #include "gcs.h"
//   39 #include "motor.h"
//   40 #include "speed_estimator.h"
//   41 
//   42 //宏定义区
//   43 #define EMERGENT    0
//   44 #define MOTOR1      motor[0] 
//   45 #define MOTOR2      motor[1] 
//   46 #define MOTOR3      motor[2] 
//   47 #define MOTOR4      motor[3]
//   48 #define ClearMotor  memset(motor, 0, sizeof(int16_t) * 4)
//   49 
//   50 //Extern引用
//   51 
//   52 
//   53 
//   54 //私有函数区
//   55 
//   56 
//   57 
//   58 //私有变量区

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//   59 int16_t motor[4];
motor:
        DS8 8

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//   60 FMUflg_t g_FMUflg;      //系统标志位，包含解锁标志位等
g_FMUflg:
        DS8 1
//   61 
//   62 /******************************************************************************
//   63   * 函数名称：FlightPidControl
//   64   * 函数描述：飞行PID控制函数
//   65   * 输    入：float dt：单位运行时间
//   66   * 输    出：void
//   67   * 返    回：void 
//   68   * 备    注：null  
//   69   *
//   70   *
//   71 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   72 void FlightPidControl(float dt)
FlightPidControl:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function FlightPidControl
//   73 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
        MOV.W   R13, R11
//   74     volatile static uint8_t status = WAITING_1;
//   75 
//   76     switch(status)
        MOVX.B  &??status, R14
        SUB.B   #0x1, R14
        JEQ     ??FlightPidControl_3
        SUB.B   #0xa, R14
        JEQ     ??FlightPidControl_4
        SUB.B   #0x14, R14
        JEQ     ??FlightPidControl_5
        SUB.B   #0xe0, R14
        JEQ     ??FlightPidControl_6
        JMP     ??FlightPidControl_2
//   77     {
//   78         case WAITING_1:
//   79             if(g_FMUflg.unlock)
??FlightPidControl_3:
        BITX.B  #0x1, &g_FMUflg
        JNC     ??FlightPidControl_1
//   80             {
//   81                 status = READY_11;    
        MOVX.B  #0xb, &??status
//   82             }
//   83             break;
        JMP     ??FlightPidControl_1
//   84         case READY_11:
//   85             ResetPID();                             //批量复位PID数据，防止上次遗留的数据影响本次控制
??FlightPidControl_4:
          CFI FunCall ResetPID
        CALLA   #ResetPID
//   86 
//   87             g_Attitude.yaw = 0;
        MOVX.W  #0x0, &g_Attitude + 8
        MOVX.W  #0x0, &g_Attitude + 10
//   88             PIDGroup[emPID_Yaw_Pos].desired = 0;
        MOVX.W  #0x0, &PIDGroup + 340
        MOVX.W  #0x0, &PIDGroup + 342
//   89             PIDGroup[emPID_Yaw_Pos].measured = 0;
        MOVX.W  #0x0, &PIDGroup + 344
        MOVX.W  #0x0, &PIDGroup + 346
//   90             status = PROCESS_31;
        MOVX.B  #0x1f, &??status
//   91             break;
        JMP     ??FlightPidControl_1
//   92         case PROCESS_31:                //正式进入控制
//   93             PIDGroup[emPID_Roll_Spd].measured = g_MPUManager.gyroX * Gyro_G; //内环测量值 角度/秒
??FlightPidControl_5:
        MOVX.W  &g_MPUManager + 6, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOVX.W  &Gyro_G, R14
        MOVX.W  &Gyro_G + 2, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOVX.W  R12, &PIDGroup + 88
        MOVX.W  R13, &PIDGroup + 90
//   94             PIDGroup[emPID_Pitch_Spd].measured = g_MPUManager.gyroY * Gyro_G;
        MOVX.W  &g_MPUManager + 8, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOVX.W  &Gyro_G, R14
        MOVX.W  &Gyro_G + 2, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOVX.W  R12, &PIDGroup + 24
        MOVX.W  R13, &PIDGroup + 26
//   95             PIDGroup[emPID_Yaw_Spd].measured = g_MPUManager.gyroZ * Gyro_G;
        MOVX.W  &g_MPUManager + 10, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOVX.W  &Gyro_G, R14
        MOVX.W  &Gyro_G + 2, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOVX.W  R12, &PIDGroup + 152
        MOVX.W  R13, &PIDGroup + 154
//   96 
//   97             PIDGroup[emPID_Pitch_Pos].measured = g_Attitude.pitch; //外环测量值 单位：角度
        MOVX.W  &g_Attitude + 4, &PIDGroup + 216
        MOVX.W  &g_Attitude + 6, &PIDGroup + 218
//   98             PIDGroup[emPID_Roll_Pos].measured = g_Attitude.roll;
        MOVX.W  &g_Attitude, &PIDGroup + 280
        MOVX.W  &g_Attitude + 2, &PIDGroup + 282
//   99             PIDGroup[emPID_Yaw_Pos].measured = g_Attitude.yaw;
        MOVX.W  &g_Attitude + 8, &PIDGroup + 344
        MOVX.W  &g_Attitude + 10, &PIDGroup + 346
//  100 
//  101             ClacCascadePID(&PIDGroup[emPID_Roll_Spd],  &PIDGroup[emPID_Roll_Pos],  dt);      //X轴
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    #PIDGroup + 256, R13
        MOVA    #PIDGroup + 64, R12
          CFI FunCall ClacCascadePID
        CALLA   #ClacCascadePID
//  102             ClacCascadePID(&PIDGroup[emPID_Pitch_Spd], &PIDGroup[emPID_Pitch_Pos], dt);     //Y轴
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    #PIDGroup + 192, R13
        MOVA    #PIDGroup, R12
          CFI FunCall ClacCascadePID
        CALLA   #ClacCascadePID
//  103             ClacCascadePID(&PIDGroup[emPID_Yaw_Spd],   &PIDGroup[emPID_Yaw_Pos],   dt);       //Z轴
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    #PIDGroup + 320, R13
        MOVA    #PIDGroup + 128, R12
          CFI FunCall ClacCascadePID
        CALLA   #ClacCascadePID
//  104             break;
        JMP     ??FlightPidControl_1
//  105         case EXIT_255:                  //退出控制
//  106             ResetPID();
??FlightPidControl_6:
          CFI FunCall ResetPID
        CALLA   #ResetPID
//  107 
//  108             status = WAITING_1;         //返回等待解锁
        MOVX.B  #0x1, &??status
//  109           break;
        JMP     ??FlightPidControl_1
//  110         default:
//  111             status = EXIT_255;
??FlightPidControl_2:
        MOVX.B  #0xff, &??status
//  112             break;
//  113     }
//  114     
//  115     if(g_FMUflg.unlock == EMERGENT)     //紧急制动
??FlightPidControl_1:
        BITX.B  #0x1, &g_FMUflg
        JC      ??FlightPidControl_7
//  116     {
//  117         status = EXIT_255;
        MOVX.B  #0xff, &??status
//  118     }
//  119 }
??FlightPidControl_7:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0

        RSEG DATA20_I:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_copy20
??status:
        DS8 1
        REQUIRE `?<Initializer for status>`
//  120 
//  121 
//  122 
//  123 /******************************************************************************
//  124   * 函数名称：MotorControl
//  125   * 函数描述：更新电机控制逻辑
//  126   * 输    入：void
//  127   * 输    出：void
//  128   * 返    回：void 
//  129   * 备    注：null    
//  130   *    
//  131   *
//  132 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  133 void MotorControl(void)
MotorControl:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MotorControl
//  134 {    
        PUSHM.A #0x3, R10
          CFI R8L Frame(CFA, -16)
          CFI R8H Frame(CFA, -14)
          CFI R9L Frame(CFA, -12)
          CFI R9H Frame(CFA, -10)
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+16
//  135     volatile static uint8_t status = WAITING_1;
//  136 
//  137     if(g_FMUflg.unlock == EMERGENT)
        BITX.B  #0x1, &g_FMUflg
        JC      ??MotorControl_7
//  138     {
//  139         status = EXIT_255;
        MOVX.B  #0xff, &??status_1
//  140     }
//  141     
//  142     switch(status)
??MotorControl_7:
        MOVX.B  &??status_1, R14
        SUB.B   #0x1, R14
        JEQ     ??MotorControl_8
        SUB.B   #0x1, R14
        JEQ     ??MotorControl_9
        SUB.B   #0x1d, R14
        JEQ     ??MotorControl_2
        SUB.B   #0xe0, R14
        JEQ     ??MotorControl_10
        JMP     ??MotorControl_0
//  143     {
//  144         case WAITING_1: 
//  145             
//  146             if(g_FMUflg.unlock)
??MotorControl_8:
        BITX.B  #0x1, &g_FMUflg
        JNC     ??MotorControl_9
//  147             {
//  148                 g_FMUflg.take_off = 0;    
        BICX.B  #0x4, &g_FMUflg
//  149                 g_FMUflg.height_lock = 0; 
        BICX.B  #0x2, &g_FMUflg
//  150                 status = WAITING_2;
        MOVX.B  #0x2, &??status_1
//  151             }
//  152         case WAITING_2:                               //解锁完成后判断使用者是否开始拨动遥杆进行飞行控制
//  153             if(Remote.thr > 1100 && !g_FMUflg.take_off) //刚解锁时，如果不处于一键起飞并且遥杆处于最低，认为操作者还不想飞行
??MotorControl_9:
        CMPX.W  #0x44d, &Remote + 4
        JNC     ??MotorControl_11
        MOVX.B  &g_FMUflg, R14
        RPT     #0x2
        RRUX.B  R14
        BIT.B   #0x1, R14
        JNE     ??MotorControl_11
//  154             {
//  155                 status = PROCESS_31;
        MOVX.B  #0x1f, &??status_1
        JMP     ??MotorControl_2
//  156             }
//  157             else if(g_FMUflg.take_off)
??MotorControl_11:
        MOVX.B  &g_FMUflg, R14
        RPT     #0x2
        RRUX.B  R14
        BIT.B   #0x1, R14
        JEQ     ??MotorControl_0
//  158             {
//  159                 g_FMUflg.height_lock = 1;
        BISX.B  #0x2, &g_FMUflg
//  160                 status = PROCESS_31;                            
        MOVX.B  #0x1f, &??status_1
//  161             }
//  162             else
//  163             {
//  164                 break;
//  165             }    
//  166         case PROCESS_31:
//  167             {
//  168                 int16_t temp = 0;
??MotorControl_2:
        MOV.W   #0x0, R10
//  169                 
//  170                 //添加偏移紧急制动
//  171                 if(g_Attitude.pitch < -MAX_ISFD_ATTITUDE 
//  172                 || g_Attitude.pitch > MAX_ISFD_ATTITUDE
//  173                 || g_Attitude.roll  < -MAX_ISFD_ATTITUDE
//  174                 || g_Attitude.roll  > MAX_ISFD_ATTITUDE)
        MOVX.W  &g_Attitude + 4, R12
        MOVX.W  &g_Attitude + 6, R13
        MOV.W   #0x0, R14
        MOV.W   #0xc220, R15
          CFI FunCall ?FLT_LT
        CALLA   #?FLT_LT
        JC      ??MotorControl_12
        MOVX.W  &g_Attitude + 4, R12
        MOVX.W  &g_Attitude + 6, R13
        MOV.W   #0x1, R14
        MOV.W   #0x4220, R15
          CFI FunCall ?FLT_GE
        CALLA   #?FLT_GE
        JC      ??MotorControl_12
        MOVX.W  &g_Attitude, R12
        MOVX.W  &g_Attitude + 2, R13
        MOV.W   #0x0, R14
        MOV.W   #0xc220, R15
          CFI FunCall ?FLT_LT
        CALLA   #?FLT_LT
        JC      ??MotorControl_12
        MOVX.W  &g_Attitude, R12
        MOVX.W  &g_Attitude + 2, R13
        MOV.W   #0x1, R14
        MOV.W   #0x4220, R15
          CFI FunCall ?FLT_GE
        CALLA   #?FLT_GE
        JNC     ??MotorControl_13
//  175                 {
//  176                     status = WAITING_1;
??MotorControl_12:
        MOVX.B  #0x1, &??status_1
//  177                     ResetAlt();
          CFI FunCall ResetAlt
        CALLA   #ResetAlt
//  178                     ResetPID();
          CFI FunCall ResetPID
        CALLA   #ResetPID
//  179                     ClearMotor;
        MOV.W   #0x8, R14
        MOV.W   #0x0, R15
        MOV.W   #0x0, R13
        MOVA    #motor, R12
          CFI FunCall memset
        CALLA   #memset
//  180                     ResetAltSpeed();
          CFI FunCall ResetAltSpeed
        CALLA   #ResetAltSpeed
//  181                     break;
        JMP     ??MotorControl_0
//  182                 }
//  183                 if(g_UAVinfo.UAV_Mode == Stabilize_Mode)
??MotorControl_13:
        CMPX.B  #0x0, &g_UAVinfo + 5
        JNE     ??MotorControl_14
//  184                 {
//  185                     temp = Remote.thr - 1000; 
        MOVX.W  &Remote + 4, R15
        ADD.W   #0xfc18, R15
        MOV.W   R15, R10
//  186                 }
//  187 
//  188                 if(g_UAVinfo.UAV_Mode == Altitude_Hold)
??MotorControl_14:
        CMPX.B  #0x1, &g_UAVinfo + 5
        JNE     ??MotorControl_15
//  189                 {
//  190                     temp = HeightInfo.Thr;
        MOVX.W  &HeightInfo + 16, R10
//  191                 }
//  192                 
//  193                 //将油门值作为基础值给PWM
//  194                 MOTOR1 = LIMIT(temp, 0, MOTOR_MAX_INIT_VALUE); 
??MotorControl_15:
        CMP.W   #0x0, R10
        JGE     ??MotorControl_16
        MOV.W   #0x0, R15
        JMP     ??MotorControl_3
??MotorControl_16:
        CMP.W   #0x385, R10
        JL      ??MotorControl_17
        MOV.W   #0x384, R15
        JMP     ??MotorControl_3
??MotorControl_17:
        MOV.W   R10, R15
??MotorControl_3:
        MOVX.W  R15, &motor
//  195                 MOTOR2 = LIMIT(temp, 0, MOTOR_MAX_INIT_VALUE); 
        CMP.W   #0x0, R10
        JGE     ??MotorControl_18
        MOV.W   #0x0, R15
        JMP     ??MotorControl_4
??MotorControl_18:
        CMP.W   #0x385, R10
        JL      ??MotorControl_19
        MOV.W   #0x384, R15
        JMP     ??MotorControl_4
??MotorControl_19:
        MOV.W   R10, R15
??MotorControl_4:
        MOVX.W  R15, &motor + 2
//  196                 MOTOR3 = LIMIT(temp, 0, MOTOR_MAX_INIT_VALUE); 
        CMP.W   #0x0, R10
        JGE     ??MotorControl_20
        MOV.W   #0x0, R15
        JMP     ??MotorControl_5
??MotorControl_20:
        CMP.W   #0x385, R10
        JL      ??MotorControl_21
        MOV.W   #0x384, R15
        JMP     ??MotorControl_5
??MotorControl_21:
        MOV.W   R10, R15
??MotorControl_5:
        MOVX.W  R15, &motor + 4
//  197                 MOTOR4 = LIMIT(temp, 0, MOTOR_MAX_INIT_VALUE); 
        CMP.W   #0x0, R10
        JGE     ??MotorControl_22
        MOV.W   #0x0, R15
        JMP     ??MotorControl_6
??MotorControl_22:
        CMP.W   #0x385, R10
        JL      ??MotorControl_23
        MOV.W   #0x384, R15
        JMP     ??MotorControl_6
??MotorControl_23:
        MOV.W   R10, R15
??MotorControl_6:
        MOVX.W  R15, &motor + 6
//  198                 
//  199                 MOTOR1 += +PIDGroup[emPID_Roll_Spd].out - PIDGroup[emPID_Pitch_Spd].out - PIDGroup[emPID_Yaw_Spd].out;
        MOVX.W  &motor, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOVX.W  &PIDGroup + 76, R12
        MOVX.W  &PIDGroup + 78, R13
        MOVX.W  &PIDGroup + 12, R14
        MOVX.W  &PIDGroup + 14, R15
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOVX.W  &PIDGroup + 140, R14
        MOVX.W  &PIDGroup + 142, R15
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        MOVX.W  R12, &motor
//  200                 MOTOR2 += +PIDGroup[emPID_Roll_Spd].out + PIDGroup[emPID_Pitch_Spd].out + PIDGroup[emPID_Yaw_Spd].out;
        MOVX.W  &motor + 2, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOVX.W  &PIDGroup + 76, R12
        MOVX.W  &PIDGroup + 78, R13
        MOVX.W  &PIDGroup + 12, R14
        MOVX.W  &PIDGroup + 14, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOVX.W  &PIDGroup + 140, R14
        MOVX.W  &PIDGroup + 142, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        MOVX.W  R12, &motor + 2
//  201                 MOTOR3 += -PIDGroup[emPID_Roll_Spd].out + PIDGroup[emPID_Pitch_Spd].out - PIDGroup[emPID_Yaw_Spd].out;
        MOVX.W  &motor + 4, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOVX.W  &PIDGroup + 12, R12
        MOVX.W  &PIDGroup + 14, R13
        MOVX.W  &PIDGroup + 76, R14
        MOVX.W  &PIDGroup + 78, R15
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOVX.W  &PIDGroup + 140, R14
        MOVX.W  &PIDGroup + 142, R15
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        MOVX.W  R12, &motor + 4
//  202                 MOTOR4 += -PIDGroup[emPID_Roll_Spd].out - PIDGroup[emPID_Pitch_Spd].out + PIDGroup[emPID_Yaw_Spd].out;
        MOVX.W  &motor + 6, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOVX.W  &PIDGroup + 76, R12
        MOVX.W  &PIDGroup + 78, R13
        XOR.W   #0x8000, R13
        MOVX.W  &PIDGroup + 12, R14
        MOVX.W  &PIDGroup + 14, R15
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOVX.W  &PIDGroup + 140, R14
        MOVX.W  &PIDGroup + 142, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        MOVX.W  R12, &motor + 6
//  203             }
//  204             break;
        JMP     ??MotorControl_0
//  205         case EXIT_255:
//  206             status = WAITING_1;    //返回等待解锁
??MotorControl_10:
        MOVX.B  #0x1, &??status_1
//  207             ClearMotor;
        MOV.W   #0x8, R14
        MOV.W   #0x0, R15
        MOV.W   #0x0, R13
        MOVA    #motor, R12
          CFI FunCall memset
        CALLA   #memset
//  208             break;
//  209         default:
//  210             break;
//  211     }
//  212     
//  213     UpdateMotor(MOTOR4, MOTOR2, MOTOR1, MOTOR3);
??MotorControl_0:
        MOVX.W  &motor + 4, R15
        MOVX.W  &motor, R14
        MOVX.W  &motor + 2, R13
        MOVX.W  &motor + 6, R12
          CFI FunCall UpdateMotor
        CALLA   #UpdateMotor
//  214 }
        POPM.A  #0x3, R10
          CFI R10H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1

        RSEG DATA20_I:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_copy20
??status_1:
        DS8 1
        REQUIRE `?<Initializer for status>_1`

        RSEG DATA20_ID:CONST:SORT:NOROOT(0)
`?<Initializer for status>`:
        DATA8
        DC8 1

        RSEG DATA20_ID:CONST:SORT:NOROOT(0)
`?<Initializer for status>_1`:
        DATA8
        DC8 1

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  215 
//  216 /******************* (C) 版权所有 2018 北京中科浩电科技有限公司 *******************/
// 
// 1 180 bytes in segment CODE
//     2 bytes in segment DATA20_I
//     2 bytes in segment DATA20_ID
//     9 bytes in segment DATA20_Z
// 
// 1 180 bytes of CODE  memory
//     2 bytes of CONST memory
//    11 bytes of DATA  memory
//
//Errors: none
//Warnings: none
