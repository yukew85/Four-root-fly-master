///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  19:41:05
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\UART.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW3236.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\UART.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\UART.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME UART

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN _Cast32uto32f
        EXTERN _Div32f
        EXTERN _Cast32fto32s
        EXTERN _Sub32f
        EXTERN _Mul32f
        EXTERN ?cstart_init_copy20
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK `??USCI_A1_ISR::??INTVEC 92`
        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC PollingUSART
        PUBLIC TimeoutUSART
        PUBLIC U2_UCA1_Send
        PUBWEAK UCA1TXBUF
        PUBLIC USART_Init
        PUBLIC USCI_A1_ISR
        PUBLIC Usart2
        PUBLIC lbUsartRx
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC or(load(2, DATA, add(CFA, literal(-2))), lshift(and(load(2, DATA, add(CFA, literal(-4))), 61440), 4))
          CFI SR Frame(CFA, -4)
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
USCI_A1_ISR         SYMBOL "USCI_A1_ISR"
`??USCI_A1_ISR::??INTVEC 92` SYMBOL "??INTVEC 92", USCI_A1_ISR

        EXTERN UCS_getACLK
        EXTERN UCS_getSMCLK
        EXTERN GPIO_setAsPeripheralModuleFunctionOutputPin
        EXTERN GPIO_setAsPeripheralModuleFunctionInputPin
        EXTERN USCI_A_UART_init
        EXTERN USCI_A_UART_enable
        EXTERN USCI_A_UART_enableInterrupt
        EXTERN SwitchPort
        EXTERN USCI_A_UART_getInterruptStatus
        EXTERN USCI_A_UART_clearInterrupt
        EXTERN USCI_A_UART_receiveData

// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\UART.c
//    1 /**
//    2   ******************************************************************************
//    3   * Copyright (c) 2018,北京中科浩电科技有限公司
//    4   * All rights reserved.
//    5   * 文件名称：UART.c
//    6   * 摘    要：
//    7   *
//    8   * 当前版本：V1.0
//    9   * 作    者：北京中科浩电科技有限公司研发部 
//   10   * 完成日期：    
//   11   * 修改说明：
//   12   * 
//   13   *
//   14   * 历史版本：
//   15   *
//   16   *
//   17   *******************************************************************************/
//   18 
//   19 /*==============================================================================
//   20                          ##### How to use this driver #####
//   21 ==============================================================================
//   22 处理串口的相关事情
//   23 
//   24 */
//   25 //外部文件引用
//   26 #include "UART.h"

        ASEGN DATA16_AN:DATA:NOROOT,060eH
// unsigned char volatile __data16 UCA1TXBUF
UCA1TXBUF:
        DS8 1
//   27 #include "include.h"
//   28 #include "communication.h"
//   29 
//   30 #define USART_RX_TIMEOUT_MAX    20

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//   31 bool lbUsartRx = false;
lbUsartRx:
        DS8 1

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//   32 int TimeoutUSART = 0;
TimeoutUSART:
        DS8 2
//   33 

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
//   34 Usart_t Usart2 = 
Usart2:
        DS8 408
        REQUIRE `?<Initializer for Usart2>`
//   35 {
//   36     .tx_idle = 1,
//   37     .tx_totle = 0,
//   38     .tx_cnt = 0,
//   39 };
//   40 
//   41 /******************************************************************************
//   42   * 函数名称：USART_Init
//   43   * 函数描述：串口初始化
//   44   * 输    入：void
//   45   * 输    出：void
//   46   * 返    回：void
//   47   * 备    注：null
//   48   *
//   49   *
//   50 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   51 void USART_Init(uint8_t ClockSource, uint32_t Baudrate)
USART_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function USART_Init
//   52 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUBA    #0xc, SP
          CFI CFA SP+48
        MOV.B   R12, R6
        MOV.W   R14, R4
        MOV.W   R15, R5
//   53     USCI_A_UART_initParam USCI_A1_UART_initParam;
//   54     
//   55     float frequency = 0.0;
        MOV.W   #0x0, R8
        MOV.W   #0x0, R9
//   56     float N_f = 0.0;
        MOV.W   #0x0, R10
        MOV.W   #0x0, R11
//   57     
//   58     if(USCI_A_UART_CLOCKSOURCE_ACLK == ClockSource)
        CMP.B   #0x40, R6
        JNE     ??USART_Init_3
//   59     {
//   60         frequency = UCS_getACLK();
          CFI FunCall UCS_getACLK
        CALLA   #UCS_getACLK
          CFI FunCall _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   R12, R8
        MOV.W   R13, R9
        JMP     ??USART_Init_2
//   61     }
//   62     else if(USCI_A_UART_CLOCKSOURCE_SMCLK == ClockSource)
??USART_Init_3:
        CMP.B   #0x80, R6
        JNE     ??USART_Init_1
//   63     {
//   64         frequency = UCS_getSMCLK();
          CFI FunCall UCS_getSMCLK
        CALLA   #UCS_getSMCLK
          CFI FunCall _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   R12, R8
        MOV.W   R13, R9
//   65     }
//   66     else
//   67     {
//   68       return;
//   69     }
//   70     
//   71     // Tx: P4.4     Rx: P4.5
//   72     GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P4, GPIO_PIN4);
??USART_Init_2:
        MOV.W   #0x10, R13
        MOV.B   #0x4, R12
          CFI FunCall GPIO_setAsPeripheralModuleFunctionOutputPin
        CALLA   #GPIO_setAsPeripheralModuleFunctionOutputPin
//   73     GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P4, GPIO_PIN5);
        MOV.W   #0x20, R13
        MOV.B   #0x4, R12
          CFI FunCall GPIO_setAsPeripheralModuleFunctionInputPin
        CALLA   #GPIO_setAsPeripheralModuleFunctionInputPin
//   74     
//   75     N_f = frequency / Baudrate;
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.W   R4, R12
        MOV.W   R5, R13
          CFI FunCall _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R8, R12
        MOV.W   R9, R13
          CFI FunCall _Div32f
        CALLA   #_Div32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//   76     
//   77     USCI_A1_UART_initParam.selectClockSource = ClockSource;
        MOV.B   R6, 0(SP)
//   78     USCI_A1_UART_initParam.clockPrescalar = (uint16_t)(N_f / 16);    
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   #0x0, R14
        MOV.W   #0x4180, R15
          CFI FunCall _Div32f
        CALLA   #_Div32f
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        MOV.W   R12, 0x2(SP)
//   79     USCI_A1_UART_initParam.firstModReg = (uint16_t)(((N_f / 16) - (uint16_t)(N_f / 16)) * 16);
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   #0x0, R14
        MOV.W   #0x4180, R15
          CFI FunCall _Div32f
        CALLA   #_Div32f
        PUSH.W  R13
          CFI CFA SP+50
        PUSH.W  R12
          CFI CFA SP+52
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   #0x0, R14
        MOV.W   #0x4180, R15
          CFI FunCall _Div32f
        CALLA   #_Div32f
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        MOV.W   #0x0, R13
          CFI FunCall _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        POP.W   R12
          CFI CFA SP+50
        POP.W   R13
          CFI CFA SP+48
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   #0x0, R12
        MOV.W   #0x4180, R13
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        MOV.B   R12, 0x4(SP)
//   80     USCI_A1_UART_initParam.secondModReg = 0;
        MOV.B   #0x0, 0x5(SP)
//   81     USCI_A1_UART_initParam.parity = USCI_A_UART_NO_PARITY;
        MOV.B   #0x0, 0x6(SP)
//   82     USCI_A1_UART_initParam.msborLsbFirst = USCI_A_UART_LSB_FIRST;
        MOV.B   #0x0, 0x7(SP)
//   83     USCI_A1_UART_initParam.numberofStopBits = USCI_A_UART_ONE_STOP_BIT;
        MOV.B   #0x0, 0x8(SP)
//   84     USCI_A1_UART_initParam.uartMode = USCI_A_UART_MODE;
        MOV.B   #0x0, 0x9(SP)
//   85     USCI_A1_UART_initParam.overSampling = USCI_A_UART_OVERSAMPLING_BAUDRATE_GENERATION;
        MOV.B   #0x1, 0xa(SP)
//   86     
//   87     USCI_A_UART_init(USCI_A1_BASE, &USCI_A1_UART_initParam);
        MOVA    SP, R13
        MOV.W   #0x600, R12
          CFI FunCall USCI_A_UART_init
        CALLA   #USCI_A_UART_init
//   88     
//   89     USCI_A_UART_enable(USCI_A1_BASE);
        MOV.W   #0x600, R12
          CFI FunCall USCI_A_UART_enable
        CALLA   #USCI_A_UART_enable
//   90     
//   91     /*
//   92         http://bbs.eeworld.com.cn/forum.php?mod=viewthread&tid=430117&highlight=msp430%2B%B4%AE%BF%DA%D6%D0%B6%CF
//   93         串口中断使能要放在串口初始化结束之后 否则不能进入中断
//   94     */
//   95     USCI_A_UART_enableInterrupt(USCI_A1_BASE, USCI_A_UART_TRANSMIT_INTERRUPT);
        MOV.B   #0x2, R13
        MOV.W   #0x600, R12
          CFI FunCall USCI_A_UART_enableInterrupt
        CALLA   #USCI_A_UART_enableInterrupt
//   96     USCI_A_UART_enableInterrupt(USCI_A1_BASE, USCI_A_UART_RECEIVE_INTERRUPT);
        MOV.B   #0x1, R13
        MOV.W   #0x600, R12
          CFI FunCall USCI_A_UART_enableInterrupt
        CALLA   #USCI_A_UART_enableInterrupt
//   97 }
??USART_Init_1:
        ADDA    #0xc, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   98 
//   99 /******************************************************************************
//  100   * 函数名称：PollingUSART
//  101   * 函数描述：轮询串口接收信息
//  102   * 输    入：void
//  103   * 输    出：void
//  104   * 返    回：void
//  105   * 备    注：整个系统与上位机通信，此处为入口
//  106   *
//  107   *
//  108 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  109 void PollingUSART()
PollingUSART:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function PollingUSART
//  110 {    
//  111     if(lbUsartRx)
        CMPX.B  #0x0, &lbUsartRx
        JEQ     ??PollingUSART_0
//  112     {
//  113         TimeoutUSART++;
        ADDX.W  #0x1, &TimeoutUSART
//  114         
//  115         if(TimeoutUSART > USART_RX_TIMEOUT_MAX)
        CMPX.W  #0x15, &TimeoutUSART
        JL      ??PollingUSART_0
//  116         {
//  117             //数据入口
//  118             SwitchPort(Connect_Port_USB, Usart2.rx_buf);
        MOVA    #Usart2 + 208, R13
        MOV.B   #0x0, R12
          CFI FunCall SwitchPort
        CALLA   #SwitchPort
//  119             
//  120             TimeoutUSART = 0;
        MOVX.W  #0x0, &TimeoutUSART
//  121             Usart2.rx_cnt = 0;
        MOVX.W  #0x0, &Usart2 + 6
//  122             lbUsartRx = false;
        MOVX.B  #0x0, &lbUsartRx
//  123         }
//  124     }
//  125 }
??PollingUSART_0:
        RETA
          CFI EndBlock cfiBlock1
//  126 
//  127 /******************************************************************************
//  128   * 函数名称：U2_UCA1_Send
//  129   * 函数描述：以中断的方式发送数据
//  130   * 输    入：
//  131   * uint8_t *ptx:要发送的数据地址
//  132   * uint8_t len:要发送的数据长度
//  133   * 输    出：void
//  134   * 返    回：void
//  135   * 备    注：null
//  136   *
//  137   *
//  138 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  139 void U2_UCA1_Send(uint8_t* pTx, uint8_t len)
U2_UCA1_Send:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function U2_UCA1_Send
          CFI NoCalls
//  140 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
//  141     uint8_t i;
//  142     
//  143     // 等待串口空闲
//  144     while(!Usart2.tx_idle)
??U2_UCA1_Send_0:
        CMPX.W  #0x0, &Usart2
        JEQ     ??U2_UCA1_Send_0
//  145         ;
//  146     
//  147     // 占用串口
//  148     Usart2.tx_idle = 0;
        MOVX.W  #0x0, &Usart2
//  149     
//  150     // 缓存要发送的数据
//  151     for(i=0; i<len; i++)
        MOV.B   #0x0, R14
??U2_UCA1_Send_1:
        CMP.B   R13, R14
        JC      ??U2_UCA1_Send_2
//  152     {
//  153         Usart2.tx_buf[i] = pTx[i];
        MOV.B   R14, R15
        ADDA    R12, R15
        MOV.B   R14, R10
        MOVX.B  @R15, Usart2 + 8(R10)
//  154     }
        ADD.B   #0x1, R14
        JMP     ??U2_UCA1_Send_1
//  155     
//  156     // 启动发送
//  157     Usart2.tx_totle = len;
??U2_UCA1_Send_2:
        MOV.B   R13, R13
        MOVX.W  R13, &Usart2 + 2
//  158     Usart2.tx_cnt = 0;
        MOVX.W  #0x0, &Usart2 + 4
//  159     
//  160     if(Usart2.tx_cnt < Usart2.tx_totle)
        CMPX.W  &Usart2 + 2, &Usart2 + 4
        JC      ??U2_UCA1_Send_3
//  161     {
//  162         UCA1TXBUF = Usart2.tx_buf[Usart2.tx_cnt++];
        MOVX.W  &Usart2 + 4, R15
        MOVX.B  Usart2 + 8(R15), &0x60e
        ADDX.W  #0x1, &Usart2 + 4
//  163     }
//  164 }
??U2_UCA1_Send_3:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
        REQUIRE UCA1TXBUF
//  165 
//  166 /******************************************************************************
//  167   * 函数名称：USCI_A1_ISR
//  168   * 函数描述：USCI_AI中断服务函数
//  169   * 输    入：void
//  170   * 输    出：void
//  171   * 返    回：void
//  172   * 备    注：中断函数自动调用
//  173   *
//  174   *
//  175 ******************************************************************************/
//  176 #if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
//  177     #pragma vector = USCI_A1_VECTOR

        RSEG ISR_CODE:CODE:REORDER:NOROOT(1)
        CALL_GRAPH_ROOT USCI_A1_ISR, "interrupt"
//  178     __interrupt void USCI_A1_ISR(void)
USCI_A1_ISR:
          CFI Block cfiBlock3 Using cfiCommon1
          CFI Function USCI_A1_ISR
//  179 #elif defined(__GNUC__)
//  180     void __attribute__ ((interrupt(USCI_A1_VECTOR))) USCI_A1_ISR (void)
//  181 #else
//  182     #error Compiler not supported!
//  183 #endif
//  184 {
        PUSHM.A #0x6, R15
          CFI R10L Frame(CFA, -28)
          CFI R10H Frame(CFA, -26)
          CFI R11L Frame(CFA, -24)
          CFI R11H Frame(CFA, -22)
          CFI R12L Frame(CFA, -20)
          CFI R12H Frame(CFA, -18)
          CFI R13L Frame(CFA, -16)
          CFI R13H Frame(CFA, -14)
          CFI R14L Frame(CFA, -12)
          CFI R14H Frame(CFA, -10)
          CFI R15L Frame(CFA, -8)
          CFI R15H Frame(CFA, -6)
          CFI CFA SP+28
//  185     // USART Tx Interrupt
//  186     if(USCI_A_UART_getInterruptStatus(USCI_A1_BASE, USCI_A_UART_TRANSMIT_INTERRUPT_FLAG))
        MOV.B   #0x2, R13
        MOV.W   #0x600, R12
          CFI FunCall USCI_A_UART_getInterruptStatus
        CALLA   #USCI_A_UART_getInterruptStatus
        CMP.B   #0x0, R12
        JEQ     ??USCI_A1_ISR_1
//  187     {
//  188         if(Usart2.tx_cnt < Usart2.tx_totle)
        CMPX.W  &Usart2 + 2, &Usart2 + 4
        JC      ??USCI_A1_ISR_2
//  189         {
//  190             UCA1TXBUF = Usart2.tx_buf[Usart2.tx_cnt++];
        MOVX.W  &Usart2 + 4, R15
        MOVX.B  Usart2 + 8(R15), &0x60e
        ADDX.W  #0x1, &Usart2 + 4
        JMP     ??USCI_A1_ISR_0
//  191         }
//  192         else
//  193         {
//  194             Usart2.tx_idle = 1;
??USCI_A1_ISR_2:
        MOVX.W  #0x1, &Usart2
//  195         }
//  196         
//  197         USCI_A_UART_clearInterrupt(USCI_A1_BASE, USCI_A_UART_TRANSMIT_INTERRUPT_FLAG);
??USCI_A1_ISR_0:
        MOV.B   #0x2, R13
        MOV.W   #0x600, R12
          CFI FunCall USCI_A_UART_clearInterrupt
        CALLA   #USCI_A_UART_clearInterrupt
//  198     }
//  199     
//  200     // USART Rx Interrupt
//  201     if(USCI_A_UART_getInterruptStatus(USCI_A1_BASE, USCI_A_UART_RECEIVE_INTERRUPT_FLAG))
??USCI_A1_ISR_1:
        MOV.B   #0x1, R13
        MOV.W   #0x600, R12
          CFI FunCall USCI_A_UART_getInterruptStatus
        CALLA   #USCI_A_UART_getInterruptStatus
        CMP.B   #0x0, R12
        JEQ     ??USCI_A1_ISR_3
//  202     {
//  203         lbUsartRx = true;
        MOVX.B  #0x1, &lbUsartRx
//  204         
//  205         TimeoutUSART = 0;
        MOVX.W  #0x0, &TimeoutUSART
//  206         Usart2.rx_buf[Usart2.rx_cnt++] = USCI_A_UART_receiveData(USCI_A1_BASE);
        MOVX.W  &Usart2 + 6, R10
        MOV.W   R10, R15
        ADD.W   #0x1, R15
        MOVX.W  R15, &Usart2 + 6
        MOV.W   #0x600, R12
          CFI FunCall USCI_A_UART_receiveData
        CALLA   #USCI_A_UART_receiveData
        MOVX.B  R12, Usart2 + 208(R10)
//  207         USCI_A_UART_clearInterrupt(USCI_A1_BASE, USCI_A_UART_RECEIVE_INTERRUPT_FLAG);
        MOV.B   #0x1, R13
        MOV.W   #0x600, R12
          CFI FunCall USCI_A_UART_clearInterrupt
        CALLA   #USCI_A_UART_clearInterrupt
//  208     }
//  209 }
??USCI_A1_ISR_3:
        POPM.A  #0x6, R15
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R12H SameValue
          CFI R13H SameValue
          CFI R14H SameValue
          CFI R15H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R12L SameValue
          CFI R13L SameValue
          CFI R14L SameValue
          CFI R15L SameValue
          CFI CFA SP+4
        RETI
          CFI EndBlock cfiBlock3
        REQUIRE UCA1TXBUF

        COMMON INTVEC:CONST:ROOT(1)
        ORG 92
`??USCI_A1_ISR::??INTVEC 92`:
        DC16    USCI_A1_ISR

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for Usart2>`:
        DATA16
        DC16 1, 0, 0
        DATA64
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  210 
//  211 /******************* (C) 版权所有 2018 北京中科浩电科技有限公司 *******************/
// 
// 422 bytes in segment CODE
//   1 byte  in segment DATA16_AN
// 408 bytes in segment DATA20_I
// 408 bytes in segment DATA20_ID
//   3 bytes in segment DATA20_Z
//   2 bytes in segment INTVEC
// 134 bytes in segment ISR_CODE
// 
// 556 bytes of CODE  memory
// 408 bytes of CONST memory (+ 2 bytes shared)
// 411 bytes of DATA  memory (+ 1 byte  shared)
//
//Errors: none
//Warnings: none
