///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          17/Nov/2018  19:57:26
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_spi.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EWF45B.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_spi.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\msp430f5529_spi.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME msp430f5529_spi

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?DivMod32u
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC SPI_ClearITPendingBit
        PUBLIC SPI_GetITStatus
        PUBLIC SPI_ITConfig
        PUBLIC SPI_Master_Init
        PUBLIC SPI_PIN
        PUBLIC SPI_SendReadByte
        PUBLIC SPI_SendReadString
        PUBLIC SPI_SetBaudRate
        PUBLIC USCIX
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN g_sClock
        EXTERN GPIO_MultiBits_Init

// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_spi.c
//    1 #include "msp430f5529_spi.h"
//    2 #include "msp430f5529_clock.h"
//    3 #include "msp430f5529_gpio.h"
//    4 

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//    5 const USCI_MemMapPtr USCIX[]={USCI_A0_BASE_PTR,USCI_A1_BASE_PTR,USCI_B0_BASE_PTR,USCI_B1_BASE_PTR};
USCIX:
        DATA32
        DC32 5C0H, 600H, 5E0H, 620H
//    6 
//    7 const struct
//    8 {
//    9   GPIO_PIN STE_PIN ; //
//   10   GPIO_PIN SIMO_PIN; //
//   11   GPIO_PIN SOMI_PIN; //
//   12   GPIO_PIN CLK_PIN ; //

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
//   13 }SPI_PIN[]=
SPI_PIN:
        DATA8
        DC8 2, 2, 2, 3, 2, 4, 1, 7, 3, 3, 3, 4, 3, 5, 3, 0, 1, 1, 2, 0, 2, 1, 2
        DC8 2, 3, 0, 3, 1, 3, 2, 3, 3
//   14 { //        STE             SIMO             SOMI             CLK
//   15   /*SPI0*/{.STE_PIN={P3,2},.SIMO_PIN={P3,3},.SOMI_PIN={P3,4},.CLK_PIN={P2,7}},    
//   16   /*SPI1*/{.STE_PIN={P4,3},.SIMO_PIN={P4,4},.SOMI_PIN={P4,5},.CLK_PIN={P4,0}},       
//   17   /*SPI2*/{.STE_PIN={P2,1},.SIMO_PIN={P3,0},.SOMI_PIN={P3,1},.CLK_PIN={P3,2}},    
//   18   /*SPI3*/{.STE_PIN={P4,0},.SIMO_PIN={P4,1},.SOMI_PIN={P4,2},.CLK_PIN={P4,3}},  
//   19 };//引脚初始化数组
//   20 /*******************************************************************************
//   21 *  函数名称：SPI_Master_Init (SPIn spin,uint32_t BaudRate,FirstBit firstbit, SPI_STE_Mode spistemode,SPI_CLK_Mode spiclkmode)
//   22 *  功能说明：SPI初始化
//   23 *  参数说明：SPIn spin                  :SPI模块号
//   24              uint32_t BaudRate          :传输波特率
//   25              SPI_FirstBit firstbit      :先发送高位或低位数据
//   26              SPI_STE_Mode spistemode    :STE模式
//   27              SPI_CLK_Mode spiclkmode    :SPI时钟模式
//   28 *  函数返回：无
//   29 *  使用例程：SPI_Master_Init(SPI2,10000000,MSB_First,SPI_STE_None,SPI_CLK_Mode_4); //初始化SPI模块，波特率为10000000，先发送高位数据，STE信号屏蔽，时钟线模式4
//   30 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   31 void SPI_Master_Init (SPIn spin,uint32_t BaudRate,SPI_FirstBit firstbit, SPI_STE_Mode spistemode,SPI_CLK_Mode spiclkmode)
SPI_Master_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function SPI_Master_Init
//   32 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        SUBA    #0x2, SP
          CFI CFA SP+30
        MOV.B   R12, R10
        MOV.W   R14, R8
        MOV.W   R15, R9
        MOV.B   R13, R7
        MOV.B   0x1e(SP), R11
        MOV.B   0x20(SP), R6
//   33   WordType BR;
//   34   BR.Word = g_sClock.SMCLK.nHZ/BaudRate;        //求取波特率所需的分频系数
        MOVX.W  &g_sClock + 12, R12
        MOVX.W  &g_sClock + 14, R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall ?DivMod32u
        CALLA   #?DivMod32u
        MOV.W   R12, 0(SP)
//   35   if(spistemode != SPI_STE_None)
        CMP.B   #0x0, R11
        JEQ     ??SPI_Master_Init_1
//   36   {
//   37     GPIO_Init(SPI_PIN[spin].STE_PIN.Port,SPI_PIN[spin].STE_PIN.Pin,SEL);     //片选信号引脚设为第二功能
        MOV.W   #0x100, R14
        MOV.W   #0x1, R13
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 1(R15), R15
        SUB.B   #0x1, R15
        JN      ??SPI_Master_Init_2
        RPT     R15
        RLAX.W  R13
??SPI_Master_Init_2:
        ADD.B   #0x1, R15
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN(R15), R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//   38   }
//   39   GPIO_Init(SPI_PIN[spin].SIMO_PIN.Port,SPI_PIN[spin].SIMO_PIN.Pin,SEL);     //主输出从输入信号引脚设为第二功能
??SPI_Master_Init_1:
        MOV.W   #0x100, R14
        MOV.W   #0x1, R13
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 3(R15), R15
        SUB.B   #0x1, R15
        JN      ??SPI_Master_Init_3
        RPT     R15
        RLAX.W  R13
??SPI_Master_Init_3:
        ADD.B   #0x1, R15
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 2(R15), R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//   40   GPIO_Init(SPI_PIN[spin].SOMI_PIN.Port,SPI_PIN[spin].SOMI_PIN.Pin,SEL);     //主输入从输出信号引脚设为第二功能
        MOV.W   #0x100, R14
        MOV.W   #0x1, R13
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 5(R15), R15
        SUB.B   #0x1, R15
        JN      ??SPI_Master_Init_4
        RPT     R15
        RLAX.W  R13
??SPI_Master_Init_4:
        ADD.B   #0x1, R15
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 4(R15), R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//   41   GPIO_Init(SPI_PIN[spin].CLK_PIN.Port,SPI_PIN[spin].CLK_PIN.Pin,SEL);       //时钟信号引脚设为第二功能
        MOV.W   #0x100, R14
        MOV.W   #0x1, R13
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 7(R15), R15
        SUB.B   #0x1, R15
        JN      ??SPI_Master_Init_5
        RPT     R15
        RLAX.W  R13
??SPI_Master_Init_5:
        ADD.B   #0x1, R15
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 6(R15), R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//   42   
//   43   USCIX[spin]->CTL1 = UCSWRST; 
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   #0x1, 0(R15)
//   44   USCIX[spin]->SYNC = BIT_SET;                             //同步模式
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIS.B   #0x1, 0x1(R15)
//   45   USCIX[spin]->MST = BIT_SET;                              //主机模式
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIS.B   #0x8, 0x1(R15)
//   46   USCIX[spin]->MODE = spistemode;                      //片选信号设置
        MOV.B   R11, R14
        RLA.B   R14
        AND.B   #0x6, R14
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   0x1(R15), R15
        AND.B   #0xf9, R15
        BIS.B   R14, R15
        MOV.B   R10, R14
        RLAM.A  #0x2, R14
        MOVX.A  USCIX(R14), R14
        MOV.B   R15, 0x1(R14)
//   47   USCIX[spin]->CKMODE = spiclkmode;                    //时钟线模式设置
        MOV.B   R6, R14
        RPT     #0x6
        RLAX.B  R14
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   0x1(R15), R15
        AND.B   #0x3f, R15
        BIS.B   R14, R15
        MOV.B   R10, R14
        RLAM.A  #0x2, R14
        MOVX.A  USCIX(R14), R14
        MOV.B   R15, 0x1(R14)
//   48   USCIX[spin]->MSB = firstbit;                         //发送首位设置
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIT.B   #0x1, R7
        JC      ??SPI_Master_Init_6
        BIC.B   #0x20, 0x1(R15)
        JMP     ??SPI_Master_Init_0
??SPI_Master_Init_6:
        BIS.B   #0x20, 0x1(R15)
//   49   
//   50   USCIX[spin]->SSEL= USCI_SSEL__SMCLK;                 //时钟源设置
??SPI_Master_Init_0:
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   @R15, R14
        AND.B   #0x3f, R14
        BIS.B   #0x80, R14
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   R14, 0(R15)
//   51   
//   52   USCIX[spin]->BRW = BR.Word;                          //BRW写1与写0发现波特率没有区别
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.W   @SP, 0x6(R15)
//   53   USCIX[spin]->CTL1 &=~ UCSWRST; 
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIC.B   #0x1, 0(R15)
//   54   
//   55   USCIX[spin]->IE = 0u;                                         //关闭所有中断
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   #0x0, 0x1c(R15)
//   56   USCIX[spin]->RXIFG = RESET;                                   //清除接收数据标志
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIC.B   #0x1, 0x1d(R15)
//   57   USCIX[spin]->TXIFG = BIT_SET;                                     //置位发送缓冲区为空标志
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIS.B   #0x2, 0x1d(R15)
//   58 }
        ADDA    #0x2, SP
          CFI CFA SP+28
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   59 /*******************************************************************************
//   60 函数名称：SPI_SetBaudRate (SPIn spin, uint32_t BaudRate)     
//   61 功能说明：设置SPI波特率
//   62 参数说明：SPIn spin                  :SPI模块号
//   63           uint32_t BaudRate            :传输波特率
//   64 函数返回：无
//   65 *******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   66 void  SPI_SetBaudRate (SPIn spin, uint32_t BaudRate)                  
SPI_SetBaudRate:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function SPI_SetBaudRate
//   67 {
        PUSHM.A #0x3, R10
          CFI R8L Frame(CFA, -16)
          CFI R8H Frame(CFA, -14)
          CFI R9L Frame(CFA, -12)
          CFI R9H Frame(CFA, -10)
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+16
        MOV.B   R12, R10
        MOV.W   R14, R8
        MOV.W   R15, R9
//   68   USCIX[spin]->CTL1 = UCSSEL__SMCLK + UCSWRST;                //设置时钟源
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   #0x81, 0(R15)
//   69  
//   70   USCIX[spin]->BRW =(uint16_t)g_sClock.SMCLK.nHZ/BaudRate;                                 //设置波特率
        MOVX.W  &g_sClock + 12, R12
        MOV.W   #0x0, R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall ?DivMod32u
        CALLA   #?DivMod32u
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.W   R12, 0x6(R15)
//   71 
//   72   USCIX[spin]->CTL1 &= ~UCSWRST;      
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIC.B   #0x1, 0(R15)
//   73 }
        POPM.A  #0x3, R10
          CFI R10H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//   74 /*******************************************************************************
//   75 *  函数名称：SPI_SendReadByte(SPIn spin,uint8_t data)
//   76 *  功能说明：SPI发送并接收一字节数据，发送的同时一定会接收数据
//   77 *  参数说明：SPIn spin :SPI模块号
//   78              uint8_t data:要发送的数据
//   79 *  函数返回：读取到的数据
//   80 *  使用示例：SPI_SendReadByte(SPIn spin,uint8_t data)
//   81 *  注意：不提供片选信号，需要自己使用IO口模拟CS片选信号
//   82 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   83 uint8_t SPI_SendReadByte(SPIn spin,uint8_t data)
SPI_SendReadByte:
??SPI_SendReadByte_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function SPI_SendReadByte
          CFI NoCalls
//   84 {
//   85   while(USCIX[spin]->UC_BUSY == BIT_SET);                   //判断SPIn硬件是否忙
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIT.B   #0x1, 0xa(R15)
        JC      ??SPI_SendReadByte_0
//   86   USCIX[spin]->TXBUF = data;                            // 写入要发送的数据
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   R13, 0xe(R15)
//   87   while(USCIX[spin]->UC_BUSY == BIT_SET);                   //判断SPIn硬件是否忙
??SPI_SendReadByte_1:
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIT.B   #0x1, 0xa(R15)
        JC      ??SPI_SendReadByte_1
//   88   return USCIX[spin]->RXBUF;                            //返回接收到的数据,读取RXBUF后RXIFG位自动清除
        MOV.B   R12, R12
        RLAM.A  #0x2, R12
        MOVX.A  USCIX(R12), R15
        MOV.B   0xc(R15), R12
        RETA
//   89 }
          CFI EndBlock cfiBlock2
//   90 /*******************************************************************************
//   91 *  函数名称：SPI_SendReadString(SPIn spin,char * SendData,char * ReceiveData,uint16_t Length)
//   92 *  功能说明：SPIn发送并接收多字节数据
//   93 *  参数说明：SPIn spin          :SPI模块号
//   94              char * SendData    :发送数据地址
//   95              char * ReceiveData :接收数据缓存地址
//   96              uint16_t Length      :要发送数据字节数
//   97 *  函数返回：无
//   98 *  使用示例：char SendData[20] = "Hello!";
//   99              char ReceiveData[20];
//  100              SPI_SendReadString(SPI0,SendData,ReceiveData,strlen("Hello!")); //SPI0发送字符串
//  101 *  注意：不提供片选信号，需要自己使用IO口模拟CS片选信号
//  102 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  103 void SPI_SendReadString(SPIn spin,char * SendData,char * ReceiveData,uint16_t Length)
SPI_SendReadString:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function SPI_SendReadString
//  104 {
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.B   R12, R11
        MOVA    R13, R8
        MOVA    R14, R9
        MOV.W   R15, R10
//  105   while(Length--)
??SPI_SendReadString_0:
        MOV.W   R10, R15
        MOV.W   R15, R10
        ADD.W   #0xffff, R10
        CMP.W   #0x0, R15
        JEQ     ??SPI_SendReadString_1
//  106   {
//  107     *ReceiveData++=SPI_SendReadByte(spin, *SendData++);
        MOV.B   @R8, R13
        MOV.B   R11, R12
          CFI FunCall SPI_SendReadByte
        CALLA   #SPI_SendReadByte
        ADDA    #0x1, R8
        MOV.B   R12, 0(R9)
        ADDA    #0x1, R9
        JMP     ??SPI_SendReadString_0
//  108   }
//  109 }
??SPI_SendReadString_1:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//  110 /*******************************************************************************
//  111 *  函数名称：SPI_ITConfig    (SPIn spin,SPI_IRQn irqn,STATUS ITState)
//  112 *  功能说明：设置SPI某一中断是否使能
//  113 *  参数说明：SPIn spin          :SPI模块号
//  114              SPI_IRQn irqn      :中断事件选择
//  115              STATUS ITState     :中断是否使能
//  116 *  函数返回：无
//  117 *  使用示例：SPI_ITConfig    (SPI1,SPI_RX_IRQn,ENABLE);  //使能SPI1的接收中断
//  118 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  119 void  SPI_ITConfig    (SPIn spin,SPI_IRQn irqn,STATUS ITState)
SPI_ITConfig:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function SPI_ITConfig
          CFI NoCalls
//  120 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
//  121   if(ITState != DISABLE)
        CMP.B   #0x0, R14
        JEQ     ??SPI_ITConfig_1
//  122   {
//  123     USCIX[spin]->IE |= irqn;
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIS.B   R13, 0x1c(R15)
        JMP     ??SPI_ITConfig_0
//  124   }
//  125   else
//  126   {
//  127     USCIX[spin]->IE &=~irqn;
??SPI_ITConfig_1:
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIC.B   R13, 0x1c(R15)
//  128   }
//  129 }
??SPI_ITConfig_0:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock4
//  130 /*******************************************************************************
//  131 *  函数名称：SPI_GetITStatus(SPIn spin,SPI_IRQn irqn)
//  132 *  功能说明：获取SPI中断标志位状态
//  133 *  参数说明：SPIn spin          :SPI模块号
//  134              SPI_IRQn irqn      :中断事件选择
//  135 *  函数返回：STATUS :TRUE-中断事件发生 FALSE-中断事件未发生
//  136 *  使用示例：if(TRUE == SPI_GetITStatus(SPI1,SPI_RX_IRQn)){...}  //判断SPI1接收中断事件是否发生
//  137 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  138 STATUS  SPI_GetITStatus(SPIn spin,SPI_IRQn irqn)
SPI_GetITStatus:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function SPI_GetITStatus
          CFI NoCalls
//  139 {
//  140   return ((USCIX[spin]->IFG & irqn) ? TRUE : FALSE);
        MOV.B   R12, R12
        RLAM.A  #0x2, R12
        MOVX.A  USCIX(R12), R15
        MOV.B   0x1d(R15), R14
        BIT.B   R13, R14
        JEQ     ??SPI_GetITStatus_0
        MOV.B   #0x1, R12
        RETA
??SPI_GetITStatus_0:
        MOV.B   #0x0, R12
        RETA
//  141 }
          CFI EndBlock cfiBlock5
//  142 /*******************************************************************************
//  143 *  函数名称：SPI_ClearITPendingBit(SPIn spin,SPI_IRQn irqn)
//  144 *  功能说明：SPIn清除中断标志位状态
//  145 *  参数说明：SPIn spin          :SPI模块号
//  146              SPI_IRQn irqn      :中断事件选择
//  147 *  函数返回：无
//  148 *  使用示例：SPI_ClearITPendingBit(SPI1,SPI_RX_IRQn);  //清除SPI1接收中断标志
//  149 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  150 void   SPI_ClearITPendingBit(SPIn spin,SPI_IRQn irqn)
SPI_ClearITPendingBit:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function SPI_ClearITPendingBit
          CFI NoCalls
//  151 {
//  152    USCIX[spin]->IFG &=~ irqn;
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIC.B   R13, 0x1d(R15)
//  153 }
        RETA
          CFI EndBlock cfiBlock6

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 732 bytes in segment CODE
//  48 bytes in segment DATA20_C
// 
// 732 bytes of CODE  memory
//  48 bytes of CONST memory
//
//Errors: none
//Warnings: none
