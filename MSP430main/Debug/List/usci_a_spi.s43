///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  15:34:13
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\usci_a_spi.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW3534.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\usci_a_spi.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\usci_a_spi.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME usci_a_spi

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?DivMod32u
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC USCI_A_SPI_changeClockPhasePolarity
        PUBLIC USCI_A_SPI_changeMasterClock
        PUBLIC USCI_A_SPI_clearInterrupt
        PUBLIC USCI_A_SPI_disable
        PUBLIC USCI_A_SPI_disableInterrupt
        PUBLIC USCI_A_SPI_enable
        PUBLIC USCI_A_SPI_enableInterrupt
        PUBLIC USCI_A_SPI_getInterruptStatus
        PUBLIC USCI_A_SPI_getReceiveBufferAddressForDMA
        PUBLIC USCI_A_SPI_getTransmitBufferAddressForDMA
        PUBLIC USCI_A_SPI_initMaster
        PUBLIC USCI_A_SPI_initSlave
        PUBLIC USCI_A_SPI_isBusy
        PUBLIC USCI_A_SPI_receiveData
        PUBLIC USCI_A_SPI_transmitData
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\usci_a_spi.c
//    1 /* --COPYRIGHT--,BSD
//    2  * Copyright (c) 2017, Texas Instruments Incorporated
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  *
//    9  * *  Redistributions of source code must retain the above copyright
//   10  *    notice, this list of conditions and the following disclaimer.
//   11  *
//   12  * *  Redistributions in binary form must reproduce the above copyright
//   13  *    notice, this list of conditions and the following disclaimer in the
//   14  *    documentation and/or other materials provided with the distribution.
//   15  *
//   16  * *  Neither the name of Texas Instruments Incorporated nor the names of
//   17  *    its contributors may be used to endorse or promote products derived
//   18  *    from this software without specific prior written permission.
//   19  *
//   20  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//   21  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//   22  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//   23  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//   24  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//   25  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//   26  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//   27  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//   28  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//   29  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//   30  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//   31  * --/COPYRIGHT--*/
//   32 //*****************************************************************************
//   33 //
//   34 // usci_a_spi.c - Driver for the usci_a_spi Module.
//   35 //
//   36 //*****************************************************************************
//   37 
//   38 //*****************************************************************************
//   39 //
//   40 //! \addtogroup usci_a_spi_api usci_a_spi
//   41 //! @{
//   42 //
//   43 //*****************************************************************************
//   44 
//   45 #include "inc/hw_memmap.h"
//   46 
//   47 #ifdef __MSP430_HAS_USCI_Ax__
//   48 #include "usci_a_spi.h"
//   49 
//   50 #include <assert.h>
//   51 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   52 bool USCI_A_SPI_initMaster(uint16_t baseAddress, USCI_A_SPI_initMasterParam *param)
USCI_A_SPI_initMaster:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function USCI_A_SPI_initMaster
//   53 {
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.W   R12, R11
        MOVA    R13, R10
//   54     //Disable the USCI Module
//   55     HWREG8(baseAddress + OFS_UCAxCTL1) |= UCSWRST;
        MOV.W   R11, R15
        BIS.B   #0x1, 0(R15)
//   56 
//   57     //Reset OFS_UCAxCTL0 values
//   58     HWREG8(baseAddress + OFS_UCAxCTL0) &= ~(UCCKPH + UCCKPL + UC7BIT + UCMSB +
//   59         UCMST + UCMODE_3 + UCSYNC);
        MOV.W   R11, R15
        ADD.W   #0x1, R15
        MOV.B   @R15, R8
        MOV.W   R11, R15
        ADD.W   #0x1, R15
        MOV.B   #0x0, 0(R15)
//   60 
//   61     //Reset OFS_UCAxCTL1 values
//   62     HWREG8(baseAddress + OFS_UCAxCTL1) &= ~(UCSSEL_3);
        AND.B   #0x3f, 0(R11)
//   63 
//   64     //Select Clock
//   65     HWREG8(baseAddress + OFS_UCAxCTL1) |= param->selectClockSource;
        BIS.B   @R10, 0(R11)
//   66 
//   67     HWREG16(baseAddress + OFS_UCAxBRW) =
//   68         (uint16_t)(param->clockSourceFrequency / param->desiredSpiClock);
        MOV.W   0x2(R10), R12
        MOV.W   0x4(R10), R13
        MOV.W   0x6(R10), R14
        MOV.W   0x8(R10), R15
          CFI FunCall ?DivMod32u
        CALLA   #?DivMod32u
        MOV.W   R11, R15
        ADD.W   #0x6, R15
        MOV.W   R12, 0(R15)
//   69 
//   70     /*
//   71      * Configure as SPI master mode.
//   72      * Clock phase select, polarity, msb
//   73      * UCMST = Master mode
//   74      * UCSYNC = Synchronous mode
//   75      * UCMODE_0 = 3-pin SPI
//   76      */
//   77     HWREG8(baseAddress + OFS_UCAxCTL0) |= (
//   78         param->msbFirst +
//   79         param->clockPhase +
//   80         param->clockPolarity +
//   81         UCMST +
//   82         UCSYNC +
//   83         UCMODE_0
//   84         );
        MOV.W   R11, R15
        ADD.W   #0x1, R15
        MOV.B   0xa(R10), R14
        ADD.B   0xb(R10), R14
        ADD.B   0xc(R10), R14
        ADD.B   #0x9, R14
        BIS.B   R14, 0(R15)
//   85     //No modulation
//   86     HWREG8(baseAddress + OFS_UCAxMCTL) = 0;
        MOV.W   R11, R15
        ADD.W   #0x8, R15
        MOV.B   #0x0, 0(R15)
//   87 
//   88     return ( STATUS_SUCCESS) ;
        MOV.B   #0x1, R12
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//   89 }
          CFI EndBlock cfiBlock0
//   90 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   91 void USCI_A_SPI_changeMasterClock(uint16_t baseAddress,
USCI_A_SPI_changeMasterClock:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function USCI_A_SPI_changeMasterClock
//   92     USCI_A_SPI_changeMasterClockParam *param)
//   93 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
        MOVA    R13, R11
//   94     //Disable the USCI Module
//   95     HWREG8(baseAddress + OFS_UCAxCTL1) |= UCSWRST;
        MOV.W   R10, R15
        BIS.B   #0x1, 0(R15)
//   96 
//   97     HWREG8(baseAddress + OFS_UCAxBRW) =
//   98         (uint16_t)(param->clockSourceFrequency / param->desiredSpiClock);
        MOV.W   @R11, R12
        MOV.W   0x2(R11), R13
        MOV.W   0x4(R11), R14
        MOV.W   0x6(R11), R15
          CFI FunCall ?DivMod32u
        CALLA   #?DivMod32u
        MOV.W   R10, R15
        ADD.W   #0x6, R15
        MOV.B   R12, 0(R15)
//   99 
//  100     //Reset the UCSWRST bit to enable the USCI Module
//  101     HWREG8(baseAddress + OFS_UCAxCTL1) &= ~(UCSWRST);
        MOV.W   R10, R15
        BIC.B   #0x1, 0(R15)
//  102 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  103 bool USCI_A_SPI_initSlave (uint16_t baseAddress,
USCI_A_SPI_initSlave:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function USCI_A_SPI_initSlave
          CFI NoCalls
//  104     uint8_t msbFirst,
//  105     uint8_t clockPhase,
//  106     uint8_t clockPolarity
//  107     )
//  108 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
//  109 
//  110     //Disable USCI Module
//  111     HWREG8(baseAddress + OFS_UCAxCTL1)  |= UCSWRST;
        MOV.W   R10, R12
        BIS.B   #0x1, 0(R12)
//  112 
//  113     //Reset OFS_UCAxCTL0 register
//  114     HWREG8(baseAddress + OFS_UCAxCTL0) &= ~(UCMSB +
//  115                                             UC7BIT +
//  116                                             UCMST +
//  117                                             UCCKPL +
//  118                                             UCCKPH +
//  119                                             UCMODE_3
//  120                                             );
        MOV.W   R10, R12
        ADD.W   #0x1, R12
        AND.B   #0x1, 0(R12)
//  121 
//  122     //Clock polarity, phase select, msbFirst, SYNC, Mode0
//  123     HWREG8(baseAddress + OFS_UCAxCTL0) |= (clockPhase +
//  124                                         clockPolarity +
//  125                                         msbFirst +
//  126                                         UCSYNC +
//  127                                         UCMODE_0
//  128                                         );
        MOV.W   R10, R12
        ADD.W   #0x1, R12
        MOV.B   R14, R11
        ADD.B   R15, R11
        ADD.B   R13, R11
        ADD.B   #0x1, R11
        BIS.B   R11, 0(R12)
//  129 
//  130     return ( STATUS_SUCCESS) ;
        MOV.B   #0x1, R12
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
//  131 }
          CFI EndBlock cfiBlock2
//  132 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  133 void USCI_A_SPI_changeClockPhasePolarity (uint16_t baseAddress,
USCI_A_SPI_changeClockPhasePolarity:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function USCI_A_SPI_changeClockPhasePolarity
          CFI NoCalls
//  134     uint8_t clockPhase,
//  135     uint8_t clockPolarity
//  136     )
//  137 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
//  138 
//  139   //Disable the USCI Module
//  140   HWREG8(baseAddress + OFS_UCAxCTL1) |= UCSWRST;
        MOV.W   R12, R15
        BIS.B   #0x1, 0(R15)
//  141 
//  142   HWREG8(baseAddress + OFS_UCAxCTL0) &= ~(UCCKPH + UCCKPL);
        MOV.W   R12, R15
        ADD.W   #0x1, R15
        AND.B   #0x3f, 0(R15)
//  143 
//  144   HWREG8(baseAddress + OFS_UCAxCTL0) |= (
//  145         clockPhase +
//  146         clockPolarity
//  147           );
        MOV.W   R12, R15
        ADD.W   #0x1, R15
        MOV.B   R13, R10
        ADD.B   R14, R10
        BIS.B   R10, 0(R15)
//  148 
//  149   //Reset the UCSWRST bit to enable the USCI Module
//  150   HWREG8(baseAddress + OFS_UCAxCTL1) &= ~(UCSWRST);
        MOV.W   R12, R15
        BIC.B   #0x1, 0(R15)
//  151 }
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//  152 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  153 void USCI_A_SPI_transmitData ( uint16_t baseAddress,
USCI_A_SPI_transmitData:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function USCI_A_SPI_transmitData
          CFI NoCalls
//  154     uint8_t transmitData
//  155     )
//  156 {
//  157     HWREG8(baseAddress + OFS_UCAxTXBUF) = transmitData;
        MOV.W   R12, R15
        ADD.W   #0xe, R15
        MOV.B   R13, 0(R15)
//  158 }
        RETA
          CFI EndBlock cfiBlock4
//  159 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  160 uint8_t USCI_A_SPI_receiveData (uint16_t baseAddress)
USCI_A_SPI_receiveData:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function USCI_A_SPI_receiveData
          CFI NoCalls
//  161 {
//  162     return ( HWREG8(baseAddress + OFS_UCAxRXBUF)) ;
        ADD.W   #0xc, R12
        MOV.B   @R12, R12
        RETA
//  163 }
          CFI EndBlock cfiBlock5
//  164 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  165 void USCI_A_SPI_enableInterrupt (uint16_t baseAddress,
USCI_A_SPI_enableInterrupt:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function USCI_A_SPI_enableInterrupt
          CFI NoCalls
//  166     uint8_t mask
//  167     )
//  168 {
//  169     HWREG8(baseAddress + OFS_UCAxIE) |= mask;
        MOV.W   R12, R15
        ADD.W   #0x1c, R15
        BIS.B   R13, 0(R15)
//  170 }
        RETA
          CFI EndBlock cfiBlock6
//  171 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  172 void USCI_A_SPI_disableInterrupt (uint16_t baseAddress,
USCI_A_SPI_disableInterrupt:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function USCI_A_SPI_disableInterrupt
          CFI NoCalls
//  173     uint8_t mask
//  174     )
//  175 {
//  176     HWREG8(baseAddress + OFS_UCAxIE) &= ~mask;
        MOV.W   R12, R15
        ADD.W   #0x1c, R15
        BIC.B   R13, 0(R15)
//  177 }
        RETA
          CFI EndBlock cfiBlock7
//  178 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  179 uint8_t USCI_A_SPI_getInterruptStatus (uint16_t baseAddress,
USCI_A_SPI_getInterruptStatus:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function USCI_A_SPI_getInterruptStatus
          CFI NoCalls
//  180     uint8_t mask
//  181     )
//  182 {
//  183     return ( HWREG8(baseAddress + OFS_UCAxIFG) & mask );
        ADD.W   #0x1d, R12
        AND.B   @R12, R13
        MOV.B   R13, R12
        RETA
//  184 }
          CFI EndBlock cfiBlock8
//  185 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  186 void USCI_A_SPI_clearInterrupt (uint16_t baseAddress,
USCI_A_SPI_clearInterrupt:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function USCI_A_SPI_clearInterrupt
          CFI NoCalls
//  187     uint8_t mask
//  188     )
//  189 {
//  190     HWREG8(baseAddress + OFS_UCAxIFG) &=  ~mask;
        MOV.W   R12, R15
        ADD.W   #0x1d, R15
        BIC.B   R13, 0(R15)
//  191 }
        RETA
          CFI EndBlock cfiBlock9
//  192 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  193 void USCI_A_SPI_enable (uint16_t baseAddress)
USCI_A_SPI_enable:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function USCI_A_SPI_enable
          CFI NoCalls
//  194 {
//  195     //Reset the UCSWRST bit to enable the USCI Module
//  196     HWREG8(baseAddress + OFS_UCAxCTL1) &= ~(UCSWRST);
        MOV.W   R12, R15
        BIC.B   #0x1, 0(R15)
//  197 }
        RETA
          CFI EndBlock cfiBlock10
//  198 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  199 void USCI_A_SPI_disable (uint16_t baseAddress)
USCI_A_SPI_disable:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function USCI_A_SPI_disable
          CFI NoCalls
//  200 {
//  201     //Set the UCSWRST bit to disable the USCI Module
//  202     HWREG8(baseAddress + OFS_UCAxCTL1) |= UCSWRST;
        MOV.W   R12, R15
        BIS.B   #0x1, 0(R15)
//  203 }
        RETA
          CFI EndBlock cfiBlock11
//  204 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  205 uint32_t USCI_A_SPI_getReceiveBufferAddressForDMA (uint16_t baseAddress)
USCI_A_SPI_getReceiveBufferAddressForDMA:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function USCI_A_SPI_getReceiveBufferAddressForDMA
          CFI NoCalls
//  206 {
//  207     return ( baseAddress + OFS_UCAxRXBUF );
        ADD.W   #0xc, R12
        MOV.W   #0x0, R13
        RETA
//  208 }
          CFI EndBlock cfiBlock12
//  209 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  210 uint32_t USCI_A_SPI_getTransmitBufferAddressForDMA (uint16_t baseAddress)
USCI_A_SPI_getTransmitBufferAddressForDMA:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function USCI_A_SPI_getTransmitBufferAddressForDMA
          CFI NoCalls
//  211 {
//  212     return ( baseAddress + OFS_UCAxTXBUF );
        ADD.W   #0xe, R12
        MOV.W   #0x0, R13
        RETA
//  213 }
          CFI EndBlock cfiBlock13
//  214 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  215 uint8_t USCI_A_SPI_isBusy (uint16_t baseAddress)
USCI_A_SPI_isBusy:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function USCI_A_SPI_isBusy
          CFI NoCalls
//  216 {
//  217     //Return the bus busy status.
//  218     return (HWREG8(baseAddress + OFS_UCAxSTAT) & UCBUSY);
        ADD.W   #0xa, R12
        MOV.B   @R12, R12
        AND.B   #0x1, R12
        RETA
//  219 }
          CFI EndBlock cfiBlock14

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  220 
//  221 
//  222 #endif
//  223 //*****************************************************************************
//  224 //
//  225 //! Close the doxygen group for usci_a_spi_api
//  226 //! @}
//  227 //
//  228 //*****************************************************************************
// 
// 342 bytes in segment CODE
// 
// 342 bytes of CODE memory
//
//Errors: none
//Warnings: none
