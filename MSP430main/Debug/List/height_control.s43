///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  15:34:08
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\height_control.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW1FCD.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\height_control.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\height_control.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME height_control

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN _Mul32f
        EXTERN _Add32f
        EXTERN _Cast32fto32s
        EXTERN ?FLT_LT
        EXTERN _Div32f
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC Acc_Enable_Flag
        PUBLIC ControlAlt
        PUBLIC HeightInfo
        PUBLIC HeightInit
        PUBLIC UpdateAlt
        PUBLIC UpdateAltInfo
        PUBLIC constrain_float
        PUBLIC ctrl_get_boosted_throttle
        PUBLIC dt2
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN UpdateSPL06Info
        EXTERN g_SPL06Manager
        EXTERN PIDGroup
        EXTERN ClacCascadePID
        EXTERN __iar_Dtest
        EXTERN g_Attitude
        EXTERN cosine
        EXTERN sine

// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\height_control.c
//    1 /**
//    2   ******************************************************************************
//    3   * Copyright (c) 2018,北京中科浩电科技有限公司
//    4   * All rights reserved.
//    5   * 文件名称：height_control.c
//    6   * 摘    要：
//    7   *
//    8   * 当前版本：V1.0
//    9   * 作    者：北京中科浩电科技有限公司研发部 
//   10   * 完成日期：    
//   11   * 修改说明：
//   12   * 
//   13   *
//   14   * 历史版本：
//   15   *
//   16   *
//   17   *******************************************************************************/
//   18 
//   19 /*==============================================================================
//   20                          ##### How to use this driver #####
//   21 ==============================================================================
//   22 高度控制驱动
//   23 
//   24 
//   25 */
//   26 //外部文件引用
//   27 #include "height_control.h"
//   28 #include "control.h"
//   29 #include "SPL06.h"
//   30 #include "imu.h"
//   31 #include "mpu6050.h"
//   32 #include "fmuConfig.h"
//   33 #include "myMath.h"
//   34 #include "math.h"
//   35 #include "Remote.h"
//   36 #include "pid.h"
//   37 
//   38 //宏定义区
//   39 #define IN_RANGE(value, min, max)        ( (value)>(min) && (value)<(max) )
//   40 #define THROTTLE_BASE 600
//   41 
//   42 //Extern引用
//   43 extern SPL06Manager_t g_SPL06Manager;
//   44 
//   45 
//   46 //私有函数区
//   47 float constrain_float(float amt, float low, float high);
//   48 float ctrl_get_boosted_throttle(float throttle_in);
//   49 void UpdateAlt(void);
//   50 
//   51 //私有变量区

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//   52 HeightInfo_t HeightInfo;
HeightInfo:
        DS8 18

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//   53 float dt2 = 0;
dt2:
        DS8 4

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//   54 bool Acc_Enable_Flag = false;
Acc_Enable_Flag:
        DS8 1
//   55 
//   56 /******************************************************************************
//   57   * 函数名称：HeightInit
//   58   * 函数描述：高度函数初始化
//   59   * 输    入：void
//   60   * 输    出：void
//   61   * 返    回：void 
//   62   * 备    注：null    
//   63   *    
//   64   *
//   65 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   66 void HeightInit()
HeightInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function HeightInit
          CFI NoCalls
//   67 {
//   68     HeightInfo.Alt = 0;
        MOVX.W  #0x0, &HeightInfo + 12
        MOVX.W  #0x0, &HeightInfo + 14
//   69     HeightInfo.Z_Speed = 0;
        MOVX.W  #0x0, &HeightInfo
        MOVX.W  #0x0, &HeightInfo + 2
//   70 }
        RETA
          CFI EndBlock cfiBlock0
//   71 
//   72 /******************************************************************************
//   73   * 函数名称：UpdateAltInfo
//   74   * 函数描述：更新高度信息
//   75   * 输    入：float dt:单位运行时间
//   76   * 输    出：void
//   77   * 返    回：void 
//   78   * 备    注：null    
//   79   *    
//   80   *
//   81 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   82 void UpdateAltInfo(float dt)
UpdateAltInfo:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function UpdateAltInfo
//   83 {  
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
        MOV.W   R13, R11
//   84     //更新高度值
//   85     UpdateAlt();
          CFI FunCall UpdateAlt
        CALLA   #UpdateAlt
//   86 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//   87 
//   88 /******************************************************************************
//   89   * 函数名称：UpdateAlt
//   90   * 函数描述：更新气压计检测的高度值
//   91   * 输    入：void
//   92   * 输    出：void
//   93   * 返    回：void
//   94   * 备    注：null    
//   95   *    
//   96   *
//   97 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   98 void UpdateAlt()
UpdateAlt:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function UpdateAlt
//   99 {
//  100     UpdateSPL06Info();
          CFI FunCall UpdateSPL06Info
        CALLA   #UpdateSPL06Info
//  101     HeightInfo.Alt = g_SPL06Manager.fRelative_Alt * 100;   //cm
        MOVX.W  &g_SPL06Manager + 48, R12
        MOVX.W  &g_SPL06Manager + 50, R13
        MOV.W   #0x0, R14
        MOV.W   #0x42c8, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOVX.W  R12, &HeightInfo + 12
        MOVX.W  R13, &HeightInfo + 14
//  102 }
        RETA
          CFI EndBlock cfiBlock2
//  103 
//  104 /******************************************************************************
//  105   * 函数名称：ControlAlt
//  106   * 函数描述：高度控制函数
//  107   * 输    入：
//  108   * float dt:单位运行时间
//  109   *
//  110   * 输    出：void
//  111   * 返    回：void
//  112   * 备    注：null
//  113   *    
//  114   *    
//  115 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  116 void ControlAlt(float dt)
ControlAlt:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ControlAlt
//  117 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
        MOV.W   R13, R11
//  118     /*更新测量值*/
//  119     PIDGroup[emPID_Height_Pos].measured = HeightInfo.Alt;
        MOVX.W  &HeightInfo + 12, &PIDGroup + 472
        MOVX.W  &HeightInfo + 14, &PIDGroup + 474
//  120     PIDGroup[emPID_Height_Spd].measured = HeightInfo.Z_Speed;
        MOVX.W  &HeightInfo, &PIDGroup + 408
        MOVX.W  &HeightInfo + 2, &PIDGroup + 410
//  121 
//  122     ClacCascadePID(&PIDGroup[emPID_Height_Spd],&PIDGroup[emPID_Height_Pos], dt);      //X轴
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    #PIDGroup + 448, R13
        MOVA    #PIDGroup + 384, R12
          CFI FunCall ClacCascadePID
        CALLA   #ClacCascadePID
//  123     
//  124     //输出要给一个基准油门
//  125     HeightInfo.Thr = (uint16_t)(PIDGroup[emPID_Height_Spd].out + THROTTLE_BASE);
        MOVX.W  &PIDGroup + 396, R12
        MOVX.W  &PIDGroup + 398, R13
        MOV.W   #0x0, R14
        MOV.W   #0x4416, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        MOVX.W  R12, &HeightInfo + 16
//  126 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//  127 
//  128 /******************************************************************************
//  129   * 函数名称：ctrl_get_boosted_throttle
//  130   * 函数描述：油门倾角补偿值
//  131   * 输    入：
//  132   * float throttle_in：油门输入值
//  133   * 
//  134   * 输    出：void
//  135   * 返    回：油门输出值
//  136   * 备    注：null
//  137   *    
//  138   *
//  139 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  140 float ctrl_get_boosted_throttle(float throttle_in)
ctrl_get_boosted_throttle:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ctrl_get_boosted_throttle
//  141 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOV.W   R12, R6
        MOV.W   R13, R7
//  142     float cos_tilt = cosine(g_Attitude.roll)*sine(g_Attitude.pitch);
        MOVX.W  &g_Attitude, R12
        MOVX.W  &g_Attitude + 2, R13
          CFI FunCall cosine
        CALLA   #cosine
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOVX.W  &g_Attitude + 4, R12
        MOVX.W  &g_Attitude + 6, R13
          CFI FunCall sine
        CALLA   #sine
        MOV.W   R10, R14
        MOV.W   R11, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//  143     float inverted_factor = constrain_float(2.0f * cos_tilt, 0.0f, 1.0f);
        PUSH.W  #0x3f80
          CFI CFA SP+38
        PUSH.W  #0x0
          CFI CFA SP+40
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R8
        MOV.W   R15, R9
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   #0x0, R14
        MOV.W   #0x4000, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall constrain_float
        CALLA   #constrain_float
        MOV.W   R12, R8
        MOV.W   R13, R9
//  144     float boost_factor = 1.0f / constrain_float(cos_tilt, 0.5f, 1.0f);
        MOV.W   #0x0, R12
        MOV.W   #0x3f80, R13
        MOV.W   R12, R4
        MOV.W   R13, R5
        PUSH.W  #0x3f80
          CFI CFA SP+42
        PUSH.W  #0x0
          CFI CFA SP+44
        MOV.W   #0x0, R14
        MOV.W   #0x3f00, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall constrain_float
        CALLA   #constrain_float
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R4, R12
        MOV.W   R5, R13
          CFI FunCall _Div32f
        CALLA   #_Div32f
        MOV.W   R12, R4
        MOV.W   R13, R5
//  145 
//  146     float throttle_out = throttle_in * inverted_factor * boost_factor;
        MOV.W   R6, R12
        MOV.W   R7, R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R4, R14
        MOV.W   R5, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
//  147     
//  148     return throttle_out;
        ADDA    #0x8, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//  149 }
          CFI EndBlock cfiBlock4
//  150 
//  151 /******************************************************************************
//  152   * 函数名称：constrain_float
//  153   * 函数描述：数据限幅函数
//  154   * 输    入：
//  155   * float amt：需要限幅的数据
//  156   * float low：限幅最小值
//  157   * float high：限幅最大值
//  158   * 输    出：void
//  159   * 返    回：限幅后的值
//  160   * 备    注：null
//  161   *    
//  162   *
//  163 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  164 float constrain_float(float amt, float low, float high)
constrain_float:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function constrain_float
//  165 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R14, R8
        MOV.W   R15, R9
        MOV.W   0x1c(SP), R6
        MOV.W   0x1e(SP), R7
//  166     if (isnan(amt)) 
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall __iar_Dtest
        CALLA   #__iar_Dtest
        CMP.W   #0x2, R12
        JNE     ??constrain_float_1
//  167    {
//  168         return (low + high) * 0.5f;
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   #0x0, R14
        MOV.W   #0x3f00, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        JMP     ??constrain_float_0
//  169     }
//  170     return ((amt) < (low) ? (low) : ((amt) > (high) ? (high) : (amt)));
??constrain_float_1:
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??constrain_float_2
        MOV.W   R8, R12
        MOV.W   R9, R13
        JMP     ??constrain_float_0
??constrain_float_2:
        MOV.W   R6, R12
        MOV.W   R7, R13
        MOV.W   R10, R14
        MOV.W   R11, R15
          CFI FunCall ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??constrain_float_3
        MOV.W   R6, R12
        MOV.W   R7, R13
        JMP     ??constrain_float_0
??constrain_float_3:
        MOV.W   R10, R12
        MOV.W   R11, R13
??constrain_float_0:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//  171 }
          CFI EndBlock cfiBlock5

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  172 
//  173 /******************* (C) 版权所有 2018 北京中科浩电科技有限公司 *******************/
// 
// 440 bytes in segment CODE
//  23 bytes in segment DATA20_Z
// 
// 440 bytes of CODE memory
//  23 bytes of DATA memory
//
//Errors: none
//Warnings: none
