///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  15:34:12
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\tec.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW323E.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\tec.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\tec.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME tec

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\tec.c
//    1 /* --COPYRIGHT--,BSD
//    2  * Copyright (c) 2017, Texas Instruments Incorporated
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  *
//    9  * *  Redistributions of source code must retain the above copyright
//   10  *    notice, this list of conditions and the following disclaimer.
//   11  *
//   12  * *  Redistributions in binary form must reproduce the above copyright
//   13  *    notice, this list of conditions and the following disclaimer in the
//   14  *    documentation and/or other materials provided with the distribution.
//   15  *
//   16  * *  Neither the name of Texas Instruments Incorporated nor the names of
//   17  *    its contributors may be used to endorse or promote products derived
//   18  *    from this software without specific prior written permission.
//   19  *
//   20  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//   21  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//   22  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//   23  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//   24  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//   25  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//   26  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//   27  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//   28  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//   29  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//   30  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//   31  * --/COPYRIGHT--*/
//   32 //*****************************************************************************
//   33 //
//   34 // tec.c - Driver for the tec Module.
//   35 //
//   36 //*****************************************************************************
//   37 
//   38 //*****************************************************************************
//   39 //
//   40 //! \addtogroup tec_api tec
//   41 //! @{
//   42 //
//   43 //*****************************************************************************
//   44 
//   45 #include "inc/hw_memmap.h"
//   46 
//   47 #ifdef __MSP430_HAS_TEV0__
//   48 #include "tec.h"
//   49 
//   50 #include <assert.h>
//   51 
//   52 void TEC_initExternalClearInput (uint16_t baseAddress,
//   53                                         uint8_t signalType,
//   54                                         uint8_t signalHold,
//   55                                         uint8_t polarityBit
//   56                                       )
//   57 {
//   58     HWREG8(baseAddress + OFS_TEC0XCTL2_L)  &= ~(TEC_EXTERNAL_CLEAR_SIGNALTYPE_LEVEL_SENSITIVE +
//   59                                                 TEC_EXTERNAL_CLEAR_SIGNAL_HELD +
//   60                                                 TEC_EXTERNAL_CLEAR_POLARITY_RISING_EDGE_OR_HIGH_LEVEL
//   61                                                 );
//   62 
//   63     HWREG8(baseAddress + OFS_TEC0XCTL2_L)  |= (signalType +
//   64                                                 signalHold +
//   65                                                 polarityBit
//   66                                                 );
//   67 }
//   68 
//   69 void TEC_initExternalFaultInput(uint16_t baseAddress,
//   70     TEC_initExternalFaultInputParam *param)
//   71 {
//   72     HWREG8(baseAddress + OFS_TEC0XCTL2_L)  &= ~((TEC_EXTERNAL_FAULT_SIGNALTYPE_LEVEL_SENSITIVE << param->selectedExternalFault)+
//   73                                                 (TEC_EXTERNAL_FAULT_POLARITY_RISING_EDGE_OR_HIGH_LEVEL << param->selectedExternalFault)+
//   74                                                 (TEC_EXTERNAL_FAULT_SIGNAL_HELD << param->selectedExternalFault )
//   75                                                 );
//   76 
//   77     HWREG8(baseAddress + OFS_TEC0XCTL2_L)  |= ((param->signalType << param->selectedExternalFault)+
//   78                                                (param->polarityBit << param->selectedExternalFault) +
//   79                                                (param->signalHold << param->selectedExternalFault )
//   80                                                );
//   81 }
//   82 
//   83 void TEC_enableExternalFaultInput (uint16_t baseAddress,
//   84                                         uint8_t channelEventBlock
//   85                                         )
//   86 {
//   87     HWREG8(baseAddress + OFS_TEC0XCTL0_H)  |= (1 << channelEventBlock );
//   88 }
//   89 
//   90 void TEC_disableExternalFaultInput (uint16_t baseAddress,
//   91                                         uint8_t channelEventBlock
//   92                                         )
//   93 {
//   94     HWREG8(baseAddress + OFS_TEC0XCTL0_H)  &= ~(1 << channelEventBlock );
//   95 }
//   96 
//   97 void TEC_enableExternalClearInput (uint16_t baseAddress )
//   98 {
//   99    HWREG8(baseAddress + OFS_TEC0XCTL2_L)  |= TECEXCLREN;
//  100 }
//  101 
//  102 void TEC_disableExternalClearInput (uint16_t baseAddress )
//  103 {
//  104    HWREG8(baseAddress + OFS_TEC0XCTL2_L)  &= ~TECEXCLREN;
//  105 }
//  106 
//  107 void TEC_enableAuxiliaryClearSignal (uint16_t baseAddress )
//  108 {
//  109    HWREG8(baseAddress + OFS_TEC0XCTL2_L)  |= TECAXCLREN;
//  110 }
//  111 
//  112 void TEC_disableAuxiliaryClearSignal (uint16_t baseAddress )
//  113 {
//  114    HWREG8(baseAddress + OFS_TEC0XCTL2_L)  &= ~TECAXCLREN;
//  115 }
//  116 
//  117 void TEC_clearInterrupt (uint16_t baseAddress,
//  118     uint8_t mask
//  119     )
//  120 {
//  121     HWREG8(baseAddress + OFS_TEC0XINT_L)  &= ~mask;
//  122 }
//  123 
//  124 uint8_t TEC_getInterruptStatus (uint16_t baseAddress,
//  125     uint8_t mask
//  126     )
//  127 {
//  128     //Return the interrupt status of the request masked bit.
//  129     return (HWREG8(baseAddress + OFS_TEC0XINT_L) & mask);
//  130 }
//  131 
//  132 void TEC_enableInterrupt (uint16_t baseAddress,
//  133     uint8_t mask
//  134     )
//  135 {
//  136     //Enable the interrupt masked bit
//  137     HWREG8(baseAddress + OFS_TEC0XINT_H) |= mask;
//  138 }
//  139 
//  140 void TEC_disableInterrupt (uint16_t baseAddress,
//  141     uint8_t mask
//  142     )
//  143 {
//  144     //Disable the interrupt masked bit
//  145     HWREG8(baseAddress + OFS_TEC0XINT_H) &= ~(mask);
//  146 }
//  147 
//  148 uint8_t TEC_getExternalFaultStatus (uint16_t baseAddress,
//  149     uint8_t mask
//  150     )
//  151 {
//  152     //Return the interrupt status of the request masked bit.
//  153     return (HWREG8(baseAddress + OFS_TEC0STA_L) & mask);
//  154 }
//  155 
//  156 void TEC_clearExternalFaultStatus (uint16_t baseAddress,
//  157     uint8_t mask
//  158     )
//  159 {
//  160     HWREG8(baseAddress + OFS_TEC0STA_L)  &= ~mask;
//  161 }
//  162 
//  163 uint8_t TEC_getExternalClearStatus (uint16_t baseAddress)
//  164 
//  165 {
//  166     //Return the interrupt status of the request masked bit.
//  167     return (HWREG8(baseAddress + OFS_TEC0STA_L) & TECXCLRSTA);
//  168 }
//  169 
//  170 void TEC_clearExternalClearStatus (uint16_t baseAddress)
//  171 {
//  172    HWREG8(baseAddress + OFS_TEC0STA_L)  &= ~TECXCLRSTA;
//  173 }
//  174 
//  175 
//  176 #endif
//  177 //*****************************************************************************
//  178 //
//  179 //! Close the doxygen group for tec_api
//  180 //! @}
//  181 //
//  182 //*****************************************************************************
// 
//
// 
//
//
//Errors: none
//Warnings: none
