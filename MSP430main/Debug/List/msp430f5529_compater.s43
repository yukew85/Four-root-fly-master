///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          17/Nov/2018  19:57:25
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_compater.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EWF01B.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_compater.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\msp430f5529_compater.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME msp430f5529_compater

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC CB
        PUBLIC CompaterB_ClearITPendingBit
        PUBLIC CompaterB_ExchangeChanel
        PUBLIC CompaterB_GetITStatus
        PUBLIC CompaterB_ITConfig
        PUBLIC CompaterB_Init
        PUBLIC CompatorB_GetValue
        PUBWEAK _A_CBCTL2_L
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN assert_failed
        EXTERN GPIO_MultiBits_Init

// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_compater.c
//    1 #include "msp430f5529_compater.h"

        ASEGN DATA16_AN:DATA:NOROOT,08c4H
// union <unnamed> __data16 _A_CBCTL2_L
_A_CBCTL2_L:
        DS8 2

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "D:\\\\F150-T401\\\\F150-T40...">`:
        DC8 44H, 3AH, 5CH, 46H, 31H, 35H, 30H, 2DH
        DC8 54H, 34H, 30H, 31H, 5CH, 46H, 31H, 35H
        DC8 30H, 2DH, 54H, 34H, 30H, 31H, 5FH, 45H
        DC8 78H, 70H, 65H, 72H, 69H, 6DH, 65H, 6EH
        DC8 74H, 5FH, 43H, 6FH, 64H, 65H, 5CH, 0D1H
        DC8 0D0H, 0B7H, 0A2H, 0D0H, 0DEH, 0B8H, 0C4H, 0C4H
        DC8 0BFH, 0C2H, 0BCH, 5CH, 0B8H, 0BDH, 0BCH, 0FEH
        DC8 0C4H, 0BFH, 0C2H, 0BCH, 5CH, 32H, 2EH, 0D4H
        DC8 0B4H, 0C2H, 0EBH, 5CH, 31H, 2EH, 0B7H, 0C9H
        DC8 0BFH, 0D8H, 0D4H, 0B4H, 0C2H, 0EBH, 5CH, 44H
        DC8 72H, 69H, 76H, 65H, 72H, 73H, 5CH, 73H
        DC8 72H, 63H, 5CH, 6DH, 73H, 70H, 34H, 33H
        DC8 30H, 66H, 35H, 35H, 32H, 39H, 5FH, 63H
        DC8 6FH, 6DH, 70H, 61H, 74H, 65H, 72H, 2EH
        DC8 63H, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "CompaterB_Init">`:
        DC8 "CompaterB_Init"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "CompaterB\\261\\310\\275\\317\\306\\367\\`:
        DC8 "CompaterB\261\310\275\317\306\367\326\273\304\334\323\320\322\273\270\366\315\250\265\300\312\271\323\303\262\316\277\274\265\347\321\271\243\241\012"
//    2 #include "msp430f5529_gpio.h"
//    3 

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//    4 const COMPB_MemMapPtr CB = COMPB_BASE_PTR;
CB:
        DATA32
        DC32 8C0H
//    5 /*******************************************************************************
//    6 *  函数名称：CompaterB_Init(CompaterB_CHn CB0,CompaterB_CHn CB1)
//    7 *  功能说明：初始化比较器输入源
//    8 *  参数说明：CompaterB_CHn CB0 :比较器输入通道+
//    9              CompaterB_CHn CB1 :比较器输入通道-
//   10 *  函数返回：无
//   11 *  参考资料：http://www.docin.com/p-676623167.html
//   12 *  使用示例： CompaterB_Init(CB_CH0,CB_VREF_2_0V);    //初始化比较器CB_CH0为正输入端，CB_VREF_2_0V为负输入端
//   13 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   14 void CompaterB_Init(CompaterB_CHn CB0,CompaterB_CHn CB1)
CompaterB_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function CompaterB_Init
//   15 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.B   R12, R11
        MOV.B   R13, R10
//   16   ASSERT((CB0<CB_CH11) || (CB1<CB_CH11),"CompaterB_Init","CompaterB比较器只能有一个通道使用参考电压！\n");//只能有一个通道使用参考电压
        CMP.B   #0xb, R11
        JNC     ??CompaterB_Init_9
        CMP.B   #0xb, R10
        JNC     ??CompaterB_Init_9
        MOVA    #`?<Constant "CompaterB\\261\\310\\275\\317\\306\\367\\`, R15
        MOVA    #`?<Constant "CompaterB_Init">`, R14
        MOV.W   #0x10, R13
        MOVA    #`?<Constant "D:\\\\F150-T401\\\\F150-T40...">`, R12
          CFI FunCall assert_failed
        CALLA   #assert_failed
//   17   //设置引脚  
//   18   if(CB0 <= CB_CH11)
??CompaterB_Init_9:
        CMP.B   #0xc, R11
        JC      ??CompaterB_Init_10
//   19   { //初始化引脚为第二功能
//   20     GPIO_Init((CB0 < CB_CH8) ? P6 : P7, (CB0 < CB_CH8) ? CB0 : (CB0-8),GPI|SEL );
        CMP.B   #0x8, R11
        JC      ??CompaterB_Init_11
        MOV.B   #0x1, R14
        JMP     ??CompaterB_Init_0
??CompaterB_Init_11:
        MOV.B   #0x0, R14
??CompaterB_Init_0:
        MOV.W   #0x1, R15
        SUB.B   #0x1, R14
        JN      ??CompaterB_Init_12
        RPT     R14
        RLAX.W  R15
??CompaterB_Init_12:
        ADD.B   #0x1, R14
        CMP.W   #0x0, R15
        JEQ     ??CompaterB_Init_13
        MOV.B   R11, R13
        JMP     ??CompaterB_Init_1
??CompaterB_Init_13:
        MOV.B   R11, R13
        ADD.W   #0xfff8, R13
??CompaterB_Init_1:
        CMP.B   #0x8, R11
        JC      ??CompaterB_Init_14
        MOV.B   #0x5, R12
        JMP     ??CompaterB_Init_2
??CompaterB_Init_14:
        MOV.B   #0x6, R12
??CompaterB_Init_2:
        MOV.W   #0x101, R14
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//   21     CB->IPEN = BIT_SET;                 //输入通道使能
        MOVA    &CB, R15
        BIS.W   #0x80, 0(R15)
//   22     CB->IPSEL = CB0;                //输入通道选择
        MOV.B   R11, R15
        AND.W   #0xf, R15
        MOVA    &CB, R14
        MOV.W   @R14, R14
        AND.W   #0xfff0, R14
        BIS.W   R15, R14
        MOVA    &CB, R15
        MOV.W   R14, 0(R15)
//   23     CB->CTL3 |= (1<<CB0);           //关闭输入缓存
        MOVA    &CB, R15
        MOV.W   #0x1, R14
        SUB.B   #0x1, R11
        JN      ??CompaterB_Init_15
        RPT     R11
        RLAX.W  R14
??CompaterB_Init_15:
        ADD.B   #0x1, R11
        BIS.W   R14, 0x6(R15)
        JMP     ??CompaterB_Init_3
//   24   }
//   25   else
//   26   {
//   27     CBCTL2 = 0u;
??CompaterB_Init_10:
        MOV.W   #0x0, &0x8c4
//   28     CB->RSEL = RESET;                   //参考电压应用到比较器+端        
        MOVA    &CB, R15
        BIC.W   #0x20, 0x4(R15)
//   29   }
//   30 
//   31   if(CB1 <= CB_CH11)
??CompaterB_Init_3:
        CMP.B   #0xc, R10
        JC      ??CompaterB_Init_16
//   32   { //初始化引脚为第二功能
//   33     GPIO_Init((CB1 < CB_CH8) ? P6 : P7, (CB1 < CB_CH8) ? CB1 : (CB1-8),GPI|SEL );
        CMP.B   #0x8, R10
        JC      ??CompaterB_Init_17
        MOV.B   #0x1, R14
        JMP     ??CompaterB_Init_4
??CompaterB_Init_17:
        MOV.B   #0x0, R14
??CompaterB_Init_4:
        MOV.W   #0x1, R15
        SUB.B   #0x1, R14
        JN      ??CompaterB_Init_18
        RPT     R14
        RLAX.W  R15
??CompaterB_Init_18:
        ADD.B   #0x1, R14
        CMP.W   #0x0, R15
        JEQ     ??CompaterB_Init_19
        MOV.B   R10, R13
        JMP     ??CompaterB_Init_5
??CompaterB_Init_19:
        MOV.B   R10, R13
        ADD.W   #0xfff8, R13
??CompaterB_Init_5:
        CMP.B   #0x8, R10
        JC      ??CompaterB_Init_20
        MOV.B   #0x5, R12
        JMP     ??CompaterB_Init_6
??CompaterB_Init_20:
        MOV.B   #0x6, R12
??CompaterB_Init_6:
        MOV.W   #0x101, R14
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//   34     CB->IMEN = BIT_SET;                 //输入通道使能
        MOVA    &CB, R15
        BIS.W   #0x8000, 0(R15)
//   35     CB->IMSEL = CB1;                //输入通道选择
        MOV.B   R10, R15
        AND.W   #0xff, R15
        SWPB    R15
        AND.W   #0xf00, R15
        MOVA    &CB, R14
        MOV.W   @R14, R14
        AND.W   #0xf0ff, R14
        BIS.W   R15, R14
        MOVA    &CB, R15
        MOV.W   R14, 0(R15)
//   36     CB->CTL3 |= (1<<CB1);           //关闭输入缓存
        MOVA    &CB, R15
        MOV.W   #0x1, R14
        SUB.B   #0x1, R10
        JN      ??CompaterB_Init_21
        RPT     R10
        RLAX.W  R14
??CompaterB_Init_21:
        ADD.B   #0x1, R10
        BIS.W   R14, 0x6(R15)
        JMP     ??CompaterB_Init_7
//   37   }
//   38   else
//   39   {
//   40     CB->RSEL = BIT_SET;                   //参考电压应用到比较器-端
??CompaterB_Init_16:
        MOVA    &CB, R15
        BIS.W   #0x20, 0x4(R15)
//   41   }
//   42 
//   43   if((CB0>=CB_VREF_1_5V) || (CB1>=CB_VREF_1_5V))  //如果有一端使用参考电压
??CompaterB_Init_7:
        CMP.B   #0xc, R11
        JC      ??CompaterB_Init_22
        CMP.B   #0xc, R10
        JNC     ??CompaterB_Init_23
//   44   {
//   45     CB->MRVS = 0;
??CompaterB_Init_22:
        MOVA    &CB, R15
        BIC.W   #0x1000, 0x2(R15)
//   46     if((CB0==CB_VREF_VCC) || (CB1==CB_VREF_VCC))
        CMP.B   #0xf, R11
        JEQ     ??CompaterB_Init_24
        CMP.B   #0xf, R10
        JNE     ??CompaterB_Init_25
//   47     {
//   48       CB->REFL = 0;
??CompaterB_Init_24:
        MOVA    &CB, R15
        AND.W   #0x9fff, 0x4(R15)
//   49       CB->RS = 1;                                                    //外部参考电压禁止,使用Vcc作为参考电压源
        MOVA    &CB, R15
        MOV.W   0x4(R15), R15
        AND.W   #0xff3f, R15
        BIS.W   #0x40, R15
        MOVA    &CB, R14
        MOV.W   R15, 0x4(R14)
        JMP     ??CompaterB_Init_8
//   50     }
//   51     else if((CB0==CB_VREF_1_5V) || (CB1==CB_VREF_1_5V)) //
??CompaterB_Init_25:
        CMP.B   #0xc, R11
        JEQ     ??CompaterB_Init_26
        CMP.B   #0xc, R10
        JNE     ??CompaterB_Init_27
//   52     {
//   53       CB->REFL = 1;
??CompaterB_Init_26:
        MOVA    &CB, R15
        MOV.W   0x4(R15), R15
        AND.W   #0x9fff, R15
        BIS.W   #0x2000, R15
        MOVA    &CB, R14
        MOV.W   R15, 0x4(R14)
//   54       CB->RS = 3;
        MOVA    &CB, R15
        BIS.W   #0xc0, 0x4(R15)
//   55       CB->REFACC = RESET;                                                //参考电压为1.5v,使用外部参考电压分压
        MOVA    &CB, R15
        BIC.W   #0x8000, 0x4(R15)
        JMP     ??CompaterB_Init_8
//   56     }
//   57     else if((CB0==CB_VREF_2_0V) || (CB1==CB_VREF_2_0V)) //
??CompaterB_Init_27:
        CMP.B   #0xd, R11
        JEQ     ??CompaterB_Init_28
        CMP.B   #0xd, R10
        JNE     ??CompaterB_Init_29
//   58     {
//   59       CB->REFL = 2;
??CompaterB_Init_28:
        MOVA    &CB, R15
        MOV.W   0x4(R15), R15
        AND.W   #0x9fff, R15
        BIS.W   #0x4000, R15
        MOVA    &CB, R14
        MOV.W   R15, 0x4(R14)
//   60       CB->RS = 3;
        MOVA    &CB, R15
        BIS.W   #0xc0, 0x4(R15)
//   61       CB->REFACC = RESET;                                                //参考电压为2.0v,使用外部参考电压分压
        MOVA    &CB, R15
        BIC.W   #0x8000, 0x4(R15)
        JMP     ??CompaterB_Init_8
//   62     }
//   63     else if((CB0==CB_VREF_2_5V) || (CB1==CB_VREF_2_5V)) //
??CompaterB_Init_29:
        CMP.B   #0xe, R11
        JEQ     ??CompaterB_Init_30
        CMP.B   #0xe, R10
        JNE     ??CompaterB_Init_8
//   64     {
//   65       CB->REFL = 3;
??CompaterB_Init_30:
        MOVA    &CB, R15
        BIS.W   #0x6000, 0x4(R15)
//   66       CB->RS = 3;
        MOVA    &CB, R15
        BIS.W   #0xc0, 0x4(R15)
//   67       CB->REFACC = RESET;                                               //参考电压为2.5v,使用外部参考电压分压
        MOVA    &CB, R15
        BIC.W   #0x8000, 0x4(R15)
//   68     }
//   69     CB->REF0 = 31;
??CompaterB_Init_8:
        MOVA    &CB, R15
        BIS.W   #0x1f, 0x4(R15)
//   70     CB->REF1 = 31;
        MOVA    &CB, R15
        BIS.W   #0x1f00, 0x4(R15)
//   71   }
//   72 
//   73   CB->PWRMD = 1;                             //正常电源模式 
??CompaterB_Init_23:
        MOVA    &CB, R15
        MOV.W   0x2(R15), R15
        AND.W   #0xfcff, R15
        BIS.W   #0x100, R15
        MOVA    &CB, R14
        MOV.W   R15, 0x2(R14)
//   74   CB->ON = BIT_SET;                              // 打开比较器B  
        MOVA    &CB, R15
        BIS.W   #0x400, 0x2(R15)
//   75 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
        REQUIRE _A_CBCTL2_L
//   76 /*******************************************************************************
//   77 *  函数名称: CompaterB_ExchangeChanel(STATUS status)  
//   78 *  功能说明：交换输入通道极性
//   79 *  参数说明：STATUS status：是否交换极性
//   80 *  函数返回：无
//   81 *  使用示例：CompaterB_ExchangeChanel(DISABLE);   //禁止交换比较器输入通道   
//   82 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   83 void  CompaterB_ExchangeChanel(STATUS status)                                      
CompaterB_ExchangeChanel:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function CompaterB_ExchangeChanel
          CFI NoCalls
//   84 {
//   85   CB->EX = status;
        MOVA    &CB, R15
        BIT.B   #0x1, R12
        JC      ??CompaterB_ExchangeChanel_0
        BIC.W   #0x20, 0x2(R15)
        RETA
??CompaterB_ExchangeChanel_0:
        BIS.W   #0x20, 0x2(R15)
//   86 }
        RETA
          CFI EndBlock cfiBlock1
//   87 /*******************************************************************************
//   88 *  函数名称：CompatorB_GetValue(void)
//   89 *  功能说明：读取比较的结果
//   90 *  参数说明：无
//   91 *  函数返回：STATUS :BIT_SET 正输入端电压大于负输入端电压，RESET 正输入端电压小于于负输入端电压
//   92 *  使用示例：
//   93 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   94 STATUS CompatorB_GetValue(void)
CompatorB_GetValue:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function CompatorB_GetValue
          CFI NoCalls
//   95 {
//   96   return ((CB->CB_OUT) ? BIT_SET : RESET);
        MOVA    &CB, R15
        MOV.W   0x2(R15), R12
        AND.B   #0x1, R12
        RETA
//   97 }
          CFI EndBlock cfiBlock2
//   98 /*******************************************************************************
//   99 *  函数名称: CompaterB_ITConfig (CompaterB_IRQn irqn, STATUS ITState)
//  100 *  功能说明：设置中断是否使能并配置中断触发沿
//  101 *  参数说明：CompaterB_IRQn irqn:选择为上升沿还是下降沿中断
//  102              BOOL ITState       :是否使能中断
//  103 *  函数返回：无
//  104 *  使用示例：CompaterB_ITConfig (CB_RaisingIRQn, ENABLE);  //比较器设置为上升沿中断，并使能中断
//  105 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  106 void CompaterB_ITConfig (CompaterB_IRQn irqn, STATUS ITState)
CompaterB_ITConfig:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function CompaterB_ITConfig
          CFI NoCalls
//  107 {
//  108   CB->IES = RESET;                 //上升沿CBIFG，下降沿CBIIFG
        MOVA    &CB, R15
        BIC.W   #0x8, 0x2(R15)
//  109   if(ITState != DISABLE)//设置是否允许中断
        CMP.B   #0x0, R13
        JEQ     ??CompaterB_ITConfig_0
//  110   {
//  111     CB->CB_IFG &=~irqn;              //清中断标志位
        MOVA    &CB, R15
        BIC.B   R12, 0xc(R15)
//  112     CB->CB_IE  |= irqn;
        MOVA    &CB, R15
        BIS.B   R12, 0xd(R15)
        RETA
//  113   }
//  114   else
//  115   {
//  116     CB->CB_IE  &=~irqn;
??CompaterB_ITConfig_0:
        MOVA    &CB, R15
        BIC.B   R12, 0xd(R15)
//  117   }                      
//  118 }
        RETA
          CFI EndBlock cfiBlock3
//  119 /*******************************************************************************
//  120 *  函数名称：CompaterB_GetITStatus(CompaterB_IRQn irqn)
//  121 *  功能说明：读取比较中断标志状态
//  122 *  参数说明：CompaterB_IRQn irqn:选择为上升沿还是下降沿中断标志
//  123 *  函数返回：STATUS ：中断标志是否置位
//  124 *  使用示例：if(TRUE == CompaterB_GetITStatus(CB_RaisingIRQn)){...} //判断中断标志是否置位
//  125 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  126 STATUS  CompaterB_GetITStatus(CompaterB_IRQn irqn)
CompaterB_GetITStatus:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function CompaterB_GetITStatus
          CFI NoCalls
//  127 {
//  128   return ((CB->CB_IFG & irqn) ? TRUE : FALSE);
        MOVA    &CB, R15
        MOV.B   0xc(R15), R14
        BIT.B   R12, R14
        JEQ     ??CompaterB_GetITStatus_0
        MOV.B   #0x1, R12
        RETA
??CompaterB_GetITStatus_0:
        MOV.B   #0x0, R12
        RETA
//  129 }
          CFI EndBlock cfiBlock4
//  130 /*******************************************************************************
//  131 *  函数名称：CompaterB_ClearITPendingBit(CompaterB_IRQn irqn)
//  132 *  功能说明：清除比较中断标志位
//  133 *  参数说明：CompaterB_IRQn irqn:选择为上升沿还是下降沿中断标志
//  134 *  函数返回：无
//  135 *  使用示例：CompaterB_ClearITPendingBit(CB_RaisingIRQn);   //清除上升沿中断标志
//  136 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  137 void  CompaterB_ClearITPendingBit(CompaterB_IRQn irqn)
CompaterB_ClearITPendingBit:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function CompaterB_ClearITPendingBit
          CFI NoCalls
//  138 {
//  139   CB->CB_IFG &=~ irqn;
        MOVA    &CB, R15
        BIC.B   R12, 0xc(R15)
//  140 }
        RETA
          CFI EndBlock cfiBlock5

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 704 bytes in segment CODE
//   2 bytes in segment DATA16_AN
// 178 bytes in segment DATA20_C
// 
// 704 bytes of CODE  memory
// 178 bytes of CONST memory
//   0 bytes of DATA  memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none
