///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  15:34:07
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\eusci_b_spi.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW1CBA.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\eusci_b_spi.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\eusci_b_spi.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME eusci_b_spi

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\eusci_b_spi.c
//    1 /* --COPYRIGHT--,BSD
//    2  * Copyright (c) 2017, Texas Instruments Incorporated
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  *
//    9  * *  Redistributions of source code must retain the above copyright
//   10  *    notice, this list of conditions and the following disclaimer.
//   11  *
//   12  * *  Redistributions in binary form must reproduce the above copyright
//   13  *    notice, this list of conditions and the following disclaimer in the
//   14  *    documentation and/or other materials provided with the distribution.
//   15  *
//   16  * *  Neither the name of Texas Instruments Incorporated nor the names of
//   17  *    its contributors may be used to endorse or promote products derived
//   18  *    from this software without specific prior written permission.
//   19  *
//   20  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//   21  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//   22  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//   23  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//   24  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//   25  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//   26  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//   27  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//   28  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//   29  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//   30  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//   31  * --/COPYRIGHT--*/
//   32 //*****************************************************************************
//   33 //
//   34 // eusci_b_spi.c - Driver for the eusci_b_spi Module.
//   35 //
//   36 //*****************************************************************************
//   37 
//   38 //*****************************************************************************
//   39 //
//   40 //! \addtogroup eusci_b_spi_api eusci_b_spi
//   41 //! @{
//   42 //
//   43 //*****************************************************************************
//   44 
//   45 #include "inc/hw_memmap.h"
//   46 
//   47 #ifdef __MSP430_HAS_EUSCI_Bx__
//   48 #include "eusci_b_spi.h"
//   49 
//   50 #include <assert.h>
//   51 
//   52 void EUSCI_B_SPI_initMaster (uint16_t baseAddress,
//   53     EUSCI_B_SPI_initMasterParam *param)
//   54 {
//   55     //Disable the USCI Module
//   56     HWREG16(baseAddress + OFS_UCBxCTLW0) |= UCSWRST;
//   57 
//   58     //Reset OFS_UCBxCTLW0 values
//   59     HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCCKPH + UCCKPL + UC7BIT + UCMSB +
//   60         UCMST + UCMODE_3 + UCSYNC);
//   61 
//   62     //Reset OFS_UCBxCTLW0 values
//   63     HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCSSEL_3);
//   64 
//   65     //Select Clock
//   66     HWREG16(baseAddress + OFS_UCBxCTLW0) |= param->selectClockSource;
//   67 
//   68     HWREG16(baseAddress + OFS_UCBxBRW) =
//   69         (uint16_t)(param->clockSourceFrequency / param->desiredSpiClock);
//   70 
//   71     /*
//   72      * Configure as SPI master mode.
//   73      * Clock phase select, polarity, msb
//   74      * UCMST = Master mode
//   75      * UCSYNC = Synchronous mode
//   76      * UCMODE_0 = 3-pin SPI
//   77      */
//   78     HWREG16(baseAddress + OFS_UCBxCTLW0) |= (
//   79         param->msbFirst +
//   80         param->clockPhase +
//   81         param->clockPolarity +
//   82         UCMST +
//   83         UCSYNC +
//   84         param->spiMode
//   85         );
//   86 }
//   87 
//   88 void EUSCI_B_SPI_select4PinFunctionality (uint16_t baseAddress,
//   89     uint8_t select4PinFunctionality
//   90     )
//   91 {
//   92   HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~UCSTEM;
//   93   HWREG16(baseAddress + OFS_UCBxCTLW0) |= select4PinFunctionality;
//   94 }
//   95 
//   96 void EUSCI_B_SPI_changeMasterClock (uint16_t baseAddress,
//   97     EUSCI_B_SPI_changeMasterClockParam *param)
//   98 {
//   99     //Disable the USCI Module
//  100     HWREG16(baseAddress + OFS_UCBxCTLW0) |= UCSWRST;
//  101 
//  102     HWREG16(baseAddress + OFS_UCBxBRW) =
//  103         (uint16_t)(param->clockSourceFrequency / param->desiredSpiClock);
//  104 
//  105     //Reset the UCSWRST bit to enable the USCI Module
//  106     HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCSWRST);
//  107 }
//  108 
//  109 void EUSCI_B_SPI_initSlave (uint16_t baseAddress, EUSCI_B_SPI_initSlaveParam *param)
//  110 {
//  111     //Disable USCI Module
//  112     HWREG16(baseAddress + OFS_UCBxCTLW0)  |= UCSWRST;
//  113 
//  114     //Reset OFS_UCBxCTLW0 register
//  115     HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCMSB +
//  116                                             UC7BIT +
//  117                                             UCMST +
//  118                                             UCCKPL +
//  119                                             UCCKPH +
//  120                                             UCMODE_3
//  121                                             );
//  122 
//  123     //Clock polarity, phase select, msbFirst, SYNC, Mode0
//  124     HWREG16(baseAddress + OFS_UCBxCTLW0) |= (param->clockPhase +
//  125                                             param->clockPolarity +
//  126                                             param->msbFirst +
//  127                                             UCSYNC +
//  128                                             param->spiMode
//  129                                             );
//  130 }
//  131 
//  132 void EUSCI_B_SPI_changeClockPhasePolarity (uint16_t baseAddress,
//  133     uint16_t clockPhase,
//  134     uint16_t clockPolarity
//  135     )
//  136 {
//  137   //Disable the USCI Module
//  138   HWREG16(baseAddress + OFS_UCBxCTLW0) |= UCSWRST;
//  139 
//  140   HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCCKPH + UCCKPL);
//  141 
//  142   HWREG16(baseAddress + OFS_UCBxCTLW0) |= (
//  143         clockPhase +
//  144         clockPolarity
//  145           );
//  146 
//  147   //Reset the UCSWRST bit to enable the USCI Module
//  148   HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCSWRST);
//  149 }
//  150 
//  151 void EUSCI_B_SPI_transmitData ( uint16_t baseAddress,
//  152     uint8_t transmitData
//  153     )
//  154 {
//  155     HWREG16(baseAddress + OFS_UCBxTXBUF) = transmitData;
//  156 }
//  157 
//  158 uint8_t EUSCI_B_SPI_receiveData (uint16_t baseAddress)
//  159 {
//  160     return ( HWREG16(baseAddress + OFS_UCBxRXBUF)) ;
//  161 }
//  162 
//  163 void EUSCI_B_SPI_enableInterrupt (uint16_t baseAddress,
//  164     uint8_t mask
//  165     )
//  166 {
//  167     HWREG16(baseAddress + OFS_UCBxIE) |= mask;
//  168 }
//  169 
//  170 void EUSCI_B_SPI_disableInterrupt (uint16_t baseAddress,
//  171     uint8_t mask
//  172     )
//  173 {
//  174     HWREG16(baseAddress + OFS_UCBxIE) &= ~mask;
//  175 }
//  176 
//  177 uint8_t EUSCI_B_SPI_getInterruptStatus (uint16_t baseAddress,
//  178     uint8_t mask
//  179     )
//  180 {
//  181     return ( HWREG16(baseAddress + OFS_UCBxIFG) & mask );
//  182 }
//  183 
//  184 void EUSCI_B_SPI_clearInterrupt (uint16_t baseAddress,
//  185     uint8_t mask
//  186     )
//  187 {
//  188     HWREG16(baseAddress + OFS_UCBxIFG) &=  ~mask;
//  189 }
//  190 
//  191 void EUSCI_B_SPI_enable (uint16_t baseAddress)
//  192 {
//  193     //Reset the UCSWRST bit to enable the USCI Module
//  194     HWREG16(baseAddress + OFS_UCBxCTLW0) &= ~(UCSWRST);
//  195 }
//  196 
//  197 void EUSCI_B_SPI_disable (uint16_t baseAddress)
//  198 {
//  199     //Set the UCSWRST bit to disable the USCI Module
//  200     HWREG16(baseAddress + OFS_UCBxCTLW0) |= UCSWRST;
//  201 }
//  202 
//  203 uint32_t EUSCI_B_SPI_getReceiveBufferAddress (uint16_t baseAddress)
//  204 {
//  205     return ( baseAddress + OFS_UCBxRXBUF );
//  206 }
//  207 
//  208 uint32_t EUSCI_B_SPI_getTransmitBufferAddress (uint16_t baseAddress)
//  209 {
//  210     return ( baseAddress + OFS_UCBxTXBUF );
//  211 }
//  212 
//  213 uint16_t EUSCI_B_SPI_isBusy (uint16_t baseAddress)
//  214 {
//  215     //Return the bus busy status.
//  216     return (HWREG16(baseAddress + OFS_UCBxSTATW) & UCBUSY);
//  217 }
//  218 
//  219 
//  220 #endif
//  221 //*****************************************************************************
//  222 //
//  223 //! Close the doxygen group for eusci_b_spi_api
//  224 //! @}
//  225 //
//  226 //*****************************************************************************
// 
//
// 
//
//
//Errors: none
//Warnings: none
