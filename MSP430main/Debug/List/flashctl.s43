///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  15:34:07
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\flashctl.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW1DB7.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\flashctl.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\flashctl.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME flashctl

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC FlashCtl_eraseBank
        PUBLIC FlashCtl_eraseSegment
        PUBLIC FlashCtl_fillMemory32
        PUBLIC FlashCtl_getStatus
        PUBLIC FlashCtl_lockInfoA
        PUBLIC FlashCtl_performEraseCheck
        PUBLIC FlashCtl_performMassErase
        PUBLIC FlashCtl_unlockInfoA
        PUBLIC FlashCtl_write16
        PUBLIC FlashCtl_write32
        PUBLIC FlashCtl_write8
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\flashctl.c
//    1 /* --COPYRIGHT--,BSD
//    2  * Copyright (c) 2017, Texas Instruments Incorporated
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  *
//    9  * *  Redistributions of source code must retain the above copyright
//   10  *    notice, this list of conditions and the following disclaimer.
//   11  *
//   12  * *  Redistributions in binary form must reproduce the above copyright
//   13  *    notice, this list of conditions and the following disclaimer in the
//   14  *    documentation and/or other materials provided with the distribution.
//   15  *
//   16  * *  Neither the name of Texas Instruments Incorporated nor the names of
//   17  *    its contributors may be used to endorse or promote products derived
//   18  *    from this software without specific prior written permission.
//   19  *
//   20  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//   21  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//   22  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//   23  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//   24  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//   25  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//   26  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//   27  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//   28  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//   29  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//   30  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//   31  * --/COPYRIGHT--*/
//   32 //*****************************************************************************
//   33 //
//   34 // flashctl.c - Driver for the flashctl Module.
//   35 //
//   36 //*****************************************************************************
//   37 
//   38 //*****************************************************************************
//   39 //
//   40 //! \addtogroup flashctl_api flashctl
//   41 //! @{
//   42 //
//   43 //*****************************************************************************
//   44 
//   45 #include "inc/hw_memmap.h"
//   46 
//   47 #ifdef __MSP430_HAS_FLASH__
//   48 #include "flashctl.h"
//   49 
//   50 #include <assert.h>
//   51 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   52 void FlashCtl_eraseSegment ( uint8_t *flash_ptr){
FlashCtl_eraseSegment:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function FlashCtl_eraseSegment
          CFI NoCalls
//   53     //Clear Lock bit
//   54     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY;
        MOV.W   #0xa500, &0x144
//   55 
//   56     //Set Erase bit
//   57     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY + ERASE;
        MOV.W   #0xa502, &0x140
//   58 
//   59     //Dummy write to erase Flash seg
//   60     *flash_ptr = 0;
        MOV.B   #0x0, 0(R12)
//   61 
//   62     //test busy
//   63     while (HWREG8(FLASH_BASE + OFS_FCTL3) & BUSY) ;
??FlashCtl_eraseSegment_0:
        BIT.B   #0x1, &0x144
        JC      ??FlashCtl_eraseSegment_0
//   64 
//   65     //Clear ERASE bit
//   66     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY;
        MOV.W   #0xa500, &0x140
//   67 
//   68     //Set LOCK bit
//   69     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY + LOCK;
        MOV.W   #0xa510, &0x144
//   70 }
        RETA
          CFI EndBlock cfiBlock0
//   71 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   72 void FlashCtl_eraseBank ( uint8_t *flash_ptr){
FlashCtl_eraseBank:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function FlashCtl_eraseBank
          CFI NoCalls
//   73     //Clear Lock bit
//   74     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY;
        MOV.W   #0xa500, &0x144
//   75     
//   76     while (HWREG8(FLASH_BASE + OFS_FCTL3) & BUSY) ;
??FlashCtl_eraseBank_0:
        BIT.B   #0x1, &0x144
        JC      ??FlashCtl_eraseBank_0
//   77 
//   78     //Set MERAS bit
//   79     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY + MERAS;
        MOV.W   #0xa504, &0x140
//   80 
//   81     //Dummy write to erase Flash seg
//   82     *flash_ptr = 0;
        MOV.B   #0x0, 0(R12)
//   83 
//   84     //test busy
//   85     while (HWREG8(FLASH_BASE + OFS_FCTL3) & BUSY) ;
??FlashCtl_eraseBank_1:
        BIT.B   #0x1, &0x144
        JC      ??FlashCtl_eraseBank_1
//   86 
//   87     //Clear MERAS bit
//   88     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY;
        MOV.W   #0xa500, &0x140
//   89 
//   90     //Set LOCK bit
//   91     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY + LOCK;
        MOV.W   #0xa510, &0x144
//   92 }
        RETA
          CFI EndBlock cfiBlock1
//   93 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   94 void FlashCtl_performMassErase ( uint8_t *flash_ptr){
FlashCtl_performMassErase:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function FlashCtl_performMassErase
          CFI NoCalls
//   95     //Clear Lock bit
//   96     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY;
        MOV.W   #0xa500, &0x144
//   97     
//   98     while (HWREG8(FLASH_BASE + OFS_FCTL3) & BUSY) ;
??FlashCtl_performMassErase_0:
        BIT.B   #0x1, &0x144
        JC      ??FlashCtl_performMassErase_0
//   99 
//  100     //Set MERAS bit
//  101     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY + MERAS + ERASE;
        MOV.W   #0xa506, &0x140
//  102 
//  103     //Dummy write to erase Flash seg
//  104     *flash_ptr = 0;
        MOV.B   #0x0, 0(R12)
//  105 
//  106     //test busy
//  107     while (HWREG8(FLASH_BASE + OFS_FCTL3) & BUSY) ;
??FlashCtl_performMassErase_1:
        BIT.B   #0x1, &0x144
        JC      ??FlashCtl_performMassErase_1
//  108 
//  109     //Clear MERAS bit
//  110     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY;
        MOV.W   #0xa500, &0x140
//  111 
//  112     //Set LOCK bit
//  113     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY + LOCK;
        MOV.W   #0xa510, &0x144
//  114 }
        RETA
          CFI EndBlock cfiBlock2
//  115 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  116 bool FlashCtl_performEraseCheck (uint8_t *flash_ptr,
FlashCtl_performEraseCheck:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function FlashCtl_performEraseCheck
          CFI NoCalls
//  117     uint16_t numberOfBytes
//  118     )
//  119 {
        MOVA    R12, R14
//  120     uint16_t i;
//  121 
//  122     for (i = 0; i < numberOfBytes; i++)
        MOV.W   #0x0, R15
??FlashCtl_performEraseCheck_0:
        CMP.W   R13, R15
        JC      ??FlashCtl_performEraseCheck_1
//  123     {
//  124         //was erasing successfull?
//  125         if ((*(flash_ptr + i)) != 0xFF){
        MOVA    R14, R12
        ADDA    R15, R12
        CMP.B   #0xff, 0(R12)
        JEQ     ??FlashCtl_performEraseCheck_2
//  126             return ( STATUS_FAIL) ;
        MOV.B   #0x0, R12
        RETA
//  127         }
//  128     }
??FlashCtl_performEraseCheck_2:
        ADD.W   #0x1, R15
        JMP     ??FlashCtl_performEraseCheck_0
//  129     return ( STATUS_SUCCESS) ;
??FlashCtl_performEraseCheck_1:
        MOV.B   #0x1, R12
        RETA
//  130 }
          CFI EndBlock cfiBlock3
//  131 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  132 void FlashCtl_write8 (uint8_t *data_ptr,
FlashCtl_write8:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function FlashCtl_write8
          CFI NoCalls
//  133     uint8_t *flash_ptr,
//  134     uint16_t count
//  135     )
//  136 {
//  137     //Clear Lock bit
//  138     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY;
        MOV.W   #0xa500, &0x144
//  139 
//  140     //Enable byte/word write mode
//  141     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY + WRT;
        MOV.W   #0xa540, &0x140
//  142 
//  143     while (count > 0)
??FlashCtl_write8_1:
        CMP.W   #0x0, R14
        JEQ     ??FlashCtl_write8_2
//  144     {
//  145         //test busy
//  146         while (HWREG8(FLASH_BASE + OFS_FCTL3) & BUSY) ;
??FlashCtl_write8_0:
        BIT.B   #0x1, &0x144
        JC      ??FlashCtl_write8_0
//  147 
//  148         //Write to Flash
//  149         *flash_ptr++ = *data_ptr++;
        MOV.B   @R12, 0(R13)
        ADDA    #0x1, R12
        ADDA    #0x1, R13
//  150         count--;
        ADD.W   #0xffff, R14
        JMP     ??FlashCtl_write8_1
//  151     }
//  152 
//  153     //Clear WRT bit
//  154     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY;
??FlashCtl_write8_2:
        MOV.W   #0xa500, &0x140
//  155 
//  156     //Set LOCK bit
//  157     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY + LOCK;
        MOV.W   #0xa510, &0x144
//  158 }
        RETA
          CFI EndBlock cfiBlock4
//  159 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  160 void FlashCtl_write16 (uint16_t *data_ptr,
FlashCtl_write16:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function FlashCtl_write16
          CFI NoCalls
//  161     uint16_t *flash_ptr,
//  162     uint16_t count
//  163     )
//  164 {
//  165     //Clear Lock bit
//  166     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY;
        MOV.W   #0xa500, &0x144
//  167 
//  168     //Enable byte/word write mode
//  169     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY + WRT;
        MOV.W   #0xa540, &0x140
//  170 
//  171     while (count > 0)
??FlashCtl_write16_1:
        CMP.W   #0x0, R14
        JEQ     ??FlashCtl_write16_2
//  172     {
//  173         //test busy
//  174         while (HWREG8(FLASH_BASE + OFS_FCTL3) & BUSY) ;
??FlashCtl_write16_0:
        BIT.B   #0x1, &0x144
        JC      ??FlashCtl_write16_0
//  175 
//  176         //Write to Flash
//  177         *flash_ptr++ = *data_ptr++;
        MOV.W   @R12, 0(R13)
        ADDA    #0x2, R12
        ADDA    #0x2, R13
//  178         count--;
        ADD.W   #0xffff, R14
        JMP     ??FlashCtl_write16_1
//  179     }
//  180 
//  181     //Clear WRT bit
//  182     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY;
??FlashCtl_write16_2:
        MOV.W   #0xa500, &0x140
//  183 
//  184     //Set LOCK bit
//  185     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY + LOCK;
        MOV.W   #0xa510, &0x144
//  186 }
        RETA
          CFI EndBlock cfiBlock5
//  187 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  188 void FlashCtl_write32 (uint32_t *data_ptr,
FlashCtl_write32:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function FlashCtl_write32
          CFI NoCalls
//  189     uint32_t *flash_ptr,
//  190     uint16_t count
//  191     )
//  192 {
//  193     //Clear Lock bit
//  194     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY;
        MOV.W   #0xa500, &0x144
//  195 
//  196     //Enable long-word write
//  197     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY + BLKWRT;
        MOV.W   #0xa580, &0x140
//  198 
//  199     while (count > 0)
??FlashCtl_write32_1:
        CMP.W   #0x0, R14
        JEQ     ??FlashCtl_write32_2
//  200     {
//  201         //test busy
//  202         while (HWREG8(FLASH_BASE + OFS_FCTL3) & BUSY) ;
??FlashCtl_write32_0:
        BIT.B   #0x1, &0x144
        JC      ??FlashCtl_write32_0
//  203 
//  204         //Write to Flash
//  205         *flash_ptr++ = *data_ptr++;
        MOV.W   @R12, 0(R13)
        MOV.W   0x2(R12), 0x2(R13)
        ADDA    #0x4, R12
        ADDA    #0x4, R13
//  206 
//  207         count--;
        ADD.W   #0xffff, R14
        JMP     ??FlashCtl_write32_1
//  208     }
//  209 
//  210     //Clear BLKWRT bit
//  211     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY;
??FlashCtl_write32_2:
        MOV.W   #0xa500, &0x140
//  212 
//  213     //Set LOCK bit
//  214     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY + LOCK;
        MOV.W   #0xa510, &0x144
//  215 }
        RETA
          CFI EndBlock cfiBlock6
//  216 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  217 void FlashCtl_fillMemory32 (uint32_t value,
FlashCtl_fillMemory32:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function FlashCtl_fillMemory32
          CFI NoCalls
//  218     uint32_t *flash_ptr,
//  219     uint16_t count
//  220     )
//  221 {
//  222     //Clear Lock bit
//  223     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY;
        MOV.W   #0xa500, &0x144
//  224 
//  225     //Enable long-word write
//  226     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY + BLKWRT;
        MOV.W   #0xa580, &0x140
//  227 
//  228     //test busy
//  229     while (count > 0)
??FlashCtl_fillMemory32_1:
        CMP.W   #0x0, R15
        JEQ     ??FlashCtl_fillMemory32_2
//  230     {
//  231         while ((HWREG8(FLASH_BASE + OFS_FCTL3)) & BUSY) ;
??FlashCtl_fillMemory32_0:
        BIT.B   #0x1, &0x144
        JC      ??FlashCtl_fillMemory32_0
//  232 
//  233         //Write to Flash
//  234         *flash_ptr++ = value;
        MOV.W   R12, 0(R14)
        MOV.W   R13, 0x2(R14)
        ADDA    #0x4, R14
//  235 
//  236         count--;
        ADD.W   #0xffff, R15
        JMP     ??FlashCtl_fillMemory32_1
//  237     }
//  238 
//  239     //Clear BLKWRT bit
//  240     HWREG16(FLASH_BASE + OFS_FCTL1) = FWKEY;
??FlashCtl_fillMemory32_2:
        MOV.W   #0xa500, &0x140
//  241 
//  242     //Set LOCK bit
//  243     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY + LOCK;
        MOV.W   #0xa510, &0x144
//  244 }
        RETA
          CFI EndBlock cfiBlock7
//  245 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  246 uint8_t FlashCtl_getStatus (uint8_t mask
FlashCtl_getStatus:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function FlashCtl_getStatus
          CFI NoCalls
//  247     )
//  248 {
//  249     return ((HWREG8(FLASH_BASE + OFS_FCTL3) & mask ));
        AND.B   &0x144, R12
        RETA
//  250 }
          CFI EndBlock cfiBlock8
//  251 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  252 void FlashCtl_lockInfoA (void)
FlashCtl_lockInfoA:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function FlashCtl_lockInfoA
          CFI NoCalls
//  253 {
//  254     //Disable global interrupts while doing RMW operation on LOCKA bit
//  255     uint16_t gieStatus;
//  256     gieStatus = __get_SR_register() & GIE;          //Store current SR register
        MOV.W   SR, R14
        AND.W   #0x8, R14
        MOV.W   R14, R15
//  257     __disable_interrupt();                          //Disable global interrupt
        DINT
        NOP
//  258 
//  259     //Set the LOCKA bit in FCTL3.
//  260     //Since LOCKA toggles when you write a 1 (and writing 0 has no effect),
//  261     //read the register, XOR with LOCKA mask, mask the lower byte
//  262     //and write it back.
//  263     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY
//  264         + ((HWREG16(FLASH_BASE + OFS_FCTL3) ^ LOCKA) & 0xFF);
        MOV.W   &0x144, R14
        XOR.W   #0x40, R14
        AND.W   #0xff, R14
        ADD.W   #0xa500, R14
        MOV.W   R14, &0x144
        NOP
//  265 
//  266     //Reinstate SR register to restore global interrupt enable status
//  267     __bis_SR_register(gieStatus);
        BIS.W   R15, SR
        NOP
//  268 }
        RETA
          CFI EndBlock cfiBlock9
//  269 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  270 void FlashCtl_unlockInfoA (void)
FlashCtl_unlockInfoA:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function FlashCtl_unlockInfoA
          CFI NoCalls
//  271 {
//  272     //Disable global interrupts while doing RMW operation on LOCKA bit
//  273     uint16_t gieStatus;
//  274     gieStatus = __get_SR_register() & GIE;          //Store current SR register
        MOV.W   SR, R14
        AND.W   #0x8, R14
        MOV.W   R14, R15
//  275     __disable_interrupt();                          //Disable global interrupt
        DINT
        NOP
//  276 
//  277     //Clear the LOCKA bit in FCTL3.
//  278     //Since LOCKA toggles when you write a 1 (and writing 0 has no effect),
//  279     //read the register, mask the lower byte, and write it back.
//  280     HWREG16(FLASH_BASE + OFS_FCTL3) = FWKEY 
//  281         + (HWREG16(FLASH_BASE + OFS_FCTL3) & 0xFF);
        MOV.W   &0x144, R14
        AND.W   #0xff, R14
        ADD.W   #0xa500, R14
        MOV.W   R14, &0x144
        NOP
//  282 
//  283     //Reinstate SR register to restore global interrupt enable status
//  284     __bis_SR_register(gieStatus);
        BIS.W   R15, SR
        NOP
//  285 }
        RETA
          CFI EndBlock cfiBlock10

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  286 
//  287 
//  288 #endif
//  289 //*****************************************************************************
//  290 //
//  291 //! Close the doxygen group for flashctl_api
//  292 //! @}
//  293 //
//  294 //*****************************************************************************
// 
// 438 bytes in segment CODE
// 
// 438 bytes of CODE memory
//
//Errors: none
//Warnings: none
