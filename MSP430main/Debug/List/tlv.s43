///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  15:34:13
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\tlv.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW3485.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\tlv.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\tlv.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME tlv

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC TLV_getDeviceType
        PUBLIC TLV_getInfo
        PUBLIC TLV_getInterrupt
        PUBLIC TLV_getMemory
        PUBLIC TLV_getPeripheral
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\tlv.c
//    1 /* --COPYRIGHT--,BSD
//    2  * Copyright (c) 2017, Texas Instruments Incorporated
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  *
//    9  * *  Redistributions of source code must retain the above copyright
//   10  *    notice, this list of conditions and the following disclaimer.
//   11  *
//   12  * *  Redistributions in binary form must reproduce the above copyright
//   13  *    notice, this list of conditions and the following disclaimer in the
//   14  *    documentation and/or other materials provided with the distribution.
//   15  *
//   16  * *  Neither the name of Texas Instruments Incorporated nor the names of
//   17  *    its contributors may be used to endorse or promote products derived
//   18  *    from this software without specific prior written permission.
//   19  *
//   20  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//   21  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//   22  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//   23  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//   24  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//   25  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//   26  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//   27  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//   28  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//   29  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//   30  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//   31  * --/COPYRIGHT--*/
//   32 //*****************************************************************************
//   33 //
//   34 // tlv.c - Driver for the tlv Module.
//   35 //
//   36 //*****************************************************************************
//   37 
//   38 //*****************************************************************************
//   39 //
//   40 //! \addtogroup tlv_api tlv
//   41 //! @{
//   42 //
//   43 //*****************************************************************************
//   44 
//   45 #include "inc/hw_memmap.h"
//   46 
//   47 #ifdef __MSP430_HAS_TLV__
//   48 #include "tlv.h"
//   49 
//   50 #include <assert.h>
//   51 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   52 void TLV_getInfo(uint8_t tag,
TLV_getInfo:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function TLV_getInfo
          CFI NoCalls
//   53                  uint8_t instance,
//   54                  uint8_t *length,
//   55                  uint16_t **data_address
//   56                  )
//   57 {
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.B   R13, R10
//   58   // TLV Structure Start Address
//   59   char *TLV_address = (char *)TLV_START;
        MOVA    #0x1a08, R11
//   60 
//   61   while((TLV_address < (char *)TLV_END)
//   62         && ((*TLV_address != tag) || instance)   // check for tag and instance
//   63         && (*TLV_address != TLV_TAGEND))         // do range check first
??TLV_getInfo_0:
        PUSHM.A #0x1, R11
          CFI CFA SP+24
        POPM.W  #0x2, R9
          CFI CFA SP+20
        CMP.W   #0x0, R9
        JNC     ??TLV_getInfo_2
        JNE     ??TLV_getInfo_3
        CMP.W   #0x1aff, R8
        JC      ??TLV_getInfo_3
??TLV_getInfo_2:
        CMP.B   R12, 0(R11)
        JNE     ??TLV_getInfo_4
        CMP.B   #0x0, R10
        JEQ     ??TLV_getInfo_3
??TLV_getInfo_4:
        CMP.B   #0xff, 0(R11)
        JEQ     ??TLV_getInfo_3
//   64   {
//   65     if (*TLV_address == tag)
        CMP.B   R12, 0(R11)
        JNE     ??TLV_getInfo_5
//   66     {
//   67       // repeat till requested instance is reached
//   68       instance--;
        ADD.B   #0xff, R10
//   69     }
//   70     // add (Current TAG address + LENGTH) + 2
//   71     TLV_address += *(TLV_address + 1) + 2;
??TLV_getInfo_5:
        MOV.B   0x1(R11), R13
        MOV.B   R13, R13
        ADD.W   #0x2, R13
        MOV.W   R13, R8
        RLAM.A  #0x4, R8
        RRAM.A  #0x4, R8
        ADDA    R8, R11
        JMP     ??TLV_getInfo_0
//   72   }
//   73 
//   74   // Check if Tag match happened..
//   75   if (*TLV_address == tag)
??TLV_getInfo_3:
        CMP.B   R12, 0(R11)
        JNE     ??TLV_getInfo_6
//   76   {
//   77     // Return length = Address + 1
//   78     *length = *(TLV_address + 1);
        MOV.B   0x1(R11), 0(R14)
//   79     // Return address of first data/value info = Address + 2
//   80     *data_address = (uint16_t *)(TLV_address + 2);
        MOVA    R11, R13
        ADDA    #0x2, R13
        MOVA    R13, 0(R15)
        JMP     ??TLV_getInfo_1
//   81   }
//   82   // If there was no tag match and the end of TLV structure was reached..
//   83   else
//   84   {
//   85     // Return 0 for TAG not found
//   86     *length = 0;
??TLV_getInfo_6:
        MOV.B   #0x0, 0(R14)
//   87     // Return 0 for TAG not found
//   88     *data_address = 0;
        MOVA    #0x0, 0(R15)
//   89   }
//   90 }
??TLV_getInfo_1:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   91 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   92 uint16_t TLV_getDeviceType()
TLV_getDeviceType:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function TLV_getDeviceType
          CFI NoCalls
//   93 {
//   94   uint16_t *pDeviceType = (uint16_t *)TLV_DEVICE_ID_0;
        MOVA    #0x1a04, R15
//   95   // Return Value from TLV Table
//   96   return pDeviceType[0];
        MOV.W   @R15, R12
        RETA
//   97 }
          CFI EndBlock cfiBlock1
//   98 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   99 uint16_t TLV_getMemory(uint8_t instance)
TLV_getMemory:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function TLV_getMemory
//  100 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        SUBA    #0x6, SP
          CFI CFA SP+18
        MOV.B   R12, R11
//  101     uint8_t *pPDTAG;
//  102     uint8_t bPDTAG_bytes;
//  103     uint16_t count;
//  104 
//  105     // set tag for word access comparison
//  106     instance *= 2;
        RLA.B   R11
//  107 
//  108     // TLV access Function Call
//  109     // Get Peripheral data pointer
//  110     TLV_getInfo(TLV_PDTAG,
//  111                 0,
//  112                 &bPDTAG_bytes,
//  113                 (uint16_t **)&pPDTAG
//  114                 );
        MOVA    SP, R15
        MOVA    SP, R14
        ADDA    #0x4, R14
        MOV.B   #0x0, R13
        MOV.B   #0x2, R12
          CFI FunCall TLV_getInfo
        CALLA   #TLV_getInfo
//  115 
//  116     for (count = 0;count <= instance; count += 2)
        MOV.W   #0x0, R10
??TLV_getMemory_0:
        MOV.B   R11, R11
        CMP.W   R10, R11
        JNC     ??TLV_getMemory_2
//  117     {
//  118       if (pPDTAG[count] == 0)
        MOVA    @SP, R15
        ADDA    R10, R15
        CMP.B   #0x0, 0(R15)
        JNE     ??TLV_getMemory_3
//  119       {
//  120          // Return 0 if end reached
//  121         return 0;
        MOV.W   #0x0, R12
        JMP     ??TLV_getMemory_1
//  122       }
//  123       if (count == instance)
??TLV_getMemory_3:
        MOV.B   R11, R11
        CMP.W   R11, R10
        JNE     ??TLV_getMemory_4
//  124         return (pPDTAG[count] | pPDTAG[count+1]<<8);
        MOVA    @SP, R15
        ADDA    R10, R15
        MOV.B   @R15, R12
        MOV.B   R12, R12
        MOVA    @SP, R15
        ADD.W   #0x1, R10
        ADDA    R10, R15
        MOV.B   @R15, R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R15, R12
        JMP     ??TLV_getMemory_1
//  125     }
??TLV_getMemory_4:
        ADD.W   #0x2, R10
        JMP     ??TLV_getMemory_0
//  126 
//  127     // Return 0: not found
//  128     return 0;
??TLV_getMemory_2:
        MOV.W   #0x0, R12
??TLV_getMemory_1:
        ADDA    #0x6, SP
          CFI CFA SP+12
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
//  129 }
          CFI EndBlock cfiBlock2
//  130 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  131 uint16_t TLV_getPeripheral(uint8_t tag,
TLV_getPeripheral:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function TLV_getPeripheral
//  132                                uint8_t instance
//  133                               )
//  134 {
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        SUBA    #0x6, SP
          CFI CFA SP+26
        MOV.B   R12, R11
        MOV.B   R13, R9
//  135     uint8_t *pPDTAG;
//  136     uint8_t bPDTAG_bytes;
//  137     uint16_t count = 0;
        MOV.W   #0x0, R10
//  138     uint16_t pcount = 0;
        MOV.W   #0x0, R8
//  139 
//  140     // Get Peripheral data pointer
//  141     TLV_getInfo(TLV_PDTAG,
//  142                 0,
//  143                 &bPDTAG_bytes,
//  144                 (uint16_t **)&pPDTAG
//  145                 );
        MOVA    SP, R15
        MOVA    SP, R14
        ADDA    #0x4, R14
        MOV.B   #0x0, R13
        MOV.B   #0x2, R12
          CFI FunCall TLV_getInfo
        CALLA   #TLV_getInfo
//  146 
//  147     // read memory configuration from TLV to get offset for Peripherals
//  148     while (TLV_getMemory(count))
??TLV_getPeripheral_0:
        PUSH.W  R12
          CFI CFA SP+28
        MOV.B   R10, 0(SP)
        POP.W   R12
          CFI CFA SP+26
          CFI FunCall TLV_getMemory
        CALLA   #TLV_getMemory
        CMP.W   #0x0, R12
        JEQ     ??TLV_getPeripheral_4
//  149     {
//  150       count++;
        ADD.W   #0x1, R10
        JMP     ??TLV_getPeripheral_0
//  151     }
//  152     // get number of Peripheral entries
//  153     pcount = pPDTAG[count * 2 + 1];
??TLV_getPeripheral_4:
        MOVA    @SP, R14
        MOV.W   R10, R15
        RLA.W   R15
        ADD.W   #0x1, R15
        ADDA    R15, R14
        MOV.B   @R14, R15
        MOV.B   R15, R15
        MOV.W   R15, R8
//  154     // inc count to first Periperal
//  155     count++;
        ADD.W   #0x1, R10
//  156     // adjust point to first address of Peripheral
//  157     pPDTAG += count*2;
        MOV.W   R10, R14
        RLA.W   R14
        MOV.W   #0x0, R15
        ADD.W   R14, 0(SP)
        ADDC.W  R15, 0x2(SP)
//  158     // set counter back to 0
//  159     count = 0;
        MOV.W   #0x0, R10
//  160     // align pcount for work comparision
//  161     pcount *= 2;
        RLA.W   R8
//  162 
//  163     // TLV access Function Call
//  164     for (count = 0; count <= pcount; count += 2)
        MOV.W   #0x0, R10
??TLV_getPeripheral_1:
        CMP.W   R10, R8
        JNC     ??TLV_getPeripheral_5
//  165     {
//  166       if (pPDTAG[count+1] == tag)
        MOVA    @SP, R14
        MOV.W   R10, R15
        ADD.W   #0x1, R15
        ADDA    R15, R14
        CMP.B   R11, 0(R14)
        JNE     ??TLV_getPeripheral_2
//  167       {
//  168         // test if required Peripheral is found
//  169         if (instance > 0)
        CMP.B   #0x0, R9
        JEQ     ??TLV_getPeripheral_6
//  170         {
//  171           // test if required instance is found
//  172           instance--;
        ADD.B   #0xff, R9
        JMP     ??TLV_getPeripheral_2
//  173         }
//  174         else
//  175         {
//  176           // Return found data
//  177           return (pPDTAG[count] | pPDTAG[count + 1] << 8);
??TLV_getPeripheral_6:
        MOVA    @SP, R15
        ADDA    R10, R15
        MOV.B   @R15, R12
        MOV.B   R12, R12
        MOVA    @SP, R14
        ADD.W   #0x1, R10
        MOV.W   R10, R15
        ADDA    R15, R14
        MOV.B   @R14, R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R15, R12
        JMP     ??TLV_getPeripheral_3
//  178         }
//  179       }
//  180     }
??TLV_getPeripheral_2:
        ADD.W   #0x2, R10
        JMP     ??TLV_getPeripheral_1
//  181 
//  182     // Return 0: not found
//  183     return 0;
??TLV_getPeripheral_5:
        MOV.W   #0x0, R12
??TLV_getPeripheral_3:
        ADDA    #0x6, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//  184 }
          CFI EndBlock cfiBlock3
//  185 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  186 uint8_t TLV_getInterrupt(uint8_t tag)
TLV_getInterrupt:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function TLV_getInterrupt
//  187 {
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        SUBA    #0x6, SP
          CFI CFA SP+26
        MOV.B   R12, R11
//  188     uint8_t *pPDTAG;
//  189     uint8_t bPDTAG_bytes;
//  190     uint16_t count = 0;
        MOV.W   #0x0, R10
//  191     uint16_t pcount = 0;
        MOV.W   #0x0, R8
//  192 
//  193     // Get Peripheral data pointer
//  194     TLV_getInfo(TLV_PDTAG,
//  195                 0,
//  196                 &bPDTAG_bytes,
//  197                 (uint16_t **)&pPDTAG
//  198                 );
        MOVA    SP, R15
        MOVA    SP, R14
        ADDA    #0x4, R14
        MOV.B   #0x0, R13
        MOV.B   #0x2, R12
          CFI FunCall TLV_getInfo
        CALLA   #TLV_getInfo
//  199 
//  200     // read memory configuration from TLV to get offset for Peripherals
//  201     while (TLV_getMemory(count))
??TLV_getInterrupt_0:
        PUSH.W  R12
          CFI CFA SP+28
        MOV.B   R10, 0(SP)
        POP.W   R12
          CFI CFA SP+26
          CFI FunCall TLV_getMemory
        CALLA   #TLV_getMemory
        CMP.W   #0x0, R12
        JEQ     ??TLV_getInterrupt_3
//  202     {
//  203       count++;
        ADD.W   #0x1, R10
        JMP     ??TLV_getInterrupt_0
//  204     }
//  205 
//  206     pcount = pPDTAG[count * 2 + 1];
??TLV_getInterrupt_3:
        MOVA    @SP, R14
        MOV.W   R10, R15
        RLA.W   R15
        ADD.W   #0x1, R15
        ADDA    R15, R14
        MOV.B   @R14, R15
        MOV.B   R15, R15
        MOV.W   R15, R8
//  207     // inc count to first Periperal
//  208     count++;
        ADD.W   #0x1, R10
//  209     // adjust point to first address of Peripheral
//  210     pPDTAG += (pcount + count) * 2;
        MOV.W   R8, R14
        ADD.W   R10, R14
        RLA.W   R14
        MOV.W   #0x0, R15
        ADD.W   R14, 0(SP)
        ADDC.W  R15, 0x2(SP)
//  211     // set counter back to 0
//  212     count = 0;
        MOV.W   #0x0, R10
//  213 
//  214     // TLV access Function Call
//  215     for (count = 0; count <= tag; count += 2)
        MOV.W   #0x0, R10
??TLV_getInterrupt_1:
        MOV.B   R11, R11
        CMP.W   R10, R11
        JNC     ??TLV_getInterrupt_4
//  216     {
//  217       if (pPDTAG[count] == 0)
        MOVA    @SP, R15
        ADDA    R10, R15
        CMP.B   #0x0, 0(R15)
        JNE     ??TLV_getInterrupt_5
//  218       {
//  219         // Return 0: not found/end of table
//  220         return 0;
        MOV.B   #0x0, R12
        JMP     ??TLV_getInterrupt_2
//  221       }
//  222       if (count == tag)
??TLV_getInterrupt_5:
        MOV.B   R11, R11
        CMP.W   R11, R10
        JNE     ??TLV_getInterrupt_6
//  223       {
//  224         // Return found data
//  225         return (pPDTAG[count]);
        MOVA    @SP, R15
        ADDA    R10, R15
        MOV.B   @R15, R12
        JMP     ??TLV_getInterrupt_2
//  226       }
//  227     }
??TLV_getInterrupt_6:
        ADD.W   #0x2, R10
        JMP     ??TLV_getInterrupt_1
//  228 
//  229     // Return 0: not found
//  230     return 0;
??TLV_getInterrupt_4:
        MOV.B   #0x0, R12
??TLV_getInterrupt_2:
        ADDA    #0x6, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//  231 }
          CFI EndBlock cfiBlock4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  232 
//  233 #endif
//  234 //*****************************************************************************
//  235 //
//  236 //! Close the doxygen group for tlv_api
//  237 //! @}
//  238 //
//  239 //*****************************************************************************
// 
// 496 bytes in segment CODE
// 
// 496 bytes of CODE memory
//
//Errors: none
//Warnings: none
