///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  15:34:12
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\sysctl.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW30D5.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\sysctl.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\sysctl.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME sysctl

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC SysCtl_clearJTAGMailboxFlagStatus
        PUBLIC SysCtl_disableBSLMemory
        PUBLIC SysCtl_disableBSLProtect
        PUBLIC SysCtl_disableRAMBasedInterruptVectors
        PUBLIC SysCtl_enableBSLMemory
        PUBLIC SysCtl_enableBSLProtect
        PUBLIC SysCtl_enableDedicatedJTAGPins
        PUBLIC SysCtl_enablePMMAccessProtect
        PUBLIC SysCtl_enableRAMBasedInterruptVectors
        PUBLIC SysCtl_getBSLEntryIndication
        PUBLIC SysCtl_getJTAGInboxMessage16Bit
        PUBLIC SysCtl_getJTAGInboxMessage32Bit
        PUBLIC SysCtl_getJTAGMailboxFlagStatus
        PUBLIC SysCtl_initJTAGMailbox
        PUBLIC SysCtl_setBSLSize
        PUBLIC SysCtl_setJTAGOutgoingMessage16Bit
        PUBLIC SysCtl_setJTAGOutgoingMessage32Bit
        PUBLIC SysCtl_setRAMAssignedToBSL
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\sysctl.c
//    1 /* --COPYRIGHT--,BSD
//    2  * Copyright (c) 2017, Texas Instruments Incorporated
//    3  * All rights reserved.
//    4  *
//    5  * Redistribution and use in source and binary forms, with or without
//    6  * modification, are permitted provided that the following conditions
//    7  * are met:
//    8  *
//    9  * *  Redistributions of source code must retain the above copyright
//   10  *    notice, this list of conditions and the following disclaimer.
//   11  *
//   12  * *  Redistributions in binary form must reproduce the above copyright
//   13  *    notice, this list of conditions and the following disclaimer in the
//   14  *    documentation and/or other materials provided with the distribution.
//   15  *
//   16  * *  Neither the name of Texas Instruments Incorporated nor the names of
//   17  *    its contributors may be used to endorse or promote products derived
//   18  *    from this software without specific prior written permission.
//   19  *
//   20  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//   21  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
//   22  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//   23  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//   24  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//   25  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//   26  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//   27  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//   28  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//   29  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//   30  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//   31  * --/COPYRIGHT--*/
//   32 //*****************************************************************************
//   33 //
//   34 // sysctl.c - Driver for the sysctl Module.
//   35 //
//   36 //*****************************************************************************
//   37 
//   38 //*****************************************************************************
//   39 //
//   40 //! \addtogroup sysctl_api sysctl
//   41 //! @{
//   42 //
//   43 //*****************************************************************************
//   44 
//   45 #include "inc/hw_memmap.h"
//   46 
//   47 #ifdef __MSP430_HAS_SYS__
//   48 #include "sysctl.h"
//   49 
//   50 #include <assert.h>
//   51 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   52 void SysCtl_enableDedicatedJTAGPins (void)
SysCtl_enableDedicatedJTAGPins:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function SysCtl_enableDedicatedJTAGPins
          CFI NoCalls
//   53 {
//   54     HWREG8(SYS_BASE + OFS_SYSCTL_L) |= SYSJTAGPIN;
        BIS.B   #0x20, &0x180
//   55 }
        RETA
          CFI EndBlock cfiBlock0
//   56 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   57 uint8_t SysCtl_getBSLEntryIndication (void)
SysCtl_getBSLEntryIndication:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function SysCtl_getBSLEntryIndication
          CFI NoCalls
//   58 {
//   59     if ( HWREG8(SYS_BASE + OFS_SYSCTL_L) & SYSBSLIND){
        BIT.B   #0x10, &0x180
        JNC     ??SysCtl_getBSLEntryIndication_0
//   60         return (SYSCTL_BSLENTRY_INDICATED) ;
        MOV.B   #0x1, R12
        RETA
//   61     } else   {
//   62         return (SYSCTL_BSLENTRY_NOTINDICATED) ;
??SysCtl_getBSLEntryIndication_0:
        MOV.B   #0x0, R12
        RETA
//   63     }
//   64 }
          CFI EndBlock cfiBlock1
//   65 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   66 void SysCtl_enablePMMAccessProtect (void)
SysCtl_enablePMMAccessProtect:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function SysCtl_enablePMMAccessProtect
          CFI NoCalls
//   67 {
//   68     HWREG8(SYS_BASE + OFS_SYSCTL_L) |= SYSPMMPE;
        BIS.B   #0x4, &0x180
//   69 }
        RETA
          CFI EndBlock cfiBlock2
//   70 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   71 void SysCtl_enableRAMBasedInterruptVectors (void)
SysCtl_enableRAMBasedInterruptVectors:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function SysCtl_enableRAMBasedInterruptVectors
          CFI NoCalls
//   72 {
//   73     HWREG8(SYS_BASE + OFS_SYSCTL_L) |= SYSRIVECT;
        BIS.B   #0x1, &0x180
//   74 }
        RETA
          CFI EndBlock cfiBlock3
//   75 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   76 void SysCtl_disableRAMBasedInterruptVectors (void)
SysCtl_disableRAMBasedInterruptVectors:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function SysCtl_disableRAMBasedInterruptVectors
          CFI NoCalls
//   77 {
//   78     HWREG8(SYS_BASE + OFS_SYSCTL_L) &= ~(SYSRIVECT);
        BIC.B   #0x1, &0x180
//   79 }
        RETA
          CFI EndBlock cfiBlock4
//   80 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   81 void SysCtl_enableBSLProtect (void)
SysCtl_enableBSLProtect:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function SysCtl_enableBSLProtect
          CFI NoCalls
//   82 {
//   83     HWREG16(SYS_BASE + OFS_SYSBSLC) |= SYSBSLPE;
        BIS.W   #0x8000, &0x182
//   84 }
        RETA
          CFI EndBlock cfiBlock5
//   85 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   86 void SysCtl_disableBSLProtect (void)
SysCtl_disableBSLProtect:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function SysCtl_disableBSLProtect
          CFI NoCalls
//   87 {
//   88     HWREG16(SYS_BASE + OFS_SYSBSLC) &= ~(SYSBSLPE);
        BIC.W   #0x8000, &0x182
//   89 }
        RETA
          CFI EndBlock cfiBlock6
//   90 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   91 void SysCtl_enableBSLMemory (void)
SysCtl_enableBSLMemory:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function SysCtl_enableBSLMemory
          CFI NoCalls
//   92 {
//   93     HWREG16(SYS_BASE + OFS_SYSBSLC) &= ~(SYSBSLOFF);
        BIC.W   #0x4000, &0x182
//   94 }
        RETA
          CFI EndBlock cfiBlock7
//   95 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   96 void SysCtl_disableBSLMemory (void)
SysCtl_disableBSLMemory:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function SysCtl_disableBSLMemory
          CFI NoCalls
//   97 {
//   98     HWREG16(SYS_BASE + OFS_SYSBSLC) |= SYSBSLOFF;
        BIS.W   #0x4000, &0x182
//   99 }
        RETA
          CFI EndBlock cfiBlock8
//  100 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  101 void SysCtl_setRAMAssignedToBSL (uint8_t BSLRAMAssignment)
SysCtl_setRAMAssignedToBSL:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function SysCtl_setRAMAssignedToBSL
          CFI NoCalls
//  102 {
//  103     HWREG8(SYS_BASE + OFS_SYSBSLC_L) &= ~(SYSBSLR);
        BIC.B   #0x4, &0x182
//  104     HWREG8(SYS_BASE + OFS_SYSBSLC_L) |= BSLRAMAssignment;
        BIS.B   R12, &0x182
//  105 }
        RETA
          CFI EndBlock cfiBlock9
//  106 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  107 void SysCtl_setBSLSize (uint8_t BSLSizeSelect)
SysCtl_setBSLSize:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function SysCtl_setBSLSize
          CFI NoCalls
//  108 {
//  109     HWREG8(SYS_BASE + OFS_SYSBSLC_L) &= ~(SYSBSLSIZE0 + SYSBSLSIZE1);
        AND.B   #0xfc, &0x182
//  110     HWREG8(SYS_BASE + OFS_SYSBSLC_L) |= BSLSizeSelect;
        BIS.B   R12, &0x182
//  111 }
        RETA
          CFI EndBlock cfiBlock10
//  112 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  113 void SysCtl_initJTAGMailbox (uint8_t mailboxSizeSelect,
SysCtl_initJTAGMailbox:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function SysCtl_initJTAGMailbox
          CFI NoCalls
//  114     uint8_t autoClearInboxFlagSelect)
//  115 {
//  116     HWREG8(SYS_BASE + OFS_SYSJMBC_L) &= ~(JMBCLR1OFF + JMBCLR0OFF + JMBMODE);
        AND.B   #0x2f, &0x186
//  117     HWREG8(SYS_BASE + OFS_SYSJMBC_L) |=
//  118         mailboxSizeSelect + autoClearInboxFlagSelect;
        MOV.B   R12, R14
        ADD.B   R13, R14
        BIS.B   R14, &0x186
//  119 }
        RETA
          CFI EndBlock cfiBlock11
//  120 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  121 uint8_t SysCtl_getJTAGMailboxFlagStatus (uint8_t mailboxFlagMask)
SysCtl_getJTAGMailboxFlagStatus:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function SysCtl_getJTAGMailboxFlagStatus
          CFI NoCalls
//  122 {
//  123     return ( HWREG8(SYS_BASE + OFS_SYSJMBC_L) & mailboxFlagMask);
        AND.B   &0x186, R12
        RETA
//  124 }
          CFI EndBlock cfiBlock12
//  125 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  126 void SysCtl_clearJTAGMailboxFlagStatus (uint8_t mailboxFlagMask)
SysCtl_clearJTAGMailboxFlagStatus:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function SysCtl_clearJTAGMailboxFlagStatus
          CFI NoCalls
//  127 {
//  128     HWREG8(SYS_BASE + OFS_SYSJMBC_L) &= ~(mailboxFlagMask);
        BIC.B   R12, &0x186
//  129 }
        RETA
          CFI EndBlock cfiBlock13
//  130 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  131 uint16_t SysCtl_getJTAGInboxMessage16Bit (uint8_t inboxSelect)
SysCtl_getJTAGInboxMessage16Bit:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function SysCtl_getJTAGInboxMessage16Bit
          CFI NoCalls
//  132 {
//  133     return ( HWREG16(SYS_BASE + OFS_SYSJMBI0 + inboxSelect) );
        MOV.B   R12, R12
        ADD.W   #0x188, R12
        MOV.W   @R12, R12
        RETA
//  134 }
          CFI EndBlock cfiBlock14
//  135 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  136 uint32_t SysCtl_getJTAGInboxMessage32Bit (void)
SysCtl_getJTAGInboxMessage32Bit:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function SysCtl_getJTAGInboxMessage32Bit
          CFI NoCalls
//  137 {
//  138     uint32_t JTAGInboxMessageLow = HWREG16(SYS_BASE + OFS_SYSJMBI0);
        MOV.W   &0x188, R14
        MOV.W   #0x0, R15
//  139     uint32_t JTAGInboxMessageHigh = HWREG16(SYS_BASE + OFS_SYSJMBI1);
        MOV.W   &0x18a, R12
        MOV.W   #0x0, R13
//  140 
//  141     return ( (JTAGInboxMessageHigh << 16) + JTAGInboxMessageLow );
        MOV.W   R12, R13
        MOV.W   #0x0, R12
        ADD.W   R14, R12
        ADDC.W  R15, R13
        RETA
//  142 }
          CFI EndBlock cfiBlock15
//  143 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  144 void SysCtl_setJTAGOutgoingMessage16Bit (uint8_t outboxSelect,
SysCtl_setJTAGOutgoingMessage16Bit:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function SysCtl_setJTAGOutgoingMessage16Bit
          CFI NoCalls
//  145     uint16_t outgoingMessage)
//  146 {
//  147     HWREG16(SYS_BASE + OFS_SYSJMBO0 + outboxSelect) = outgoingMessage;
        MOV.B   R12, R15
        ADD.W   #0x18c, R15
        MOV.W   R13, 0(R15)
//  148 }
        RETA
          CFI EndBlock cfiBlock16
//  149 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  150 void SysCtl_setJTAGOutgoingMessage32Bit (uint32_t outgoingMessage)
SysCtl_setJTAGOutgoingMessage32Bit:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function SysCtl_setJTAGOutgoingMessage32Bit
          CFI NoCalls
//  151 {
//  152     HWREG16(SYS_BASE + OFS_SYSJMBO0) = (outgoingMessage);
        MOV.W   R12, &0x18c
//  153     HWREG16(SYS_BASE + OFS_SYSJMBO1) = (outgoingMessage >> 16);
        MOV.W   R13, &0x18e
//  154 }
        RETA
          CFI EndBlock cfiBlock17

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  155 
//  156 
//  157 #endif
//  158 //*****************************************************************************
//  159 //
//  160 //! Close the doxygen group for sysctl_api
//  161 //! @}
//  162 //
//  163 //*****************************************************************************
// 
// 178 bytes in segment CODE
// 
// 178 bytes of CODE memory
//
//Errors: none
//Warnings: none
