///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  15:34:10
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\myMath.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW2857.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\myMath.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\myMath.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME myMath

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN _Mul32f
        EXTERN _Add32f
        EXTERN _Div32f
        EXTERN _Cast32sto32f
        EXTERN ?FLT_GE
        EXTERN ?FLT_LT
        EXTERN _Sub32f
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC AtR
        PUBLIC Gyro_G
        PUBLIC Gyro_Gr
        PUBLIC M_PI
        PUBLIC PI_2
        PUBLIC Q_rsqrt
        PUBLIC RtA
        PUBLIC arcsin
        PUBLIC arctan
        PUBLIC cosine
        PUBLIC data_limit
        PUBLIC sine
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN fabs

// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\myMath.c
//    1 /**
//    2   ******************************************************************************
//    3   * Copyright (c) 2018,北京中科浩电科技有限公司
//    4   * All rights reserved.
//    5   * 文件名称：myMath.c
//    6   * 摘    要：
//    7   *
//    8   * 当前版本：V1.0
//    9   * 作    者：北京中科浩电科技有限公司研发部 
//   10   * 完成日期：    
//   11   * 修改说明：
//   12   * 
//   13   *
//   14   * 历史版本：
//   15   *
//   16   *
//   17   *******************************************************************************/
//   18 
//   19 /*==============================================================================
//   20                          ##### How to use this driver #####
//   21 ==============================================================================
//   22 相关数学计算函数可直接查询函数使用即可
//   23 
//   24 
//   25 */
//   26 //外部文件引用
//   27 #include "myMath.h"
//   28 #include <math.h>
//   29 
//   30 
//   31 //宏定义区
//   32 
//   33 
//   34 
//   35 //Extern引用
//   36 
//   37 
//   38 
//   39 //私有函数区
//   40 
//   41 
//   42 
//   43 //私有变量区

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//   44 const float M_PI = 3.1415926535;
M_PI:
        DATA32
        DC32 40490FDBH

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//   45 const float RtA = 57.2957795f;
RtA:
        DATA32
        DC32 42652EE1H

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//   46 const float AtR = 0.0174532925f;
AtR:
        DATA32
        DC32 3C8EFA35H

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//   47 const float Gyro_G = 0.03051756f * 2;          
Gyro_G:
        DATA32
        DC32 3D79FFF6H

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//   48 const float Gyro_Gr = 0.0005326f * 2;    
Gyro_Gr:
        DATA32
        DC32 3A8B9E2EH

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//   49 const float PI_2 = 1.570796f;
PI_2:
        DATA32
        DC32 3FC90FD8H
//   50 
//   51 /******************************************************************************
//   52   * 函数名称：sine
//   53   * 函数描述：返回正弦值
//   54   * 输    入：float x:角度值
//   55   * 输    出：void
//   56   * 返    回：正弦值
//   57   * 备    注：null
//   58   *    
//   59   *
//   60 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   61 float sine(float x)          // (-M_PI , M_PI) ???? 0.0005
sine:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function sine
//   62 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUBA    #0x8, SP
          CFI CFA SP+44
        MOV.W   R12, R8
        MOV.W   R13, R9
//   63     float Q = 0.775f;
        MOV.W   #0x6666, 0x4(SP)
        MOV.W   #0x3f46, 0x6(SP)
//   64     float P = 0.225f;
        MOV.W   #0x6666, 0(SP)
        MOV.W   #0x3e66, 0x2(SP)
//   65     float B =  1.273239544;
        MOV.W   #0xf983, R4
        MOV.W   #0x3fa2, R5
//   66     float tmp_c = -0.405284f;
        MOV.W   #0x8162, R6
        MOV.W   #0xbecf, R7
//   67     float y = B * x + tmp_c * x * fabs(x); 
        MOV.W   R4, R12
        MOV.W   R5, R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        PUSH.W  R13
          CFI CFA SP+46
        PUSH.W  R12
          CFI CFA SP+48
        MOV.W   R6, R12
        MOV.W   R7, R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R8, R12
        MOV.W   R9, R13
          CFI FunCall fabs
        CALLA   #fabs
        MOV.W   R10, R14
        MOV.W   R11, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        POP.W   R14
          CFI CFA SP+46
        POP.W   R15
          CFI CFA SP+44
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//   68     return (Q * y + P * y * fabs(y));
        MOV.W   0x4(SP), R12
        MOV.W   0x6(SP), R13
        MOV.W   R10, R14
        MOV.W   R11, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        PUSH.W  R13
          CFI CFA SP+46
        PUSH.W  R12
          CFI CFA SP+48
        MOV.W   0x4(SP), R12
        MOV.W   0x6(SP), R13
        MOV.W   R10, R14
        MOV.W   R11, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        PUSH.W  R13
          CFI CFA SP+50
        PUSH.W  R12
          CFI CFA SP+52
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall fabs
        CALLA   #fabs
        POP.W   R14
          CFI CFA SP+50
        POP.W   R15
          CFI CFA SP+48
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        POP.W   R14
          CFI CFA SP+46
        POP.W   R15
          CFI CFA SP+44
          CFI FunCall _Add32f
        CALLA   #_Add32f
        ADDA    #0x8, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//   69 }
          CFI EndBlock cfiBlock0
//   70 
//   71 /******************************************************************************
//   72   * 函数名称：cosine
//   73   * 函数描述：计算余弦值
//   74   * 输    入：float x:角度
//   75   * 输    出：
//   76   * 返    回：余弦值 
//   77   * 备    注：cos(x)=sin(M_PI / 2 + x)=sin(M_PI / 2 - x)  
//   78   *    
//   79   *
//   80 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   81 float cosine(float x)
cosine:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function cosine
//   82 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
        MOV.W   R13, R11
//   83     return sine(x + M_PI / 2);
        MOVX.W  &M_PI, R12
        MOVX.W  &M_PI + 2, R13
        MOV.W   #0x0, R14
        MOV.W   #0x4000, R15
          CFI FunCall _Div32f
        CALLA   #_Div32f
        MOV.W   R10, R14
        MOV.W   R11, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
          CFI FunCall sine
        CALLA   #sine
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
//   84 }
          CFI EndBlock cfiBlock1
//   85 
//   86 /******************************************************************************
//   87   * 函数名称：arctan
//   88   * 函数描述：反正切函数
//   89   * 输    入：反正切数据
//   90   * 输    出：void
//   91   * 返    回：反正切值
//   92   * 备    注：反正切麦克劳林展开式 阶数越高，值越准确70°以内是准确的  
//   93   *    
//   94   *
//   95 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   96 float arctan(float x)  //  (-1 , +1)    6? ?? 0.002958 
arctan:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function arctan
//   97 {
        PUSHM.A #0x7, R10
          CFI R4L Frame(CFA, -32)
          CFI R4H Frame(CFA, -30)
          CFI R5L Frame(CFA, -28)
          CFI R5H Frame(CFA, -26)
          CFI R6L Frame(CFA, -24)
          CFI R6H Frame(CFA, -22)
          CFI R7L Frame(CFA, -20)
          CFI R7H Frame(CFA, -18)
          CFI R8L Frame(CFA, -16)
          CFI R8H Frame(CFA, -14)
          CFI R9L Frame(CFA, -12)
          CFI R9H Frame(CFA, -10)
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+32
        SUBA    #0x4, SP
          CFI CFA SP+36
        MOV.W   R12, R8
        MOV.W   R13, R9
//   98     float t = x;
        MOV.W   R8, R4
        MOV.W   R9, R5
//   99     float result = 0;
        MOV.W   #0x0, R6
        MOV.W   #0x0, R7
//  100     float X2 = x * x;
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, 0(SP)
        MOV.W   R13, 0x2(SP)
//  101     unsigned char cnt = 1;
        MOV.B   #0x1, R10
//  102     do
//  103     {
//  104         result += t / ((cnt << 1) - 1);
??arctan_0:
        MOV.W   R4, R12
        MOV.W   R5, R13
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.B   R10, R12
        RLA.W   R12
        ADD.W   #0xffff, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R4, R12
        MOV.W   R5, R13
          CFI FunCall _Div32f
        CALLA   #_Div32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R6
        MOV.W   R13, R7
//  105         t = -t;
        XOR.W   #0x8000, R5
//  106         t *= X2;
        MOV.W   R4, R12
        MOV.W   R5, R13
        MOV.W   @SP, R14
        MOV.W   0x2(SP), R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R4
        MOV.W   R13, R5
//  107         cnt++;
        ADD.B   #0x1, R10
//  108     }while(cnt <= 6);
        CMP.B   #0x7, R10
        JNC     ??arctan_0
//  109     
//  110     return result;
        MOV.W   R6, R12
        MOV.W   R7, R13
        ADDA    #0x4, SP
          CFI CFA SP+32
        POPM.A  #0x7, R10
          CFI R10H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//  111 }
          CFI EndBlock cfiBlock2
//  112 
//  113 /******************************************************************************
//  114   * 函数名称：arcsin
//  115   * 函数描述：反正弦函数
//  116   * 输    入：float x:反正弦数据
//  117   * 输    出：void
//  118   * 返    回：反正弦数据
//  119   * 备    注：反正弦麦克劳林展开式 -1 < x < +1     42°以内是准确的    
//  120   *    
//  121   *
//  122 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  123 float arcsin(float x)
arcsin:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function arcsin
//  124 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUBA    #0x6, SP
          CFI CFA SP+42
        MOV.W   R12, R10
        MOV.W   R13, R11
//  125     float d = 1;
        MOV.W   #0x0, R8
        MOV.W   #0x3f80, R9
//  126     float t = x;
        MOV.W   R10, R4
        MOV.W   R11, R5
//  127     unsigned char cnt = 1;
        MOV.B   #0x1, 0(SP)
//  128     float result = 0;    
        MOV.W   #0x0, R6
        MOV.W   #0x0, R7
//  129     float X2 = x * x;
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   R10, R14
        MOV.W   R11, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, 0x2(SP)
        MOV.W   R13, 0x4(SP)
//  130     
//  131     if (x >= 1.0f) 
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   #0x0, R14
        MOV.W   #0x3f80, R15
          CFI FunCall ?FLT_GE
        CALLA   #?FLT_GE
        JNC     ??arcsin_2
//  132     {
//  133         return PI_2;
        MOVX.W  &PI_2, R12
        MOVX.W  &PI_2 + 2, R13
        JMP     ??arcsin_1
//  134     }
//  135     if (x <= -1.0f) 
??arcsin_2:
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   #0xffff, R14
        MOV.W   #0xbf7f, R15
          CFI FunCall ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??arcsin_0
//  136     {
//  137         return -PI_2;
        MOVX.W  &PI_2, R12
        MOVX.W  &PI_2 + 2, R13
        XOR.W   #0x8000, R13
        JMP     ??arcsin_1
//  138     }
//  139     do
//  140     {
//  141         result += t / (d * ((cnt << 1) - 1));
??arcsin_0:
        MOV.W   R4, R12
        MOV.W   R5, R13
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.B   @SP, R12
        MOV.B   R12, R12
        RLA.W   R12
        ADD.W   #0xffff, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R4, R12
        MOV.W   R5, R13
          CFI FunCall _Div32f
        CALLA   #_Div32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R6
        MOV.W   R13, R7
//  142         t *= X2 * ((cnt << 1) - 1);//
        MOV.B   @SP, R12
        MOV.B   R12, R12
        RLA.W   R12
        ADD.W   #0xffff, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   0x2(SP), R14
        MOV.W   0x4(SP), R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R4, R14
        MOV.W   R5, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R4
        MOV.W   R13, R5
//  143         d *= (cnt << 1);//2 4 6 8 10 ...
        MOV.B   @SP, R12
        MOV.B   R12, R12
        RLA.W   R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R8
        MOV.W   R13, R9
//  144         cnt++;
        ADD.B   #0x1, 0(SP)
//  145     }while(cnt <= 6);
        CMP.B   #0x7, 0(SP)
        JNC     ??arcsin_0
//  146 
//  147     return result;
        MOV.W   R6, R12
        MOV.W   R7, R13
??arcsin_1:
        ADDA    #0x6, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//  148 }
          CFI EndBlock cfiBlock3
//  149 
//  150 /******************************************************************************
//  151   * 函数名称：Q_rsqrt
//  152   * 函数描述：快速计算 1 / Sqrt(x) 
//  153   * 输    入：float number:要计算的数据
//  154   * 输    出：void
//  155   * 返    回：1 / Sqrt(x) 
//  156   * 备    注：null
//  157   *    
//  158   *
//  159 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  160 float Q_rsqrt(float number)
Q_rsqrt:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function Q_rsqrt
//  161 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUBA    #0x4, SP
          CFI CFA SP+40
        MOV.W   R12, R8
        MOV.W   R13, R9
//  162     long i;
//  163     float x2, y;
//  164     const float threehalfs = 1.5F;
        MOV.W   #0x0, R10
        MOV.W   #0x3fc0, R11
//  165  
//  166     x2 = number * 0.5F;
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.W   #0x0, R14
        MOV.W   #0x3f00, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, 0(SP)
        MOV.W   R13, 0x2(SP)
//  167     y  = number;
        MOV.W   R8, R6
        MOV.W   R9, R7
//  168     i  = *(long*) &y;                      
        MOV.W   R6, R4
        MOV.W   R7, R5
//  169     i  = 0x5f3759df - ( i >> 1 );               
        MOV.W   #0x59df, R12
        MOV.W   #0x5f37, R13
        MOV.W   R4, R14
        MOV.W   R5, R15
        RRA.W   R15
        RRC.W   R14
        MOV.W   R12, R4
        MOV.W   R13, R5
        SUB.W   R14, R4
        SUBC.W  R15, R5
//  170     y  = *(float*) &i;
        MOV.W   R4, R6
        MOV.W   R5, R7
//  171     y  = y * (threehalfs - (x2 * y * y ));   // 1st iteration （第一次牛顿迭代）
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   @SP, R12
        MOV.W   0x2(SP), R13
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
//  172     return y;
        MOV.W   R6, R12
        MOV.W   R7, R13
        ADDA    #0x4, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//  173 }
          CFI EndBlock cfiBlock4
//  174 
//  175 
//  176 /******************************************************************************
//  177   * 函数名称：data_limit
//  178   * 函数描述：数据限幅
//  179   * 输    入：float data:要操作的数据 
//  180               float toplimit:上限
//  181               float lowerlimit:下限
//  182   * 输    出：
//  183   * 返    回： 
//  184   * 备    注：    
//  185   *    
//  186   *
//  187 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  188 float data_limit(float data, float toplimit, float lowerlimit)
data_limit:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function data_limit
//  189 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R14, R8
        MOV.W   R15, R9
        MOV.W   0x1c(SP), R6
        MOV.W   0x1e(SP), R7
//  190   if(data > toplimit)  data = toplimit;
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.W   R10, R14
        MOV.W   R11, R15
          CFI FunCall ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??data_limit_1
        MOV.W   R8, R10
        MOV.W   R9, R11
        JMP     ??data_limit_0
//  191   else if(data < lowerlimit) data = lowerlimit;
??data_limit_1:
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall ?FLT_LT
        CALLA   #?FLT_LT
        JNC     ??data_limit_0
        MOV.W   R6, R10
        MOV.W   R7, R11
//  192     return data;
??data_limit_0:
        MOV.W   R10, R12
        MOV.W   R11, R13
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
//  193 }
          CFI EndBlock cfiBlock5

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  194 
//  195 
//  196 /******************* (C) 版权所有 2018 北京中科浩电科技有限公司 *******************/
//  197 
// 
// 832 bytes in segment CODE
//  24 bytes in segment DATA20_C
// 
// 832 bytes of CODE  memory
//  24 bytes of CONST memory
//
//Errors: none
//Warnings: none
