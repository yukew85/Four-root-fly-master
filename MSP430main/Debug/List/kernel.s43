///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  19:41:05
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\kernel.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW2D42.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\kernel.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\kernel.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME kernel

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?DivMod32u
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK `??TIMER0_B0_ISR::??INTVEC 118`
        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC PollingKernel
        PUBLIC TIMER0_B0_ISR
        PUBLIC Thread_10MS
        PUBLIC Thread_20MS
        PUBLIC Thread_3MS
        PUBLIC Thread_6MS
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC or(load(2, DATA, add(CFA, literal(-2))), lshift(and(load(2, DATA, add(CFA, literal(-4))), 61440), 4))
          CFI SR Frame(CFA, -4)
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon1
        
TIMER0_B0_ISR       SYMBOL "TIMER0_B0_ISR"
`??TIMER0_B0_ISR::??INTVEC 118` SYMBOL "??INTVEC 118", TIMER0_B0_ISR

        EXTERN PollingUSART
        EXTERN PollingLED
        EXTERN Timer_B_clearTimerInterrupt
        EXTERN GetMPU6050Data
        EXTERN FlightPidControl
        EXTERN g_UAVinfo
        EXTERN ControlAlt
        EXTERN MotorControl
        EXTERN g_Attitude
        EXTERN g_MPUManager
        EXTERN GetAngle
        EXTERN UpdateAltSpeed
        EXTERN PollingGCS
        EXTERN PollingNRF
        EXTERN UpdateAltInfo

// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\kernel.c
//    1 /**
//    2   ******************************************************************************
//    3   * Copyright (c) 2018,北京中科浩电科技有限公司
//    4   * All rights reserved.
//    5   * 文件名称：kernel.c
//    6   * 摘    要：
//    7   *
//    8   * 当前版本：V1.0
//    9   * 作    者：北京中科浩电科技有限公司研发部 
//   10   * 完成日期：
//   11   * 修改说明：
//   12   * 
//   13   *
//   14   * 历史版本：
//   15   *
//   16   *
//   17   *******************************************************************************/
//   18 
//   19 /*==============================================================================
//   20                          ##### How to use this driver #####
//   21 ==============================================================================
//   22 核心运行函数，本文件用以轮训主要功能函数
//   23 
//   24 */
//   25 //外部文件引用
//   26 #include "include.h"
//   27 #include "communication.h"
//   28 #include "gcs.h"
//   29 #include "speed_estimator.h"
//   30 #include "led.h"
//   31 #include "UART.h"
//   32 
//   33 //宏定义区
//   34 #define RATE_166HZ (166)
//   35 #define RATE_333HZ (333)
//   36 
//   37 //Extern定义区
//   38 
//   39 //私有函数区
//   40 void Update(void);
//   41 void UpdateUSBQueue(void);
//   42 
//   43 //私有变量区

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//   44 bool Thread_3MS;
Thread_3MS:
        DS8 1

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//   45 bool Thread_6MS;
Thread_6MS:
        DS8 1

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//   46 bool Thread_10MS;
Thread_10MS:
        DS8 1

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//   47 bool Thread_20MS;
Thread_20MS:
        DS8 1
//   48 
//   49 /******************************************************************************
//   50   * 函数名称：TIMER0_B0_ISR
//   51   * 函数描述：TIMER0 B0 中断服务函数
//   52   * 输    入：void
//   53   * 输    出：void
//   54   * 返    回：void 
//   55   * 备    注：1ms运行一次
//   56   *    
//   57   *
//   58 ******************************************************************************/
//   59 // Timer B0 interrupt service routine
//   60 #if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
//   61 #pragma vector = TIMER0_B0_VECTOR

        RSEG ISR_CODE:CODE:REORDER:NOROOT(1)
        CALL_GRAPH_ROOT TIMER0_B0_ISR, "interrupt"
//   62 __interrupt void TIMER0_B0_ISR(void)
TIMER0_B0_ISR:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function TIMER0_B0_ISR
//   63 #elif defined(__GNUC__)
//   64 void __attribute__((interrupt(TIMER0_B0_VECTOR))) TIMER0_B0_ISR(void)
//   65 #else
//   66 #error Compiler not supported!
//   67 #endif
//   68 {
        PUSHM.A #0x4, R15
          CFI R12L Frame(CFA, -20)
          CFI R12H Frame(CFA, -18)
          CFI R13L Frame(CFA, -16)
          CFI R13H Frame(CFA, -14)
          CFI R14L Frame(CFA, -12)
          CFI R14H Frame(CFA, -10)
          CFI R15L Frame(CFA, -8)
          CFI R15H Frame(CFA, -6)
          CFI CFA SP+20
//   69     static uint32_t Cnt = 0;
//   70 
//   71     Cnt++;
        ADDX.W  #0x1, &??Cnt
        ADDCX.W #0x0, &??Cnt + 2
//   72     if (Cnt % 3 == 0) //3ms
        MOV.W   #0x3, R14
        MOV.W   #0x0, R15
        MOVX.W  &??Cnt, R12
        MOVX.W  &??Cnt + 2, R13
          CFI FunCall ?DivMod32u
        CALLA   #?DivMod32u
        MOV.W   R14, R13
        ADDA    R15, R13
        JNE     ??TIMER0_B0_ISR_0
//   73     {
//   74         Thread_3MS = true;
        MOVX.B  #0x1, &Thread_3MS
//   75     }
//   76 
//   77     if (Cnt % 6 == 0)
??TIMER0_B0_ISR_0:
        MOV.W   #0x6, R14
        MOV.W   #0x0, R15
        MOVX.W  &??Cnt, R12
        MOVX.W  &??Cnt + 2, R13
          CFI FunCall ?DivMod32u
        CALLA   #?DivMod32u
        MOV.W   R14, R13
        ADDA    R15, R13
        JNE     ??TIMER0_B0_ISR_1
//   78     {
//   79         Thread_6MS = true;
        MOVX.B  #0x1, &Thread_6MS
//   80     }
//   81 
//   82     if (Cnt % 20 == 0)
??TIMER0_B0_ISR_1:
        MOV.W   #0x14, R14
        MOV.W   #0x0, R15
        MOVX.W  &??Cnt, R12
        MOVX.W  &??Cnt + 2, R13
          CFI FunCall ?DivMod32u
        CALLA   #?DivMod32u
        MOV.W   R14, R13
        ADDA    R15, R13
        JNE     ??TIMER0_B0_ISR_2
//   83     {
//   84         Thread_20MS = true;
        MOVX.B  #0x1, &Thread_20MS
//   85     }
//   86     
//   87     if (Cnt % 10 == 0)
??TIMER0_B0_ISR_2:
        MOV.W   #0xa, R14
        MOV.W   #0x0, R15
        MOVX.W  &??Cnt, R12
        MOVX.W  &??Cnt + 2, R13
          CFI FunCall ?DivMod32u
        CALLA   #?DivMod32u
        MOV.W   R14, R13
        ADDA    R15, R13
        JNE     ??TIMER0_B0_ISR_3
//   88     {
//   89         Thread_10MS = true;
        MOVX.B  #0x1, &Thread_10MS
//   90     }
//   91     
//   92     PollingUSART();
??TIMER0_B0_ISR_3:
          CFI FunCall PollingUSART
        CALLA   #PollingUSART
//   93     PollingLED();
          CFI FunCall PollingLED
        CALLA   #PollingLED
//   94     Timer_B_clearTimerInterrupt(TIMER_B0_BASE);
        MOV.W   #0x3c0, R12
          CFI FunCall Timer_B_clearTimerInterrupt
        CALLA   #Timer_B_clearTimerInterrupt
//   95 }
        POPM.A  #0x4, R15
          CFI R12H SameValue
          CFI R13H SameValue
          CFI R14H SameValue
          CFI R15H SameValue
          CFI R12L SameValue
          CFI R13L SameValue
          CFI R14L SameValue
          CFI R15L SameValue
          CFI CFA SP+4
        RETI
          CFI EndBlock cfiBlock0

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
??Cnt:
        DS8 4
//   96 
//   97 /******************************************************************************
//   98   * 函数名称：PollingKernel
//   99   * 函数描述：主运行函数
//  100   * 输    入：void
//  101   * 输    出：void
//  102   * 返    回：void 
//  103   * 备    注：此函数任务由B0中断服务函数开启
//  104   *    
//  105   *
//  106 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  107 void PollingKernel()
PollingKernel:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function PollingKernel
//  108 {
//  109 
//  110     if (Thread_3MS)
        CMPX.B  #0x0, &Thread_3MS
        JEQ     ??PollingKernel_1
//  111     {
//  112         Thread_3MS = false;
        MOVX.B  #0x0, &Thread_3MS
//  113         
//  114         GetMPU6050Data();        
          CFI FunCall GetMPU6050Data
        CALLA   #GetMPU6050Data
//  115         FlightPidControl(0.003f); 
        MOV.W   #0x9ba6, R12
        MOV.W   #0x3b44, R13
          CFI FunCall FlightPidControl
        CALLA   #FlightPidControl
//  116         switch (g_UAVinfo.UAV_Mode)
        CMPX.B  #0x1, &g_UAVinfo + 5
        JNE     ??PollingKernel_0
//  117         {
//  118         case Altitude_Hold:
//  119             ControlAlt(0.003f);
        MOV.W   #0x9ba6, R12
        MOV.W   #0x3b44, R13
          CFI FunCall ControlAlt
        CALLA   #ControlAlt
//  120             break;
//  121         default:
//  122             break;
//  123         }
//  124 
//  125         MotorControl();
??PollingKernel_0:
          CFI FunCall MotorControl
        CALLA   #MotorControl
//  126     }
//  127 
//  128     if (Thread_6MS)
??PollingKernel_1:
        CMPX.B  #0x0, &Thread_6MS
        JEQ     ??PollingKernel_2
//  129     {
//  130         Thread_6MS = false;
        MOVX.B  #0x0, &Thread_6MS
//  131 
//  132         GetAngle(&g_MPUManager, &g_Attitude, 0.00626f);
        MOV.W   #0x20b0, R14
        MOV.W   #0x3bcd, R15
        MOVA    #g_Attitude, R13
        MOVA    #g_MPUManager, R12
          CFI FunCall GetAngle
        CALLA   #GetAngle
//  133         UpdateAltSpeed(0.00626f);
        MOV.W   #0x20b0, R12
        MOV.W   #0x3bcd, R13
          CFI FunCall UpdateAltSpeed
        CALLA   #UpdateAltSpeed
//  134     }
//  135     
//  136     if (Thread_10MS)
??PollingKernel_2:
        CMPX.B  #0x0, &Thread_10MS
        JEQ     ??PollingKernel_3
//  137     {
//  138         Thread_10MS = false;
        MOVX.B  #0x0, &Thread_10MS
//  139         
//  140         PollingGCS();
          CFI FunCall PollingGCS
        CALLA   #PollingGCS
//  141     }
//  142 
//  143     if (Thread_20MS)
??PollingKernel_3:
        CMPX.B  #0x0, &Thread_20MS
        JEQ     ??PollingKernel_4
//  144     {
//  145         Thread_20MS = false;
        MOVX.B  #0x0, &Thread_20MS
//  146       
//  147         PollingNRF(); 
          CFI FunCall PollingNRF
        CALLA   #PollingNRF
//  148         UpdateAltInfo(0.02f);
        MOV.W   #0xd70a, R12
        MOV.W   #0x3ca3, R13
          CFI FunCall UpdateAltInfo
        CALLA   #UpdateAltInfo
//  149     }
//  150 }
??PollingKernel_4:
        RETA
          CFI EndBlock cfiBlock1

        COMMON INTVEC:CONST:ROOT(1)
        ORG 118
`??TIMER0_B0_ISR::??INTVEC 118`:
        DC16    TIMER0_B0_ISR

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  151 
//  152 /******************* (C) 版权所有 2018 北京中科浩电科技有限公司 *******************/
//  153 
// 
// 150 bytes in segment CODE
//   8 bytes in segment DATA20_Z
//   2 bytes in segment INTVEC
// 170 bytes in segment ISR_CODE
// 
// 320 bytes of CODE  memory
//   0 bytes of CONST memory (+ 2 bytes shared)
//   8 bytes of DATA  memory
//
//Errors: none
//Warnings: none
