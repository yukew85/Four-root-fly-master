///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          17/Nov/2018  19:57:25
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_adc.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EWEF6D.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_adc.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\msp430f5529_adc.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME msp430f5529_adc

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC ADC12
        PUBLIC ADC_ClearITPendingBit
        PUBLIC ADC_DeInit
        PUBLIC ADC_GetChanelMemoryAddr
        PUBLIC ADC_GetITStatus
        PUBLIC ADC_ITConfig
        PUBLIC ADC_Init
        PUBLIC ADC_ReadChanelOnce
        PUBLIC ADC_ReadChanelValue
        PUBLIC ADC_StartConv
        PUBLIC ADC_WaitBusy
        PUBWEAK _A_PCSEL_L
        PUBWEAK _A_REFCTL0_L
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN UCS
        EXTERN GPIO_MultiBits_Init

// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\msp430f5529_adc.c
//    1 #include "msp430f5529_adc.h"

        ASEGN DATA16_AN:DATA:NOROOT,024aH
// union <unnamed> __data16 _A_PCSEL_L
_A_PCSEL_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,01b0H
// union <unnamed> __data16 _A_REFCTL0_L
_A_REFCTL0_L:
        DS8 2
//    2 #include "msp430f5529_system.h"
//    3 

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//    4 const ADC_MemMapPtr ADC12 = ADC_BASE_PTR;     //ADC寄存器结构体
ADC12:
        DATA32
        DC32 700H

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//    5 static uint8_t  InitialedChannel_Num = 0u;      //ADC初始化的通道数，因为可能会多次初始化多个通道，这里取静态变量
InitialedChannel_Num:
        DS8 1

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//    6 static uint16_t InitialedChannel_Bit = 0u;      //已经初始化的ADC通道
InitialedChannel_Bit:
        DS8 2

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//    7 static uint16_t ADC_Channel_Bit[ADC_CH_NUM] = {0u};   //内部初始化标志位
ADC_Channel_Bit:
        DS8 32
//    8 static inline int8_t  ADC_GetChanelNum(ADC_CHn ch); //内部函数
//    9 /*******************************************************************************
//   10 *  函数名称：ADC_Init(uint16_t ch,ADC_VREF Vref,ADC_Resolution nBit)
//   11 *  功能说明：ADC初始化一个或多个ADC通道
//   12 *  参数说明：
//   13             uint16_t ch     :要初始化的通道
//   14             ADCVREF Vref    :参考电压
//   15             ADC_Resolution nBit   :转换精度
//   16 *  函数返回：无
//   17 *  注意    ：1：初始化后所有通道精度相同，即所有通道转换精度只取决于最后一次配置的精度
//   18              2：所有通道内部参考电压只能使用1.5或2.5V中的一种
//   19 *  使用示例：ADC_Init(ADC_CH1+ADC_CH3,ADC_VREF_1_5V,ADC_10bit);        //同时初始化两个通道，使用内部提供的1.5V参考电压，10位精度
//   20 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   21 void ADC_Init(uint16_t ch,ADC_VREF Vref,ADC_Resolution nBit)
ADC_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ADC_Init
//   22 {
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOV.W   R12, R11
        MOV.B   R13, R8
        MOV.B   R14, R6
//   23   ADC12->ENC = DISABLE;                 //先对该位复位，否则置位后有些寄存器不能再进行操作
        MOVA    &ADC12, R15
        BIC.W   #0x2, 0(R15)
//   24   uint16_t SREF_RegValue = 0u;
        MOV.W   #0x0, R10
//   25   switch(Vref)           //选择参考电压
        MOV.B   R8, R14
        SUB.B   #0x0, R14
        JEQ     ??ADC_Init_5
        SUB.B   #0x1, R14
        JEQ     ??ADC_Init_6
        SUB.B   #0x1, R14
        JEQ     ??ADC_Init_7
        SUB.B   #0x1, R14
        JEQ     ??ADC_Init_8
        JMP     ??ADC_Init_2
//   26   {
//   27   case ADC_VREF_1_5V:
//   28     REFCTL0 &=~ REFMSTR;                //把REF参考电压控制权交给ADC
??ADC_Init_5:
        BIC.W   #0x80, &0x1b0
//   29     ADC12->ADCREFON = BIT_SET;
        MOVA    &ADC12, R15
        BIS.W   #0x20, 0(R15)
//   30     ADC12->REF2_5V = RESET;
        MOVA    &ADC12, R15
        BIC.W   #0x40, 0(R15)
//   31     SREF_RegValue = ADC12_SREF_1;       //使用内部提供的参考电压
        MOV.W   #0x1, R10
//   32     break;
        JMP     ??ADC_Init_2
//   33   case ADC_VREF_2_5V:
//   34     REFCTL0 &=~ REFMSTR;
??ADC_Init_6:
        BIC.W   #0x80, &0x1b0
//   35     ADC12->ADCREFON = BIT_SET;
        MOVA    &ADC12, R15
        BIS.W   #0x20, 0(R15)
//   36     ADC12->REF2_5V = BIT_SET;
        MOVA    &ADC12, R15
        BIS.W   #0x40, 0(R15)
//   37     SREF_RegValue = ADC12_SREF_1;       //使用内部提供的参考电压
        MOV.W   #0x1, R10
//   38     break;
        JMP     ??ADC_Init_2
//   39   case ADC_VREF_External:      
//   40     P5SEL |= BIT0;       //VeREF+
??ADC_Init_8:
        BIS.B   #0x1, &0x24a
//   41     P5SEL |= BIT1;       //VeREF-
        BIS.B   #0x2, &0x24a
//   42     SREF_RegValue = ADC12_SREF_2;       //使用外部参考电压
        MOV.W   #0x2, R10
//   43   case ADC_VREF_3_3V:
//   44     SREF_RegValue = ADC12_SREF_0;       //使用电源电压作为参考电压,
??ADC_Init_7:
        MOV.W   #0x0, R10
//   45     break;
//   46   default :break;
//   47   }
//   48   //初始化通道
//   49   uint16_t CH_Mask = 0x01;
??ADC_Init_2:
        MOV.W   #0x1, R9
//   50   for(uint8_t CH_Num=0; CH_Num < ADC_CH_NUM; CH_Num++)
        MOV.B   #0x0, R7
??ADC_Init_0:
        CMP.B   #0x10, R7
        JC      ??ADC_Init_9
//   51   {
//   52     if(ch & CH_Mask)   //要初始化的通道
        BIT.W   R9, R11
        JEQ     ??ADC_Init_3
//   53     {
//   54       if((CH_Mask & InitialedChannel_Bit) == 0)   //如果该通道未被初始化过               
        MOVX.W  &InitialedChannel_Bit, R15
        BIT.W   R15, R9
        JNE     ??ADC_Init_10
//   55       {
//   56         ADC12->MCTL[InitialedChannel_Num].INCH = CH_Num;
        MOV.B   R7, R14
        AND.B   #0xf, R14
        MOVA    &ADC12, R13
        MOVX.B  &InitialedChannel_Num, R15
        MOV.B   R15, R15
        ADDA    R15, R13
        MOV.B   0x10(R13), R13
        AND.B   #0xf0, R13
        BIS.B   R14, R13
        MOVA    &ADC12, R14
        MOVX.B  &InitialedChannel_Num, R15
        MOV.B   R15, R15
        ADDA    R15, R14
        MOV.B   R13, 0x10(R14)
//   57         ADC12->MCTL[InitialedChannel_Num].REF  = SREF_RegValue;                 //参考电压选择，通道设置
        PUSH.W  R14
          CFI CFA SP+38
        MOV.B   R10, 0(SP)
        POP.W   R14
          CFI CFA SP+36
        RPT     #0x4
        RLAX.B  R14
        AND.B   #0x70, R14
        MOVA    &ADC12, R13
        MOVX.B  &InitialedChannel_Num, R15
        MOV.B   R15, R15
        ADDA    R15, R13
        MOV.B   0x10(R13), R13
        AND.B   #0x8f, R13
        BIS.B   R14, R13
        MOVA    &ADC12, R14
        MOVX.B  &InitialedChannel_Num, R15
        MOV.B   R15, R15
        ADDA    R15, R14
        MOV.B   R13, 0x10(R14)
//   58         ADC_Channel_Bit[InitialedChannel_Num] = CH_Mask;                        //将该通道初始化标志置位                                                    
        MOVX.B  &InitialedChannel_Num, R15
        MOV.B   R15, R15
        ADDA    R15, R15
        MOVX.W  R9, ADC_Channel_Bit(R15)
//   59         InitialedChannel_Bit |= CH_Mask;                                        //置位已初始化的通道标志位
        BISX.W  R9, &InitialedChannel_Bit
//   60         InitialedChannel_Num ++;                                                //初始化的通道数加1
        ADDX.B  #0x1, &InitialedChannel_Num
        JMP     ??ADC_Init_3
//   61       }
//   62       else                                      //如果是之前已经初始化过的通道，则要在这里从新设置一下，只设置通道参考电压
//   63       {
//   64         ADC12->MCTL[ADC_GetChanelNum((ADC_CHn)CH_Mask)].REF = SREF_RegValue;   //改变参考电压                                  
??ADC_Init_10:
        MOV.W   R9, R12
          CFI FunCall ADC_GetChanelNum
        CALLA   #ADC_GetChanelNum
        PUSH.W  R14
          CFI CFA SP+38
        MOV.B   R10, 0(SP)
        POP.W   R14
          CFI CFA SP+36
        RPT     #0x4
        RLAX.B  R14
        AND.B   #0x70, R14
        MOVA    &ADC12, R13
        MOV.B   R12, R15
        SXT     R15
        MOVA    R15, R4
        ADDA    R4, R13
        MOV.B   0x10(R13), R15
        AND.B   #0x8f, R15
        BIS.B   R14, R15
        MOVA    &ADC12, R14
        SXT     R12
        MOVA    R12, R13
        ADDA    R13, R14
        MOV.B   R15, 0x10(R14)
//   65       }
//   66     }
//   67     CH_Mask <<= 1;
??ADC_Init_3:
        RLA.W   R9
//   68   }
        ADD.B   #0x1, R7
        JMP     ??ADC_Init_0
//   69   if(InitialedChannel_Num > 1)                 //有多个通道时要加上序列通道结束位
??ADC_Init_9:
        CMPX.B  #0x2, &InitialedChannel_Num
        JNC     ??ADC_Init_11
//   70   {
//   71     for(int i=0; i<(InitialedChannel_Num-1); i++)   //前面所有通道序列结束位清零
        MOV.W   #0x0, R7
??ADC_Init_1:
        MOVX.B  &InitialedChannel_Num, R15
        MOV.B   R15, R15
        ADD.W   #0xffff, R15
        CMP.W   R15, R7
        JGE     ??ADC_Init_12
//   72     {
//   73       ADC12->MCTL[i].EOS = RESET;
        MOVA    &ADC12, R15
        MOV.W   R7, R14
        RLAM.A  #0x4, R14
        RRAM.A  #0x4, R14
        ADDA    R14, R15
        BIC.B   #0x80, 0x10(R15)
//   74     }
        ADD.W   #0x1, R7
        JMP     ??ADC_Init_1
//   75     ADC12->MCTL[InitialedChannel_Num-1].EOS = BIT_SET;  //最后一通道加上序列通道转换结束位
??ADC_Init_12:
        MOVA    &ADC12, R7
        MOVX.B  &InitialedChannel_Num, R15
        MOV.B   R15, R15
        ADD.W   #0xffff, R15
        MOV.W   R15, R14
        RLAM.A  #0x4, R14
        RRAM.A  #0x4, R14
        ADDA    R14, R7
        BIS.B   #0x80, 0x10(R7)
//   76   }
//   77   //一般配置
//   78   ADC12->SHT0 = M0_M7_SAMPLE_HOLD_TIME; //0-7通道采样与保持时间
??ADC_Init_11:
        MOVA    &ADC12, R15
        MOV.W   @R15, R15
        AND.W   #0xf0ff, R15
        BIS.W   #0x300, R15
        MOVA    &ADC12, R7
        MOV.W   R15, 0(R7)
//   79   ADC12->SHT1 = M8_M15_SAMPLE_HOLD_TIME;//8-15通道采样与保持时间
        MOVA    &ADC12, R15
        MOV.W   @R15, R15
        AND.W   #0xfff, R15
        BIS.W   #0x3000, R15
        MOVA    &ADC12, R7
        MOV.W   R15, 0(R7)
//   80   ADC12->ON = BIT_SET;                      // 采样时间，AD内核开启
        MOVA    &ADC12, R15
        BIS.W   #0x10, 0(R15)
//   81   ADC12->MSC = BIT_SET;
        MOVA    &ADC12, R15
        BIS.W   #0x80, 0(R15)
//   82   ADC12->SSEL = ADC12_SSEL_ADC12OSC;    //时钟选择
        MOVA    &ADC12, R15
        AND.W   #0xffe7, 0x2(R15)
//   83   ADC12->SHP = BIT_SET;
        MOVA    &ADC12, R15
        BIS.W   #0x200, 0x2(R15)
//   84   ADC12->CONSEQ = (InitialedChannel_Num > 1) ? BIT_SET : RESET;//有多个通道时设为序列通道单次转换模式,单个通道时设为单通道单次转换模式              
        CMPX.B  #0x2, &InitialedChannel_Num
        JNC     ??ADC_Init_13
        MOV.W   #0x1, R15
        JMP     ??ADC_Init_4
??ADC_Init_13:
        MOV.W   #0x0, R15
??ADC_Init_4:
        RLA.W   R15
        AND.W   #0x6, R15
        MOVA    &ADC12, R7
        MOV.W   0x2(R7), R7
        AND.W   #0xfff9, R7
        BIS.W   R15, R7
        MOVA    &ADC12, R15
        MOV.W   R7, 0x2(R15)
//   85   //设置ADC精度
//   86   ADC12->RES = nBit;    
        MOV.B   R6, R15
        RLAM.W  #0x4, R15
        AND.W   #0x30, R15
        MOVA    &ADC12, R7
        MOV.W   0x4(R7), R7
        AND.W   #0xffcf, R7
        BIS.W   R15, R7
        MOVA    &ADC12, R15
        MOV.W   R7, 0x4(R15)
//   87   //开启时钟
//   88   UCS->MODOSC_REQEN = BIT_SET;                                                   //ADC使用的是MODCLK 所以在这里配置该时钟，约5MHz左右
        MOVA    &UCS, R15
        BIS.B   #0x8, 0x10(R15)
//   89   //配置通道为第二功能
//   90   if(ch & 0x00ff)
        BIT.B   #0xff, R11
        JEQ     ??ADC_Init_14
//   91   {
//   92      GPIO_MultiBits_Init(P6,(ch & 0x00ff),GPI | SEL);
        MOV.W   #0x101, R14
        MOV.W   R11, R13
        AND.W   #0xff, R13
        MOV.B   #0x5, R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//   93   }
//   94   if(ch & 0xf000)
??ADC_Init_14:
        BIT.W   #0xf000, R11
        JEQ     ??ADC_Init_15
//   95   {
//   96      GPIO_MultiBits_Init(P7,((ch & 0xf000)>>12),GPI | SEL);
        MOV.W   #0x101, R14
        MOV.W   R11, R13
        SWPB    R13
        AND.W   #0xff, R13
        RRA.W   R13
        RRA.W   R13
        RRA.W   R13
        RRA.W   R13
        MOV.B   #0x6, R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//   97   }
//   98   if(ch & ADC_CH10) //如果使用了温度传感器通道，则开启温度传感器
??ADC_Init_15:
        BIT.W   #0x400, R11
        JNC     ??ADC_Init_16
//   99   {
//  100     ADC12->TCOFF = RESET;
        MOVA    &ADC12, R15
        BIC.W   #0x40, 0x4(R15)
//  101   }
//  102   ADC12->ENC = ENABLE;                                                        //该位必须在初始化完成后再置位
??ADC_Init_16:
        MOVA    &ADC12, R15
        BIS.W   #0x2, 0(R15)
//  103   //DELAY_MS(5);                                                                 //延时等待参考电压建立
//  104 }
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
        REQUIRE _A_REFCTL0_L
        REQUIRE _A_PCSEL_L
//  105 /*******************************************************************************
//  106 *  函数名称：ADC_DeInit(ADC_CHn ch)
//  107 *  功能说明：ADC复位某一通道
//  108 *  参数说明：ADC_CHn ch ：要复位的通道
//  109 *  函数返回：无
//  110 *  注意    ：
//  111 *  使用示例：ADC_DeInit(ADC_CH1);         //复位通道ADC_CH1，即该通道的ADC功能被屏蔽，作为普通IO口使用                              
//  112 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  113 void   ADC_DeInit(ADC_CHn ch)
ADC_DeInit:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ADC_DeInit
//  114 {
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        SUBA    #0x2, SP
          CFI CFA SP+22
        MOV.W   R12, R10
//  115   ADC12->ENC = RESET;                                                    //先对该位复位，否则置位后有些寄存器不能再进行操作
        MOVA    &ADC12, R15
        BIC.W   #0x2, 0(R15)
//  116   uint16_t CH_Mask = 0x01;
        MOV.W   #0x1, R11
//  117   for(uint8_t CH_Num=0; CH_Num < ADC_CH_NUM; CH_Num++)
        MOV.B   #0x0, R8
??ADC_DeInit_1:
        CMP.B   #0x10, R8
        JC      ??ADC_DeInit_3
//  118   {
//  119     if(ch & CH_Mask)   //要复位的通道
        BIT.W   R11, R10
        JEQ     ??ADC_DeInit_4
//  120     {
//  121       if(CH_Mask & InitialedChannel_Bit)  //如果该通道已经初始化，则
        MOVX.W  &InitialedChannel_Bit, R15
        BIT.W   R15, R11
        JEQ     ??ADC_DeInit_4
//  122       {
//  123         uint8_t chanel = ADC_GetChanelNum((ADC_CHn)CH_Mask);
        MOV.W   R11, R12
          CFI FunCall ADC_GetChanelNum
        CALLA   #ADC_GetChanelNum
//  124         InitialedChannel_Bit &=~ CH_Mask;            //该通道初始化标志屏蔽
        BICX.W  R11, &InitialedChannel_Bit
//  125         InitialedChannel_Num --;                     //已初始化通道数减一
        ADDX.B  #0xff, &InitialedChannel_Num
//  126         //所有通道前移
//  127         for(;chanel < InitialedChannel_Num; chanel++)
??ADC_DeInit_0:
        CMPX.B  &InitialedChannel_Num, R12
        JC      ??ADC_DeInit_5
//  128         {
//  129           ADC12->MCTL[chanel] = ADC12->MCTL[chanel + 1];
        MOVA    &ADC12, R15
        MOV.B   R12, R14
        ADD.W   #0x1, R14
        MOV.W   R14, R13
        RLAM.A  #0x4, R13
        RRAM.A  #0x4, R13
        ADDA    R13, R15
        MOV.B   0x10(R15), 0(SP)
        MOVA    &ADC12, R15
        MOV.B   R12, R12
        ADDA    R12, R15
        MOV.B   @SP, 0x10(R15)
//  130           ADC_Channel_Bit[chanel] =  (ADC_CHn)(1 << ADC12->MCTL[chanel + 1].INCH);
        MOV.W   #0x1, R15
        MOVA    &ADC12, R14
        MOV.B   R12, R13
        ADD.W   #0x1, R13
        MOV.W   R13, R9
        RLAM.A  #0x4, R9
        RRAM.A  #0x4, R9
        ADDA    R9, R14
        MOV.B   0x10(R14), R14
        AND.B   #0xf, R14
        SUB.B   #0x1, R14
        JN      ??ADC_DeInit_6
        RPT     R14
        RLAX.W  R15
??ADC_DeInit_6:
        ADD.B   #0x1, R14
        MOV.B   R12, R14
        ADDA    R14, R14
        MOVX.W  R15, ADC_Channel_Bit(R14)
//  131         }
        ADD.B   #0x1, R12
        JMP     ??ADC_DeInit_0
//  132         //最后一通道恢复默认值
//  133         ADC12->MCTL[chanel].INCH = RESET;         //设置该寄存器通道为0
??ADC_DeInit_5:
        MOVA    &ADC12, R15
        MOV.B   R12, R12
        ADDA    R12, R15
        AND.B   #0xf0, 0x10(R15)
//  134         ADC12->MCTL[chanel].REF = RESET;          //设置该寄存器通道参考电压为默认
        MOVA    &ADC12, R15
        MOV.B   R12, R12
        ADDA    R12, R15
        AND.B   #0x8f, 0x10(R15)
//  135         ADC12->MCTL[chanel].EOS = RESET;          //设置序列通道转换结束位为0
        MOVA    &ADC12, R15
        MOV.B   R12, R12
        ADDA    R12, R15
        BIC.B   #0x80, 0x10(R15)
//  136         ADC_Channel_Bit[chanel] = RESET;          //设置该通道初始化标志位复位
        MOV.B   R12, R12
        ADDA    R12, R12
        MOVX.W  #0x0, ADC_Channel_Bit(R12)
//  137       }
//  138     }
//  139     CH_Mask <<= 1;
??ADC_DeInit_4:
        RLA.W   R11
//  140   }
        ADD.B   #0x1, R8
        JMP     ??ADC_DeInit_1
//  141   if(InitialedChannel_Num <= 1)                 //最只有一个通道时取消序列通道转换结束位
??ADC_DeInit_3:
        CMPX.B  #0x2, &InitialedChannel_Num
        JC      ??ADC_DeInit_7
//  142   {
//  143     ADC12->MCTL[InitialedChannel_Num-1].EOS = RESET;  //
        MOVA    &ADC12, R14
        MOVX.B  &InitialedChannel_Num, R15
        MOV.B   R15, R15
        ADD.W   #0xffff, R15
        MOV.W   R15, R13
        RLAM.A  #0x4, R13
        RRAM.A  #0x4, R13
        ADDA    R13, R14
        BIC.B   #0x80, 0x10(R14)
//  144   }
//  145   ADC12->CONSEQ = (InitialedChannel_Num > 1) ? BIT_SET : RESET;//有多个通道时设为序列通道单次转换模式,单个通道时设为单通道单次转换模式              
??ADC_DeInit_7:
        CMPX.B  #0x2, &InitialedChannel_Num
        JNC     ??ADC_DeInit_8
        MOV.W   #0x1, R15
        JMP     ??ADC_DeInit_2
??ADC_DeInit_8:
        MOV.W   #0x0, R15
??ADC_DeInit_2:
        RLA.W   R15
        AND.W   #0x6, R15
        MOVA    &ADC12, R14
        MOV.W   0x2(R14), R14
        AND.W   #0xfff9, R14
        BIS.W   R15, R14
        MOVA    &ADC12, R15
        MOV.W   R14, 0x2(R15)
//  146 
//  147   //配置通道为IO口功能
//  148   if(ch & 0x00ff)
        BIT.B   #0xff, R10
        JEQ     ??ADC_DeInit_9
//  149   {
//  150      GPIO_MultiBits_Init(P6,(uint8_t)(ch & 0x00ff),GPI);
        MOV.W   #0x1, R14
        PUSH.W  R13
          CFI CFA SP+24
        MOV.B   R10, 0(SP)
        POP.W   R13
          CFI CFA SP+22
        MOV.B   R13, R13
        MOV.B   #0x5, R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//  151   }
//  152   if(ch & 0xf000)
??ADC_DeInit_9:
        BIT.W   #0xf000, R10
        JEQ     ??ADC_DeInit_10
//  153   {
//  154      GPIO_MultiBits_Init(P7,(uint8_t)((ch & 0xf000)>>12),GPI);
        MOV.W   #0x1, R14
        MOV.W   R10, R13
        SWPB    R13
        AND.W   #0xff, R13
        RRA.W   R13
        RRA.W   R13
        RRA.W   R13
        RRA.W   R13
        MOV.B   #0x6, R12
          CFI FunCall GPIO_MultiBits_Init
        CALLA   #GPIO_MultiBits_Init
//  155   }
//  156   ADC12->ENC = BIT_SET;                                                        //该位必须在初始化完成后再置位
??ADC_DeInit_10:
        MOVA    &ADC12, R15
        BIS.W   #0x2, 0(R15)
//  157 }
        ADDA    #0x2, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//  158 /*******************************************************************************
//  159 *  函数名称：ADC_StartConv(void)
//  160 *  功能说明：启动一次ADC转换
//  161 *  参数说明：无
//  162 *  函数返回：无
//  163 *  注意    ：若有多个通道时，将会同时使多个通道转换一次，而不是对单一通道进行转换
//  164 *  使用示例：ADC_StartConv();   //所有通道启动一次ADC转换
//  165 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  166 void ADC_StartConv(void)
ADC_StartConv:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ADC_StartConv
          CFI NoCalls
//  167 {
//  168   ADC12->SC = BIT_RESET;
        MOVA    &ADC12, R15
        BIC.W   #0x1, 0(R15)
//  169   ADC12->SC = BIT_SET;        //启动采样转换
        MOVA    &ADC12, R15
        BIS.W   #0x1, 0(R15)
//  170 }
        RETA
          CFI EndBlock cfiBlock2
//  171 /*******************************************************************************
//  172 *  函数名称：ADC_WaitBusy()
//  173 *  功能说明：等待ADC不忙
//  174 *  参数说明：无
//  175 *  函数返回：无
//  176 *  注意    ：无
//  177 *  使用示例：ADC_WaitBusy()；  //等待转换完成
//  178 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  179 void   ADC_WaitBusy()
ADC_WaitBusy:
??ADC_WaitBusy_0:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ADC_WaitBusy
          CFI NoCalls
//  180 {
//  181   while(ADC12->ADBUSY == BIT_SET);//等待ADC不忙
        MOVA    &ADC12, R15
        BIT.W   #0x1, 0x2(R15)
        JC      ??ADC_WaitBusy_0
//  182 }
        RETA
          CFI EndBlock cfiBlock3
//  183 /*******************************************************************************
//  184 *  函数名称：ADC_ReadChanelValue(ADC_CHn ch)                           
//  185 *  功能说明：读取一个ADC通道的转换结果
//  186 *  参数说明：ADC_CHn ch ：要读取的通道
//  187 *  函数返回：该通道转换结果
//  188 *  使用示例：uint16 data = ADC_ReadChanelValue(ADC_CH0);  //读取ADC_CH0通道转换结果
//  189 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  190 uint16_t ADC_ReadChanelValue(ADC_CHn ch)                           
ADC_ReadChanelValue:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ADC_ReadChanelValue
//  191 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.W   R12, R10
//  192   return (ADC12->MEM[ADC_GetChanelNum(ch)]);                          //读取转换结果，读取后会自动清除对应标志位
        MOV.W   R10, R12
          CFI FunCall ADC_GetChanelNum
        CALLA   #ADC_GetChanelNum
        MOVA    &ADC12, R15
        SXT     R12
        ADDA    R12, R12
        MOVA    R12, R14
        ADDA    R14, R15
        MOV.W   0x20(R15), R12
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
//  193 }
          CFI EndBlock cfiBlock4
//  194 /*******************************************************************************
//  195 *  函数名称：ADC_ReadChanelOnce(ADC_CHn ch)
//  196 *  功能说明：转换并读取一个ADC通道的值
//  197 *  参数说明：ADC_CHn ch ：要转换并读取的通道
//  198 *  函数返回：该通道转换结果
//  199 *  使用示例：uint16 data = ADC_ReadChanelOnce(ADC_CH0);  //立即启动一次ADC转换并读取ADC_CH0通道转换结果
//  200 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  201 uint16_t ADC_ReadChanelOnce(ADC_CHn ch)
ADC_ReadChanelOnce:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ADC_ReadChanelOnce
//  202 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.W   R12, R10
//  203   ADC_StartConv();
          CFI FunCall ADC_StartConv
        CALLA   #ADC_StartConv
//  204   ADC_WaitBusy();
          CFI FunCall ADC_WaitBusy
        CALLA   #ADC_WaitBusy
//  205   return ADC_ReadChanelValue(ch);
        MOV.W   R10, R12
          CFI FunCall ADC_ReadChanelValue
        CALLA   #ADC_ReadChanelValue
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
//  206 }
          CFI EndBlock cfiBlock5
//  207 /*******************************************************************************
//  208 *  函数名称：ADC_ITConfig   (ADC_CHn ch,STATUS ITState)
//  209 *  功能说明：设置是否使能ADC某个通道的中断
//  210 *  参数说明：ADC_CHn ch ：要设置的通道
//  211              STATUS ITState ：中断是否使能
//  212 *  函数返回：无
//  213 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  214 void ADC_ITConfig   (ADC_CHn ch,STATUS ITState)
ADC_ITConfig:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ADC_ITConfig
//  215 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R11
        MOV.B   R13, R10
//  216   if(ITState != DISABLE)
        CMP.B   #0x0, R10
        JEQ     ??ADC_ITConfig_1
//  217   {
//  218     ADC12->IE |=  (1<<ADC_GetChanelNum(ch));                           //
        MOV.W   R11, R12
          CFI FunCall ADC_GetChanelNum
        CALLA   #ADC_GetChanelNum
        MOVA    &ADC12, R15
        MOV.W   #0x1, R14
        SUB.B   #0x1, R12
        JN      ??ADC_ITConfig_2
        RPT     R12
        RLAX.W  R14
??ADC_ITConfig_2:
        ADD.B   #0x1, R12
        BIS.W   R14, 0xc(R15)
        JMP     ??ADC_ITConfig_0
//  219   }
//  220   else
//  221   {
//  222     ADC12->IE &= ~(1<<ADC_GetChanelNum(ch));                           //
??ADC_ITConfig_1:
        MOV.W   R11, R12
          CFI FunCall ADC_GetChanelNum
        CALLA   #ADC_GetChanelNum
        MOVA    &ADC12, R15
        MOV.W   #0x1, R14
        SUB.B   #0x1, R12
        JN      ??ADC_ITConfig_3
        RPT     R12
        RLAX.W  R14
??ADC_ITConfig_3:
        ADD.B   #0x1, R12
        BIC.W   R14, 0xc(R15)
//  223   }
//  224 }
??ADC_ITConfig_0:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock6
//  225 /*******************************************************************************
//  226 *  函数名称：ADC_GetITStatus(ADC_CHn ch)
//  227 *  功能说明：获取某一通道中断标志状态
//  228 *  参数说明：ADC_CHn ch ：要读取的通道
//  229 *  函数返回：该通道中断状态标志是否置位（TRUE:置位 RESET:复位）
//  230 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  231 STATUS  ADC_GetITStatus(ADC_CHn ch)
ADC_GetITStatus:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ADC_GetITStatus
//  232 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R11
//  233   return ((ADC12->IFG & (1<<ADC_GetChanelNum(ch))) ? TRUE :FALSE);
        MOVA    &ADC12, R15
        MOV.W   0xa(R15), R10
        MOV.W   R11, R12
          CFI FunCall ADC_GetChanelNum
        CALLA   #ADC_GetChanelNum
        SUB.B   #0x1, R12
        JN      ??ADC_GetITStatus_0
        RPT     R12
        RRUX.W  R10
??ADC_GetITStatus_0:
        ADD.B   #0x1, R12
        PUSH.W  R12
          CFI CFA SP+14
        MOV.B   R10, 0(SP)
        POP.W   R12
          CFI CFA SP+12
        AND.B   #0x1, R12
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
//  234 }
          CFI EndBlock cfiBlock7
//  235  /*******************************************************************************
//  236 *  函数名称：ADC_ClearITPendingBit(ADC_CHn ch)
//  237 *  功能说明：清除某一通道中断标志位
//  238 *  参数说明：ADC_CHn ch ：要清除中断标志的通道
//  239 *  函数返回：无
//  240 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  241 void   ADC_ClearITPendingBit(ADC_CHn ch)
ADC_ClearITPendingBit:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ADC_ClearITPendingBit
//  242 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.W   R12, R10
//  243   ADC12->IFG &=~(1<<ADC_GetChanelNum(ch));
        MOV.W   R10, R12
          CFI FunCall ADC_GetChanelNum
        CALLA   #ADC_GetChanelNum
        MOVA    &ADC12, R15
        MOV.W   #0x1, R14
        SUB.B   #0x1, R12
        JN      ??ADC_ClearITPendingBit_0
        RPT     R12
        RLAX.W  R14
??ADC_ClearITPendingBit_0:
        ADD.B   #0x1, R12
        BIC.W   R14, 0xa(R15)
//  244 }
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock8
//  245 /*****************************************************************************
//  246 *  函数名称：ADC_GetChanelMemoryAddr(ADC_CHn ch)
//  247 *  功能说明：获取对应通道的结果寄存器地址（主要用于DMA时需要）
//  248 *  参数说明：ADC_CHn ch ：要获取结果地址的通道
//  249 *  函数返回：void * :转换结果地址
//  250 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  251 void * ADC_GetChanelMemoryAddr(ADC_CHn ch)
ADC_GetChanelMemoryAddr:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ADC_GetChanelMemoryAddr
//  252 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
//  253   return (void *)(&(ADC12->MEM[ADC_GetChanelNum(ch)]));
        MOVA    &ADC12, R11
        MOV.W   R10, R12
          CFI FunCall ADC_GetChanelNum
        CALLA   #ADC_GetChanelNum
        SXT     R12
        ADDA    R12, R12
        MOVA    R12, R15
        ADDA    R15, R11
        ADDA    #0x20, R11
        MOVA    R11, R12
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
//  254 }
          CFI EndBlock cfiBlock9
//  255 /*******************************************************************************
//  256 *  函数名称：ADC_GetChanelNum(ADC_CHn ch)
//  257 *  功能说明：获取对应通道的寄存器编号值
//  258 *  参数说明：ADC_CHn ch ：要获取编号的通道
//  259 *  函数返回：编号,失败返回-1
//  260 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  261 inline int8_t ADC_GetChanelNum(ADC_CHn ch)
ADC_GetChanelNum:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ADC_GetChanelNum
          CFI NoCalls
//  262 {
        MOV.W   R12, R15
//  263   for(uint8_t Chanel_Num=0; Chanel_Num < ADC_CH_NUM; Chanel_Num++)
        MOV.B   #0x0, R12
??ADC_GetChanelNum_0:
        CMP.B   #0x10, R12
        JC      ??ADC_GetChanelNum_3
//  264   {
//  265     if(ch == ADC_Channel_Bit[Chanel_Num])
        MOV.B   R12, R14
        ADDA    R14, R14
        CMPX.W  ADC_Channel_Bit(R14), R15
        JEQ     ??ADC_GetChanelNum_2
//  266     {
//  267       return Chanel_Num;
//  268     }
//  269   }
        ADD.B   #0x1, R12
        JMP     ??ADC_GetChanelNum_0
//  270   return -1;
??ADC_GetChanelNum_3:
        MOV.B   #0xff, R12
??ADC_GetChanelNum_2:
        RETA
//  271 }
          CFI EndBlock cfiBlock10

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 1 298 bytes in segment CODE
//     4 bytes in segment DATA16_AN
//     4 bytes in segment DATA20_C
//    35 bytes in segment DATA20_Z
// 
// 1 298 bytes of CODE  memory
//     4 bytes of CONST memory
//    35 bytes of DATA  memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
