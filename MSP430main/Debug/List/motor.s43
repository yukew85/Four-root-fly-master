///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          20/Nov/2018  15:34:09
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\motor.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW2547.tmp
//        (D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\motor.c
//        -D DEBUG -D RAM_VECTOR -lA
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List
//        -o
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllff.h -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\System\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\User\USER\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MATH\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HAL\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\src\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Communication\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Control\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\DataBase\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\GCS\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\MidWare\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\
//        -I
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\driverlib\inc\
//        --core=430X --data_model=large -On --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\Debug\List\motor.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME motor

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC Motor_Init
        PUBLIC UpdateMotor
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN Timer_A_setCompareValue
        EXTERN GPIO_setAsPeripheralModuleFunctionOutputPin
        EXTERN Timer_A_outputPWM

// D:\F150-T401\F150-T401_Experiment_Code\研发修改目录\附件目录\2.源码\1.飞控源码\HardWare\motor.c
//    1 /**
//    2   ******************************************************************************
//    3   * Copyright (c) 2018,北京中科浩电科技有限公司
//    4   * All rights reserved.
//    5   * 文件名称：motor.c
//    6   * 摘    要：
//    7   *
//    8   * 当前版本：V1.0
//    9   * 作    者：北京中科浩电科技有限公司研发部 
//   10   * 完成日期：    
//   11   * 修改说明：
//   12   * 
//   13   *
//   14   * 历史版本：
//   15   *
//   16   *
//   17   *******************************************************************************/
//   18 
//   19 /*==============================================================================
//   20                          ##### How to use this driver #####
//   21 ==============================================================================
//   22 电机驱动调用方式如下：
//   23 1.调用函数UpdateMotor直接驱动电机；
//   24 电机PWM初始化已经在main函数中完成。
//   25 
//   26 
//   27 */
//   28 //外部文件引用
//   29 #include "motor.h"
//   30 #include "myMath.h"
//   31 
//   32 //宏定义区
//   33 
//   34 
//   35 //Extern引用
//   36 
//   37 
//   38 //私有函数区
//   39 
//   40 
//   41 //私有变量区
//   42 
//   43 
//   44 /******************************************************************************
//   45   * 函数名称：UpdateMotor
//   46   * 函数描述：驱动电机转动，电机输出取值0-1000
//   47   * 输    入：
//   48   * int16_t M1:电机1输出取值
//   49   * int16_t M2:电机2输出取值
//   50   * int16_t M3:电机3输出取值
//   51   * int16_t M4:电机4输出取值
//   52   * 输    出：void
//   53   * 返    回：void
//   54   * 备    注：null
//   55   *    
//   56   *
//   57 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   58 void UpdateMotor(int16_t M1, int16_t M2, int16_t M3, int16_t M4)
UpdateMotor:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function UpdateMotor
//   59 {
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.W   R12, R11
        MOV.W   R13, R8
        MOV.W   R14, R9
        MOV.W   R15, R10
//   60     M1 = LIMIT(M1, 1, 999);   //电机取值限幅 0-999
        CMP.W   #0x1, R11
        JGE     ??UpdateMotor_4
        MOV.W   #0x1, R11
        JMP     ??UpdateMotor_0
??UpdateMotor_4:
        CMP.W   #0x3e8, R11
        JL      ??UpdateMotor_0
        MOV.W   #0x3e7, R11
//   61     M2 = LIMIT(M2, 1, 999); 
??UpdateMotor_0:
        CMP.W   #0x1, R8
        JGE     ??UpdateMotor_5
        MOV.W   #0x1, R8
        JMP     ??UpdateMotor_1
??UpdateMotor_5:
        CMP.W   #0x3e8, R8
        JL      ??UpdateMotor_1
        MOV.W   #0x3e7, R8
//   62     M3 = LIMIT(M3, 1, 999);
??UpdateMotor_1:
        CMP.W   #0x1, R9
        JGE     ??UpdateMotor_6
        MOV.W   #0x1, R9
        JMP     ??UpdateMotor_2
??UpdateMotor_6:
        CMP.W   #0x3e8, R9
        JL      ??UpdateMotor_2
        MOV.W   #0x3e7, R9
//   63     M4 = LIMIT(M4, 1, 999);
??UpdateMotor_2:
        CMP.W   #0x1, R10
        JGE     ??UpdateMotor_7
        MOV.W   #0x1, R10
        JMP     ??UpdateMotor_3
??UpdateMotor_7:
        CMP.W   #0x3e8, R10
        JL      ??UpdateMotor_3
        MOV.W   #0x3e7, R10
//   64     
//   65     Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_1, M1);
??UpdateMotor_3:
        MOV.W   R11, R14
        MOV.W   #0x4, R13
        MOV.W   #0x340, R12
          CFI FunCall Timer_A_setCompareValue
        CALLA   #Timer_A_setCompareValue
//   66     Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_2, M2);
        MOV.W   R8, R14
        MOV.W   #0x6, R13
        MOV.W   #0x340, R12
          CFI FunCall Timer_A_setCompareValue
        CALLA   #Timer_A_setCompareValue
//   67     Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_3, M3);
        MOV.W   R9, R14
        MOV.W   #0x8, R13
        MOV.W   #0x340, R12
          CFI FunCall Timer_A_setCompareValue
        CALLA   #Timer_A_setCompareValue
//   68     Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_4, M4);
        MOV.W   R10, R14
        MOV.W   #0xa, R13
        MOV.W   #0x340, R12
          CFI FunCall Timer_A_setCompareValue
        CALLA   #Timer_A_setCompareValue
//   69 }
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   70 
//   71 /******************************************************************************
//   72   * 函数名称：Motor_Init
//   73   * 函数描述：初始化电机
//   74   * 输    入：void
//   75   * 输    出：void
//   76   * 返    回：void
//   77   * 备    注：null
//   78   *    
//   79   *
//   80 ******************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   81 void Motor_Init()
Motor_Init:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function Motor_Init
//   82 {
        SUBA    #0xc, SP
          CFI CFA SP+16
//   83     GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P1,GPIO_PIN2);
        MOV.W   #0x4, R13
        MOV.B   #0x1, R12
          CFI FunCall GPIO_setAsPeripheralModuleFunctionOutputPin
        CALLA   #GPIO_setAsPeripheralModuleFunctionOutputPin
//   84     GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P1,GPIO_PIN3);
        MOV.W   #0x8, R13
        MOV.B   #0x1, R12
          CFI FunCall GPIO_setAsPeripheralModuleFunctionOutputPin
        CALLA   #GPIO_setAsPeripheralModuleFunctionOutputPin
//   85     GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P1,GPIO_PIN4);
        MOV.W   #0x10, R13
        MOV.B   #0x1, R12
          CFI FunCall GPIO_setAsPeripheralModuleFunctionOutputPin
        CALLA   #GPIO_setAsPeripheralModuleFunctionOutputPin
//   86     GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P1,GPIO_PIN5);
        MOV.W   #0x20, R13
        MOV.B   #0x1, R12
          CFI FunCall GPIO_setAsPeripheralModuleFunctionOutputPin
        CALLA   #GPIO_setAsPeripheralModuleFunctionOutputPin
//   87     
//   88     Timer_A_outputPWMParam param = {0};
        MOV.W   #0x0, 0(SP)
        MOV.W   #0x0, 0x2(SP)
        MOV.W   #0x0, 0x4(SP)
        MOV.W   #0x0, 0x6(SP)
        MOV.W   #0x0, 0x8(SP)
        MOV.W   #0x0, 0xa(SP)
//   89     param.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
        MOV.W   #0x200, 0(SP)
//   90     param.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_1;
        MOV.W   #0x0, 0x2(SP)
//   91     param.timerPeriod = 1000;
        MOV.W   #0x3e8, 0x4(SP)
//   92     param.compareOutputMode = TIMER_A_OUTPUTMODE_RESET_SET;
        MOV.W   #0xe0, 0x8(SP)
//   93     param.dutyCycle = 0;
        MOV.W   #0x0, 0xa(SP)
//   94     
//   95     param.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_1;
        MOV.W   #0x4, 0x6(SP)
//   96     Timer_A_outputPWM(TIMER_A0_BASE, &param);
        MOVA    SP, R13
        MOV.W   #0x340, R12
          CFI FunCall Timer_A_outputPWM
        CALLA   #Timer_A_outputPWM
//   97     
//   98     param.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_2;
        MOV.W   #0x6, 0x6(SP)
//   99     Timer_A_outputPWM(TIMER_A0_BASE, &param);
        MOVA    SP, R13
        MOV.W   #0x340, R12
          CFI FunCall Timer_A_outputPWM
        CALLA   #Timer_A_outputPWM
//  100     
//  101     param.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_3;
        MOV.W   #0x8, 0x6(SP)
//  102     Timer_A_outputPWM(TIMER_A0_BASE, &param);
        MOVA    SP, R13
        MOV.W   #0x340, R12
          CFI FunCall Timer_A_outputPWM
        CALLA   #Timer_A_outputPWM
//  103     
//  104     param.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_4;
        MOV.W   #0xa, 0x6(SP)
//  105     Timer_A_outputPWM(TIMER_A0_BASE, &param);
        MOVA    SP, R13
        MOV.W   #0x340, R12
          CFI FunCall Timer_A_outputPWM
        CALLA   #Timer_A_outputPWM
//  106 }
        ADDA    #0xc, SP
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
        DATA16
        DC16 0, 0, 0, 0, 0, 0

        END
//  107 
//  108 /******************* (C) 版权所有 2018 北京中科浩电科技有限公司 *******************/
// 
// 294 bytes in segment CODE
//  12 bytes in segment DATA20_C
// 
// 294 bytes of CODE  memory
//  12 bytes of CONST memory
//
//Errors: none
//Warnings: none
