///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          26/Sep/2018  16:44:42
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\msp430f5529_gpio.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW55FA.tmp
//        ("C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\msp430f5529_gpio.c" -D NDEBUG -D RAM_VECTOR -lC
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Release\List" -lA
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Release\List" -o
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Release\Obj" -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllfn.h -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\inc\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\USB\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\USB\USB_config\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\USB\USB_User\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\srcUSB\USB_API\USB_CDC_API\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\USB\USB_API\USB_HID_API\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\USB\USB_API\USB_MSC_API\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\KEY\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\LED\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\12864\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\oled\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\mpu6050\inc\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\mpu6050\src\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\nokia5110\inc\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\nokia5110\src\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\LQ_1.8_TFT\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\LCD_API\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\2.2TFT\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\delay\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\System\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\System\inc\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\System\src\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\User\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\User\USER\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\UCOSII\CONFIG\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\uCOSII\App\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\uCOSII\CONFIHG\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\uCOSII\PORT\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\UCOSII\CORE\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\FatFs\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\FatFs\option\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\src\"
//        -I "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\nrf24l01\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\MATH\" --core=430X --data_model=large -Oh --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm -DNDEBUG
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Release\List\msp430f5529_gpio.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME msp430f5529_gpio

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC GPIOX
        PUBLIC GPIO_ClearITPendingBit
        PUBLIC GPIO_GetITStatus
        PUBLIC GPIO_ITConfig
        PUBLIC GPIO_MultiBits_Init
        PUBLIC GPIO_ReadBit
        PUBLIC GPIO_ReadByte
        PUBLIC GPIO_ResetBits
        PUBLIC GPIO_SetBits
        PUBLIC GPIO_TurnBit
        PUBLIC GPIO_WriteBit
        PUBLIC GPIO_WriteByte
        PUBWEAK _A_PAIN_L
        PUBWEAK _A_PBIN_L
        PUBWEAK _A_PCIN_L
        PUBWEAK _A_PDIN_L
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
// C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\Drivers\src\msp430f5529_gpio.c
//    1 #include "msp430f5529_gpio.h"

        ASEGN DATA16_AN:DATA:NOROOT,0200H
// union <unnamed> __data16 _A_PAIN_L
_A_PAIN_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0220H
// union <unnamed> __data16 _A_PBIN_L
_A_PBIN_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0240H
// union <unnamed> __data16 _A_PCIN_L
_A_PCIN_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0260H
// union <unnamed> __data16 _A_PDIN_L
_A_PDIN_L:
        DS8 2
//    2 
//    3 //port，pin,BITs获取宏定义,由此可知，当使用16位IO定义时由于计算port,pin值会降低执行效率
//    4 #ifdef GPIO_PORT_SIZE_WORD
//    5 #define GET_PORT(portn)        ((((portn) >= PORTA)&&((portn) <= PORTD)) ? ((PORTn)((portn) - PORTA)) : ((PORTn)((portn - PORT1) / 2)))
//    6 #define GET_PIN(portn,pin)     ((((portn) >= PORTA)&&((portn) <= PORTD)) ? (pin)  : ((((portn - PORT1)%2) == 0) ? (pin)  : ((pin)+8u)))
//    7 #define GET_BITs(portn,BITs)   ((((portn) >= PORTA)&&((portn) <= PORTD)) ? (BITs) : ((((portn - PORT1)%2) == 0) ? (BITs) : (((BITs)<<8u))))
//    8 #else
//    9 #define GET_PORT(portn)        (portn)
//   10 #define GET_PIN(portn,pin)     (pin)
//   11 #define GET_BITs(portn,BITs)   (BITs)
//   12 #endif
//   13 
//   14 #ifdef GPIO_PORT_SIZE_WORD
//   15 const GPIO_MemMapPtr GPIOX[] ={PA_BASE_PTR,PB_BASE_PTR,PC_BASE_PTR,PD_BASE_PTR}; 
//   16 #else

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//   17 const GPIO_MemMapPtr GPIOX[] ={P1_BASE_PTR,P2_BASE_PTR,P3_BASE_PTR,P4_BASE_PTR,P5_BASE_PTR,P6_BASE_PTR,P7_BASE_PTR,P8_BASE_PTR}; 
GPIOX:
        DATA32
        DC32 _A_PAIN_L, _A_PAIN_L + 1H, _A_PBIN_L, _A_PBIN_L + 1H, _A_PCIN_L
        DC32 _A_PCIN_L + 1H, _A_PDIN_L, _A_PDIN_L + 1H
//   18 #endif
//   19 /*********************************************************************************
//   20 函数名：IO口初始化
//   21 入口参数：PORTn portn    对应IO端口
//   22           uint16_t pin   对应IO引脚位置
//   23           uint16_t config     
//   24           对应IO口配置 {
//   25                             GPI                   ,// 输入方向
//   26                             GPO                   ,// 输出方向
//   27                             LDS                   ,// 低驱动能力
//   28                             HDS                   ,// 高驱动能力
//   29                             PULL_DOWN             ,// 下拉
//   30                             PULL_UP               ,// 上拉
//   31                             IRQ_RISING            ,// 上升沿触发中断
//   32                             IRQ_FALLING           ,// 下降沿触发中断
//   33                             SEL                   ,// 第二复用功能
//   34                         }  
//   35 使用例程:GPIO_MultiBits_Init(P2,BIT3,GPO|HDS);   //初始化P2.3为输出放向，高驱动能力
//   36 **********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   37 void GPIO_MultiBits_Init(PORTn portn,uint16_t BITs,uint16_t config)
GPIO_MultiBits_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function GPIO_MultiBits_Init
          CFI NoCalls
//   38 {
        MOV.B   R12, R15
//   39   //获取port,pin
//   40   PORTn    port = GET_PORT(portn);
//   41   BITs = GET_BITs(portn,BITs);
//   42   
//   43   //配置IO口
//   44   if((config & SEL) == SEL)
        RLAM.A  #0x2, R15
        MOVX.A  GPIOX(R15), R15
        MOV.B   R13, R12
        XOR.B   #0xff, R12
        BIT.W   #0x100, R14
        JEQ     ??GPIO_MultiBits_Init_2
//   45   {
//   46     GPIOX[port]->SEL |= BITs;                    //选择为第二功能
        BIS.B   R13, 0xa(R15)
        JMP     ??GPIO_MultiBits_Init_6
//   47   }
//   48   else
//   49   {
//   50     GPIOX[port]->SEL &=~BITs;                    //选择为IO口功能
??GPIO_MultiBits_Init_2:
        AND.B   R12, 0xa(R15)
//   51   }
//   52 
//   53   if((config & GPO) == GPO)              //判断方向
??GPIO_MultiBits_Init_6:
        BIT.W   #0x2, R14
        JEQ     ??GPIO_MultiBits_Init_1
//   54   {
//   55     GPIOX[port]->PDIR |= BITs;       //设置为输出方向
        BIS.B   R13, 0x4(R15)
//   56     
//   57     if((config&HDS) == HDS)            //判断驱动能力
        BIT.W   #0x8, R14
        JEQ     ??GPIO_MultiBits_Init_0
//   58     {
//   59       GPIOX[port]->DS |= BITs;          //设为高驱动能力
        BIS.B   R13, 0x8(R15)
        RETA
//   60     }
//   61     else
//   62     {
//   63       GPIOX[port]->DS &=~BITs;          //设为低驱动能力
??GPIO_MultiBits_Init_0:
        AND.B   R12, 0x8(R15)
        RETA
//   64     }
//   65   }
//   66   else   //如果是输入方向
//   67   {
//   68     GPIOX[port]->PDIR &=~BITs;      //设置为输入方向
??GPIO_MultiBits_Init_1:
        AND.B   R12, 0x4(R15)
//   69     
//   70     if((config & PULL_DOWN) == PULL_DOWN) //判断是否开启下拉
        BIT.W   #0x10, R14
        JEQ     ??GPIO_MultiBits_Init_4
//   71     {
//   72       GPIOX[port]->REN  |= BITs;             //开启上\下拉
        BIS.B   R13, 0x6(R15)
//   73       GPIOX[port]->POUT &=~BITs;             //设置为下拉
        AND.B   R12, 0x2(R15)
        JMP     ??GPIO_MultiBits_Init_7
//   74     }
//   75     else if((config & PULL_UP) == PULL_UP)//判断是否开启上拉
??GPIO_MultiBits_Init_4:
        BIT.W   #0x20, R14
        JEQ     ??GPIO_MultiBits_Init_5
//   76     {
//   77       GPIOX[port]->REN  |= BITs;             //开启上\下拉
        BIS.B   R13, 0x6(R15)
//   78       GPIOX[port]->POUT |= BITs;             //设置为上拉
        BIS.B   R13, 0x2(R15)
        JMP     ??GPIO_MultiBits_Init_7
//   79     }
//   80     else
//   81     {
//   82       GPIOX[port]->REN &=~BITs;              //关闭上\下拉
??GPIO_MultiBits_Init_5:
        AND.B   R12, 0x6(R15)
//   83     }
//   84     
//   85     if((portn == PORT1)||(portn == PORT2)
//   86 #ifdef  GPIO_PORT_SIZE_WORD
//   87        ||(portn == PORTA)
//   88 #endif       
//   89        );                 //小于等于P2则可能会配置IO口中断
//   90     {
//   91       GPIOX[port]->IE &=~BITs;                  //关闭中断
??GPIO_MultiBits_Init_7:
        AND.B   R12, 0x1a(R15)
//   92       if((config & IRQ_RISING) == IRQ_RISING)       //如果有上升沿
        BIT.W   #0x40, R14
        JEQ     ??GPIO_MultiBits_Init_3
//   93       {
//   94         GPIOX[port]->IES |= BITs;                  //设为上升沿
        BIS.B   R13, 0x18(R15)
        RETA
//   95       }
//   96       else 
//   97       {
//   98         GPIOX[port]->IES &=~BITs ;                 //设为下降沿
??GPIO_MultiBits_Init_3:
        AND.B   R12, 0x18(R15)
//   99       } 
//  100     }
//  101   }
//  102 }
        RETA
          CFI EndBlock cfiBlock0
//  103 /*******************************************************************************
//  104 *  函数名称： GPIO_SetBits  (PORTn portn, uint16_t BITs)
//  105 *  功能说明：设置IO口输出为高电平
//  106 *  参数说明： PORTn portn     对应IO端口
//  107               uint16_t BITs   对应IO引脚位置
//  108 *  函数返回：无
//  109 *  使用示例： GPIO_SetBits  (PORT1, GPIO_Pin_0|GPIO_Pin_1); //P1.0,P1.1输出高电平
//  110 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  111 void     GPIO_SetBits  (PORTn portn, uint16_t BITs)
GPIO_SetBits:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function GPIO_SetBits
          CFI NoCalls
//  112 {
//  113   if((portn <= PORT8)) 
        CMP.B   #0x8, R12
//  114     BITs = BITs & 0xFF;
//  115   //获取port,pin
//  116   PORTn port = GET_PORT(portn);
//  117   BITs = GET_BITs(portn,BITs);
//  118   //IO口操作
//  119   GPIOX[port]->POUT |= BITs;            //
        CALLA   #?Subroutine0
??CrossCallReturnLabel_0:
        BIS.B   R13, 0x2(R15)
//  120 }
        RETA
          CFI EndBlock cfiBlock1

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine0:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function GPIO_SetBits
          CFI Conditional ??CrossCallReturnLabel_0
          CFI CFA SP+8
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function GPIO_ResetBits
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond3) CFA SP+8
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function GPIO_ReadBit
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond4) CFA SP+8
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function GPIO_WriteByte
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond5) CFA SP+8
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function GPIO_ReadByte
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond6) CFA SP+8
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function GPIO_GetITStatus
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond7) CFA SP+8
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV.B   R12, R12
        RLAM.A  #0x2, R12
        MOVX.A  GPIOX(R12), R15
        RETA
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
//  121 /*******************************************************************************
//  122 *  函数名称： GPIO_ResetBits(PORTn portn, uint16_t BITs)
//  123 *  功能说明：设置IO口输出为低电平
//  124 *  参数说明： PORTn portn     对应IO端口
//  125               uint16_t BITs   对应IO引脚位置
//  126 *  函数返回：无
//  127 *  使用示例：GPIO_ResetBits  (PORT1, GPIO_Pin_0|GPIO_Pin_1); //P1.0,P1.1输出低电平
//  128 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  129 void     GPIO_ResetBits(PORTn portn, uint16_t BITs)
GPIO_ResetBits:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function GPIO_ResetBits
          CFI NoCalls
//  130 {
//  131   //获取port,pin
//  132   PORTn port = GET_PORT(portn);
//  133   BITs = GET_BITs(portn,BITs);
//  134   //IO口操作
//  135   GPIOX[port]->POUT &=~BITs;    
        CALLA   #?Subroutine0
??CrossCallReturnLabel_1:
        BIC.B   R13, 0x2(R15)
//  136 }
        RETA
          CFI EndBlock cfiBlock9
//  137 /*******************************************************************************
//  138 函数名称：IO口一位输出设置
//  139 入口参数：PORTn portn    对应IO端口
//  140           uint8_t pin     对应IO引脚位置
//  141           STATUS level    设置输出电平（SET ：高电平  RESET：低电平）
//  142 *  使用示例：
//  143 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  144 void GPIO_WriteBit(PORTn portn,uint8_t pin,STATUS level)
GPIO_WriteBit:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function GPIO_WriteBit
          CFI NoCalls
//  145 {
//  146   //获取port,pin
//  147   PORTn   port = GET_PORT(portn);
//  148   uint16_t BIT = (1u << GET_PIN(portn,pin));
        CALLA   #?Subroutine2
//  149   //IO口操作
//  150   if(level != RESET)
??CrossCallReturnLabel_6:
        CMP.B   #0x0, R14
        JEQ     ??GPIO_WriteBit_1
//  151   {
//  152     GPIOX[port]->POUT |= BIT;            //
        BIS.B   R15, 0x2(R13)
        RETA
//  153   }
//  154   else 
//  155   {
//  156     GPIOX[port]->POUT &=~BIT;            //
??GPIO_WriteBit_1:
        BIC.B   R15, 0x2(R13)
//  157   }
//  158 }
        RETA
          CFI EndBlock cfiBlock10

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine2:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function GPIO_WriteBit
          CFI Conditional ??CrossCallReturnLabel_6
          CFI CFA SP+8
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function GPIO_ITConfig
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond12) CFA SP+8
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        CALLA   #?Subroutine4
??CrossCallReturnLabel_12:
        MOV.B   R12, R12
        RLAM.A  #0x2, R12
        MOVX.A  GPIOX(R12), R13
        RETA
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13

        RSEG `CODE`:CODE:NOROOT(1)
?Subroutine1:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function GPIO_TurnBit
          CFI Conditional ??CrossCallReturnLabel_10
          CFI CFA SP+8
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function GPIO_ClearITPendingBit
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond15) CFA SP+8
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOV.B   R12, R12
        RLAM.A  #0x2, R12
        MOVX.A  GPIOX(R12), R14
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
        REQUIRE ?Subroutine4
        // Fall through to label ?Subroutine4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine4:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function GPIO_WriteBit
          CFI Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_6
          CFI CFA SP+12
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function GPIO_ITConfig
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_12, ??CrossCallReturnLabel_7
          CFI (cfiCond18) CFA SP+12
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function GPIO_ReadBit
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_8
          CFI (cfiCond19) CFA SP+12
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function GPIO_GetITStatus
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_9
          CFI (cfiCond20) CFA SP+12
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function GPIO_TurnBit
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond21) CFA SP+8
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function GPIO_ClearITPendingBit
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond22) CFA SP+8
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV.W   #0x1, R15
        SUB.B   #0x1, R13
        JN      ??GPIO_WriteBit_0
        RPT     R13
        RLAX.W  R15
??GPIO_WriteBit_0:
        RETA
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23
//  159 /*******************************************************************************
//  160 函数名称：IO口一位输入读取
//  161 入口参数：PORTn portn    对应IO端口
//  162           uint8_t pin    对应IO引脚位置
//  163 返回参数：STATUS         输入电平（SET ：高电平  RESET：低电平）
//  164 *  使用示例：
//  165 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  166 STATUS GPIO_ReadBit(PORTn portn,uint8_t pin)
GPIO_ReadBit:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function GPIO_ReadBit
          CFI NoCalls
//  167 {
//  168   //获取port,pin
//  169   PORTn   port = GET_PORT(portn);
//  170   uint16_t BIT = (1u << GET_PIN(portn,pin));
//  171   //IO口操作
//  172   return ((GPIOX[port]->IN & BIT) ? BIT_SET : RESET);
        CALLA   #?Subroutine0
??CrossCallReturnLabel_2:
        MOV.B   @R15, R14
        CALLA   #?Subroutine3
??CrossCallReturnLabel_8:
        JNE     ??GPIO_ReadBit_1
        MOV.B   #0x0, R12
        RETA
??GPIO_ReadBit_1:
        MOV.B   #0x1, R12
        RETA
//  173 }
          CFI EndBlock cfiBlock24

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine3:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function GPIO_ReadBit
          CFI Conditional ??CrossCallReturnLabel_8
          CFI CFA SP+8
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function GPIO_GetITStatus
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond26) CFA SP+8
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        CALLA   #?Subroutine4
??CrossCallReturnLabel_13:
        BIT.B   R15, R14
        RETA
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27
//  174 /*******************************************************************************
//  175 函数名称：IO口一位输出翻转
//  176 入口参数：PORTn portn    对应IO端口
//  177           uint8_t pin     对应IO引脚位置
//  178 *  使用示例：
//  179 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  180 void GPIO_TurnBit  (PORTn portn,uint8_t pin)
GPIO_TurnBit:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function GPIO_TurnBit
          CFI NoCalls
//  181 {
//  182   //获取port,pin
//  183   PORTn   port = GET_PORT(portn);
//  184   uint16_t BIT = (1u << GET_PIN(portn,pin));
//  185   //IO口操作
//  186   GPIOX[port]->POUT ^= BIT;
        CALLA   #?Subroutine1
??CrossCallReturnLabel_10:
        XOR.B   R15, 0x2(R14)
//  187 }
        RETA
          CFI EndBlock cfiBlock28
//  188 /*******************************************************************************
//  189 函数名称：IO口8位输出设置
//  190 入口参数：PORTn portn    对应IO端口,必须取PORT1-PORT8
//  191           uint8_t level   设置8位输出电平
//  192 *  使用示例：
//  193 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  194 void GPIO_WriteByte(PORTn portn,uint8_t value)
GPIO_WriteByte:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function GPIO_WriteByte
          CFI NoCalls
//  195 {
//  196 #ifdef GPIO_PORT_SIZE_WORD
//  197   
//  198   ASSERT((portn <= PORT8),
//  199          "GPIO_WriteByte",
//  200          "端口设置不合理！"); //断言检测输入参数
//  201   
//  202   PORTn port = GET_PORT(portn);
//  203   
//  204   if((portn%2) == 0) //如果portn是基数时
//  205   {
//  206     GPIOX[port]->POUT = GPIOX[port]->POUT & 0xFF00;
//  207     GPIOX[port]->POUT |= value;
//  208   }
//  209   else
//  210   {
//  211     GPIOX[port]->POUT = GPIOX[port]->POUT & 0x00FF;
//  212     GPIOX[port]->POUT |= ((uint16_t)value<<8u);
//  213   }
//  214 #else
//  215   GPIOX[portn]->POUT = value;            //
        CALLA   #?Subroutine0
??CrossCallReturnLabel_3:
        MOV.B   R13, 0x2(R15)
//  216 #endif
//  217 }
        RETA
          CFI EndBlock cfiBlock29
//  218 /*******************************************************************************
//  219 函数名称：IO口8位输入读取
//  220 入口参数：PORTn portn    对应IO端口,必须取PORT1-PORT8
//  221 返回参数：uint8 8位输入电平
//  222 *  使用示例：
//  223 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  224 uint8_t GPIO_ReadByte(PORTn portn)
GPIO_ReadByte:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function GPIO_ReadByte
          CFI NoCalls
//  225 {
//  226 #ifdef GPIO_PORT_SIZE_WORD
//  227   //如果输入参数时P1-P8时
//  228   ASSERT((portn <= PORT8),
//  229          "GPIO_ReadByte",
//  230          "端口设置不合理！"); //断言检测输入参数
//  231   
//  232   PORTn port = GET_PORT(portn);
//  233   
//  234   if((portn%2) == 0) //如果portn是基数时
//  235   {
//  236     return ((GPIOX[port]->IN) & 0x00FF);
//  237   }
//  238   else
//  239   {
//  240     return ((GPIOX[port]->IN) >> 8u);
//  241   }
//  242 #else
//  243   return (GPIOX[portn]->IN);            //
        CALLA   #?Subroutine0
??CrossCallReturnLabel_4:
        MOV.B   @R15, R12
        RETA
//  244 #endif
//  245 }
          CFI EndBlock cfiBlock30
//  246 #ifdef GPIO_PORT_SIZE_WORD
//  247 /*******************************************************************************
//  248 函数名称：IO口16位输出设置
//  249 入口参数：PORTn portn     对应IO端口,必须取PORTA-PORTD
//  250           uint16_t level   设置16位输出电平
//  251 *  使用示例：
//  252 ********************************************************************************/
//  253 void    GPIO_WriteWord(PORTn portn, uint16_t value) 
//  254 {
//  255   //获取port,pin
//  256   PORTn   port = GET_PORT(portn);
//  257   
//  258   GPIOX[port]->POUT = value;            //
//  259 }
//  260 /*******************************************************************************
//  261 函数名称：IO口16位输入读取
//  262 入口参数：PORTn portn    对应IO端口,必须取PORTA-PORTD
//  263 返回参数：uint16 16位输入电平
//  264 *  使用示例：
//  265 ********************************************************************************/
//  266 uint16_t GPIO_ReadWord(PORTn portn)
//  267 {
//  268   //获取port,pin
//  269   PORTn   port = GET_PORT(portn);
//  270   
//  271   return (GPIOX[port]->IN);
//  272 }
//  273 #endif
//  274 /*******************************************************************************
//  275 函数名称：设置是否允许IO口中断
//  276 入口参数：PORTn portn    对应IO端口
//  277           uint8_t pin     对应IO引脚位置
//  278 *  使用示例：
//  279 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  280 void GPIO_ITConfig(PORTn portn,uint8_t pin,STATUS ITState)
GPIO_ITConfig:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function GPIO_ITConfig
          CFI NoCalls
//  281 {
//  282 //  ASSERT(
//  283 //#ifdef  GPIO_PORT_SIZE_WORD
//  284 //         (portn == PORTA)||
//  285 //#endif
//  286 //         (portn == PORT1)||(portn == PORT2),
//  287 //         "GPIO_ITConfig",
//  288 //         "端口设置不合理！");                 //断言检测输入参数
//  289 
//  290   //获取port,pin
//  291   PORTn   port = GET_PORT(portn);
//  292   uint16_t BIT = (1u<<GET_PIN(portn,pin));
        CALLA   #?Subroutine2
//  293   //IO口操作
//  294   
//  295   if(ITState != DISABLE)
??CrossCallReturnLabel_7:
        MOV.B   R15, R12
        XOR.B   #0xff, R12
        CMP.B   #0x0, R14
        JEQ     ??GPIO_ITConfig_1
//  296   {
//  297     GPIOX[port]->IFG &=~BIT;                  //清中断标志
        AND.B   R12, 0x1c(R13)
//  298     GPIOX[port]->IE |= BIT;
        BIS.B   R15, 0x1a(R13)
        RETA
//  299   }
//  300   else
//  301   {
//  302     GPIOX[port]->IE &=~BIT;
??GPIO_ITConfig_1:
        AND.B   R12, 0x1a(R13)
//  303   }
//  304 }
        RETA
          CFI EndBlock cfiBlock31
//  305 /*******************************************************************************
//  306 函数名称：获取某一位端口中断标志
//  307 入口参数：PORTn portn    对应IO端口
//  308           uint8_t pin     对应IO引脚位置
//  309 *  使用示例：
//  310 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  311 STATUS GPIO_GetITStatus(PORTn portn,uint8_t pin)
GPIO_GetITStatus:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function GPIO_GetITStatus
          CFI NoCalls
//  312 {
//  313   //获取port,pin
//  314   PORTn   port = GET_PORT(portn);
//  315   uint16_t BIT = (1u<<GET_PIN(portn,pin));
//  316   //IO口操作
//  317   return ((GPIOX[port]->IFG & BIT) ? TRUE : FALSE);
        CALLA   #?Subroutine0
??CrossCallReturnLabel_5:
        MOV.B   0x1c(R15), R14
        CALLA   #?Subroutine3
??CrossCallReturnLabel_9:
        JNE     ??GPIO_GetITStatus_1
        MOV.B   #0x0, R12
        RETA
??GPIO_GetITStatus_1:
        MOV.B   #0x1, R12
        RETA
//  318 }
          CFI EndBlock cfiBlock32
//  319 /*******************************************************************************
//  320 函数名称：清除8位中断标志
//  321 入口参数：PORTn portn    对应IO端口
//  322           uint8_t pin     对应IO引脚位置
//  323 *  使用示例：
//  324 ********************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  325 void  GPIO_ClearITPendingBit(PORTn portn,uint8_t pin)
GPIO_ClearITPendingBit:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function GPIO_ClearITPendingBit
          CFI NoCalls
//  326 {
//  327   //获取port,pin
//  328   PORTn   port = GET_PORT(portn);
//  329   uint16_t BIT = (1u<<GET_PIN(portn,pin));
//  330   //IO口操作
//  331   GPIOX[port]->IFG &=~BIT;
        CALLA   #?Subroutine1
??CrossCallReturnLabel_11:
        BIC.B   R15, 0x1c(R14)
//  332 }
        RETA
          CFI EndBlock cfiBlock33

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 324 bytes in segment CODE
//   8 bytes in segment DATA16_AN
//  32 bytes in segment DATA20_C
// 
// 324 bytes of CODE  memory
//  32 bytes of CONST memory
//   0 bytes of DATA  memory (+ 8 bytes shared)
//
//Errors: none
//Warnings: none
