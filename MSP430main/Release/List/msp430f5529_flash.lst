###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           26/Sep/2018  16:44:42
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  large
#    __code_model  =  large
#    Source file   =  
#        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Drivers\src\msp430f5529_flash.c
#    Command line  =  
#        -f C:\Users\颜子楠\AppData\Local\Temp\EW559B.tmp
#        ("C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Drivers\src\msp430f5529_flash.c" -D NDEBUG -D RAM_VECTOR -lC
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Release\List" -lA
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Release\List" -o
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Release\Obj" -D__MSP430F5529__ -e --double=32 --dlib_config
#        D:\IAR\430\lib\dlib\dl430xllfn.h -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Drivers\inc\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Drivers\src\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Drivers\src\USB\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Drivers\src\USB\USB_config\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Drivers\src\USB\USB_User\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Drivers\srcUSB\USB_API\USB_CDC_API\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Drivers\src\USB\USB_API\USB_HID_API\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Drivers\src\USB\USB_API\USB_MSC_API\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\KEY\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\LED\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\12864\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\oled\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\mpu6050\inc\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\mpu6050\src\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\nokia5110\inc\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\nokia5110\src\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\LQ_1.8_TFT\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\LCD_API\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\2.2TFT\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\delay\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\System\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\System\inc\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\System\src\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\User\"
#        -I "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\User\USER\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Lib\UCOSII\CONFIG\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Lib\uCOSII\App\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Lib\uCOSII\CONFIHG\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Lib\uCOSII\PORT\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Lib\UCOSII\CORE\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Lib\FatFs\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Lib\FatFs\option\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\src\"
#        -I "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\HardWare\nrf24l01\" -I
#        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\MATH\"
#        --core=430X --data_model=large -Oh --multiplier=32
#        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm -DNDEBUG
#        --code_model=large)
#    Locale        =  Chinese (Simplified)_CHN.936
#    List file     =  
#        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Release\List\msp430f5529_flash.lst
#    Object file   =  
#        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
#        副本\Release\Obj\msp430f5529_flash.r43
#
###############################################################################

C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\Drivers\src\msp430f5529_flash.c
      1          #include "msp430f5529_flash.h"
      2          #include "msp430f5529_system.h"
      3          
      4          //注意：使用flash时应使用靠后的地址，否则可能会破坏程序
      5          /*******************************************************************************
      6          *  函数名称：擦除flash中的某一段
      7          *  功能说明：段应该是在（MIN_SEGMENT - MAX_SEGMENT），为保护程序，最好取最后几个段，注意不要擦除中断向量表
      8          *  参数说明：必须一次擦除512字节，Flash容量（128KB）对应segmentNo数量（128*1024/512=256），使用时建议取靠后面的段位
      9          *  函数返回：无
     10          *  使用示例：Flash_Erase_Segment(MAX_SEGMENT);                  //擦除第MAX_SEGMENT段
     11          ********************************************************************************/
     12          __ramfunc void Flash_Erase_Segment(uint16_t segmentNo)
     13          {
     14            ASSERT(segmentNo >= MIN_SEGMENT && segmentNo <= MAX_SEGMENT,"Flash_Erase_Segment","segmentNo参数超出范围！");  //断言检测段范围是否在FLASH区间
                                                                               ^
Error[Pe055]: too many arguments in invocation of macro "ASSERT"
     15            
     16            uint16_t * Addr = (uint16_t *)((uint32_t)segmentNo*512);   //计算地址
     17            
     18            FCTL3 = FWKEY;                              // 清除锁定
     19            FCTL1 = FWKEY+ERASE;                        // 擦除一段
     20            *Addr = 0;                                  //对擦除的地址范围内任意做一次空写入，用以启动擦除操作
     21            while (FCTL3 & BUSY);                       // 等待允许操作
     22            FCTL1 = FWKEY;                              //清除擦除位  
     23            FCTL3 = FWKEY+LOCK;                         //对FLASH加锁，可读，不可写，不可擦除
     24          }
     25          /*******************************************************************************
     26          *  函数名称：擦除flash中的某一固定位置
     27          *  功能说明：
     28          *  参数说明：必须一次擦除512字节
     29          *  函数返回：无
     30          *  使用示例：Flash_Erase_Addr(0x1800);
     31          ********************************************************************************/
     32          __ramfunc void Flash_Erase_Addr   (uint32_t addr)
     33          {
     34            uint16_t * Addr = (uint16_t *)addr;
     35            FCTL3 = FWKEY;                              // 清除锁定
     36            FCTL1 = FWKEY+ERASE;                        // 擦除一段
     37            *Addr = 0;                                  //对擦除的地址范围内任意做一次空写入，用以启动擦除操作
     38            while (FCTL3 & BUSY);                       // 等待允许操作
     39            FCTL1 = FWKEY;                              //清除擦除位  
     40            FCTL3 = FWKEY+LOCK;                         //对FLASH加锁，可读，不可写，不可擦除
     41          }
     42          /*******************************************************************************
     43          *  函数名称：
     44          *  功能说明：写入一个字节数据到Flash
     45          *  参数说明：uint16 segmentNo ：段位 uint16_t offset ：偏移量，uint16 data ：要写入的数据
     46          *  函数返回：无
     47          *  使用示例：Flash_Write(200,0,0x10);    //在第200个段位，偏移0个字节，写入数据0x10
     48          ********************************************************************************/
     49          __ramfunc void Flash_Write_Byte(uint16_t segmentNo,uint16_t offset,uint8_t data)
     50          {
     51            ASSERT(segmentNo >= MIN_SEGMENT && segmentNo <= MAX_SEGMENT,"Flash_Write_Byte","segmentNo参数超出范围！");  //断言检测段范围是否在FLASH区间
                                                                               ^
Error[Pe055]: too many arguments in invocation of macro "ASSERT"
     52            
     53            uint8_t * Addr = (uint8_t *)((uint32_t)segmentNo*512 + offset);        //计算地址
     54            
     55            FCTL3 = FWKEY;                            //清除锁定 
     56            FCTL1 = FWKEY+WRT;                        //置位编程位
     57            *Addr = data;                             //写入一个字
     58            while (FCTL3 & BUSY);                     //等待操作完成
     59            FCTL1 = FWKEY;                            //清除写入位
     60            FCTL3 = FWKEY+LOCK;                       //对FLASH加锁，可读，不可写，不可擦除，保护数据
     61          }
     62          /*******************************************************************************
     63          *  函数名称：
     64          *  功能说明：写入一个字数据到Flash
     65          *  参数说明：uint16 segmentNo ：段位 uint16_t offset ：偏移量，uint16 data ：要写入的数据
     66          *  函数返回：无
     67          *  使用示例：Flash_Write(200,0,0xf010);    //在第200个段位，偏移0个字节，写入数据0xf010
     68          ********************************************************************************/
     69          __ramfunc void Flash_Write_Word(uint16_t segmentNo,uint16_t offset,uint16_t data)
     70          {
     71            ASSERT(segmentNo >= MIN_SEGMENT && segmentNo <= MAX_SEGMENT,"Flash_Write_Word","segmentNo参数超出范围！");  //断言检测段范围是否在FLASH区间
                                                                               ^
Error[Pe055]: too many arguments in invocation of macro "ASSERT"
     72            
     73            uint16_t * Addr=(uint16_t *)((uint32_t)segmentNo*512 + offset);        //计算地址
     74            
     75            FCTL3 = FWKEY;                            //清除锁定 
     76            FCTL1 = FWKEY+BLKWRT;                     //置位编程位
     77            *Addr = data;                             //写入一个字
     78            while (FCTL3 & BUSY);                     //等待操作完成
     79            FCTL1 = FWKEY;                            //清除写入位
     80            FCTL3 = FWKEY+LOCK;                       //对FLASH加锁，可读，不可写，不可擦除，保护数据
     81          }
     82          /*******************************************************************************
     83          *  函数名称：
     84          *  功能说明：写入四个字节数据到Flash
     85          *  参数说明：uint16 segmentNo ：段位 uint16_t offset ：偏移量，int32 data ：要写入的数据
     86          *  函数返回：无
     87          *  使用示例：Flash_Write(200,0,0xf0e0d010);    //在第200个段位，偏移0个字节，写入数据0xf0e0d010
     88          ********************************************************************************/
     89          __ramfunc void Flash_Write_DWold(uint16_t segmentNo,uint16_t offset,uint32_t data)
     90          {
     91            ASSERT(segmentNo >= MIN_SEGMENT && segmentNo <= MAX_SEGMENT,"Flash_Write_DWold","segmentNo参数超出范围！");  //断言检测段范围是否在FLASH区间
                                                                               ^
Error[Pe055]: too many arguments in invocation of macro "ASSERT"
     92            
     93            uint32_t * Addr = (uint32_t *)((uint32_t)segmentNo*512 + offset);        //计算地址
     94            
     95            FCTL3 = FWKEY;                            //清除锁定 
     96            FCTL1 = FWKEY+BLKWRT;                     //置位编程位
     97            *Addr = data;                             //写入一个字
     98            while (FCTL3 & BUSY);                     //等待操作完成
     99            FCTL1 = FWKEY;                            //清除写入位
    100            FCTL3 = FWKEY+LOCK;                       //对FLASH加锁，可读，不可写，不可擦除，保护数据
    101          }
    102          /*******************************************************************************
    103          *  函数名称：Flash_Write_buf(uint16_t segmentNo,uint16_t offset,uint16_t cnt,uint8_t buf[])
    104          *  功能说明：写入多个字节数据到Flash
    105          *  参数说明：uint16 segmentNo ：段位 uint16_t offset ：起始数据偏移量，uint16 cnt ：写入数据数量，uint8 buf[]要写入的数据
    106          *  函数返回：无
    107          *  使用示例：uint8 data[10];Flash_Write_buf(200,0,10,data);            //从第200个段位，偏移地址为0开始，连续写入10个字节
    108          ********************************************************************************/
    109          __ramfunc void Flash_Write_buf(uint16_t segmentNo,uint16_t offset,uint16_t cnt,uint8_t buf[])
    110          {
    111            ASSERT(segmentNo >= MIN_SEGMENT && segmentNo <= MAX_SEGMENT,"Flash_Write_buf","segmentNo参数超出范围！");  //断言检测段范围是否在FLASH区间
                                                                               ^
Error[Pe055]: too many arguments in invocation of macro "ASSERT"
    112             
    113            uint8_t * Addr = (uint8_t *)((uint32_t)segmentNo*512 + offset);        //计算地址
    114             
    115            FCTL3 = FWKEY;                            //清除锁定 
    116            FCTL1 = FWKEY + WRT ;                     //置位编程位
    117            while(cnt--)                              
    118            {
    119              while (FCTL3 & BUSY);                   //等待允许操作
    120              *Addr++ = *buf++;                       //写入数据时启动时序发生器
    121            }
    122            FCTL1 = FWKEY;                            //清除写入位
    123            FCTL3 = FWKEY+LOCK;                       //对FLASH加锁，可读，不可写，不可擦除，保护数据
    124          }

Errors: 5
Warnings: none
