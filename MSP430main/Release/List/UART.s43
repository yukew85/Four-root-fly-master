///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          01/Nov/2018  12:43:46
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\UART.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EWE5D0.tmp
//        (C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\UART.c
//        -D NDEBUG -D RAM_VECTOR -lC
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Release\List
//        -lA
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Release\List
//        -o
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Release\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllfn.h -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\USB\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\USB\USB_config\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\USB\USB_User\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\srcUSB\USB_API\USB_CDC_API\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\USB\USB_API\USB_HID_API\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\USB\USB_API\USB_MSC_API\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\KEY\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\LED\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\12864\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\oled\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\mpu6050\inc\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\mpu6050\src\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\nokia5110\inc\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\nokia5110\src\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\LQ_1.8_TFT\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\LCD_API\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\2.2TFT\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\System\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\System\src\
//        -I C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\User\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\User\USER\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\UCOSII\CONFIG\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\uCOSII\App\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\uCOSII\CONFIHG\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\uCOSII\PORT\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\UCOSII\CORE\
//        -I C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\FatFs\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\FatFs\option\
//        -I C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\src\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\MATH\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HAL\
//        --core=430X --data_model=large -Ol --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm -DNDEBUG
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Release\List\UART.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME UART

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC RX_Cnt
        PUBLIC Rx_Buff
        PUBLIC Rx_Start
        PUBLIC UART_RX_IRQ_Handler
        PUBLIC USART_Init
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC or(load(2, DATA, add(CFA, literal(-2))), lshift(and(load(2, DATA, add(CFA, literal(-4))), 61440), 4))
          CFI SR Frame(CFA, -4)
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon1
        
        EXTERN UART_GetITStatus
        EXTERN UART_GetChar
        EXTERN UART_ClearITPendingBit
        EXTERN cnt_20ms
        EXTERN ZKHD_Link_Handle
        EXTERN UART_Init
        EXTERN Set_Vector_Handler
        EXTERN UART_ITConfig

// C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\UART.c
//    1 #include "UART.h"
//    2 #include "include.h"
//    3 

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//    4 unsigned char Rx_Buff[128];
Rx_Buff:
        DS8 128

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//    5 int RX_Cnt=0;
RX_Cnt:
        DS8 2

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//    6 bool Rx_Start = false;
Rx_Start:
        DS8 1
//    7 extern uint16_t cnt_20ms;
//    8 

        RSEG ISR_CODE:CODE:REORDER:NOROOT(1)
        CALL_GRAPH_ROOT UART_RX_IRQ_Handler, "interrupt"
//    9 __interrupt void UART_RX_IRQ_Handler()
UART_RX_IRQ_Handler:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function UART_RX_IRQ_Handler
//   10 { 
        PUSHM.A #0x6, R15
          CFI R10L Frame(CFA, -28)
          CFI R10H Frame(CFA, -26)
          CFI R11L Frame(CFA, -24)
          CFI R11H Frame(CFA, -22)
          CFI R12L Frame(CFA, -20)
          CFI R12H Frame(CFA, -18)
          CFI R13L Frame(CFA, -16)
          CFI R13H Frame(CFA, -14)
          CFI R14L Frame(CFA, -12)
          CFI R14H Frame(CFA, -10)
          CFI R15L Frame(CFA, -8)
          CFI R15H Frame(CFA, -6)
          CFI CFA SP+28
//   11   int sum = 0;
        MOV.W   #0x0, R10
//   12   if(UART_GetITStatus(UART0,UART_RX_IRQn) == TRUE)   //清除串口某一个中断标志
        MOV.B   #0x1, R13
        MOV.B   #0x0, R12
          CFI FunCall UART_GetITStatus
        CALLA   #UART_GetITStatus
        CMP.B   #0x1, R12
        JNE     ??UART_RX_IRQ_Handler_1
//   13   {   
//   14     ZKHD_Link_Head_t *ZKHD_Link_Head;
//   15     Rx_Buff[RX_Cnt] = UART_GetChar(UART0);                 //读取一个字节1个字节
        MOV.B   #0x0, R12
          CFI FunCall UART_GetChar
        CALLA   #UART_GetChar
        MOVX.W  &RX_Cnt, R15
        MOVX.B  R12, Rx_Buff(R15)
//   16     RX_Cnt++;
        ADDX.W  #0x1, &RX_Cnt
//   17     UART_ClearITPendingBit(UART0,UART_RX_IRQn);    //清除串口某一个中断标志
        MOV.B   #0x1, R13
        MOV.B   #0x0, R12
          CFI FunCall UART_ClearITPendingBit
        CALLA   #UART_ClearITPendingBit
//   18     
//   19     ZKHD_Link_Head = (ZKHD_Link_Head_t*)Rx_Buff;
        MOVA    #Rx_Buff, R15
//   20     
//   21     cnt_20ms = 0;
        MOVX.W  #0x0, &cnt_20ms
//   22     Rx_Start = true;
        MOVX.B  #0x1, &Rx_Start
//   23 //    //AA 05 00 00 01 00 e1 e2 e3 e4 e5 ab 1f
//   24     switch(RX_Cnt - 1)
        MOVX.W  &RX_Cnt, R14
        ADD.W   #0xffff, R14
        SUB.W   #0x0, R14
        JEQ     ??UART_RX_IRQ_Handler_7
        SUB.W   #0x3, R14
        JEQ     ??UART_RX_IRQ_Handler_8
        SUB.W   #0x1, R14
        JEQ     ??UART_RX_IRQ_Handler_9
        JMP     ??UART_RX_IRQ_Handler_5
//   25       {
//   26           case 0:
//   27               if(Rx_Buff[0] != 0xAA)
??UART_RX_IRQ_Handler_7:
        CMPX.B  #0xaa, &Rx_Buff
        JEQ     ??UART_RX_IRQ_Handler_1
//   28               {
//   29                   RX_Cnt = 0;
        MOVX.W  #0x0, &RX_Cnt
//   30               }
//   31               break;
        JMP     ??UART_RX_IRQ_Handler_1
//   32           case 3:
//   33               if(Rx_Buff[3] != 0x00)
??UART_RX_IRQ_Handler_8:
        CMPX.B  #0x0, &Rx_Buff + 3
        JEQ     ??UART_RX_IRQ_Handler_1
//   34               {
//   35                   RX_Cnt = 0;
        MOVX.W  #0x0, &RX_Cnt
//   36               }
//   37               break;
        JMP     ??UART_RX_IRQ_Handler_1
//   38           case 4:
//   39               if(Rx_Buff[4] != 0x1)
??UART_RX_IRQ_Handler_9:
        CMPX.B  #0x1, &Rx_Buff + 4
        JEQ     ??UART_RX_IRQ_Handler_1
//   40               {
//   41                   RX_Cnt = 0;
        MOVX.W  #0x0, &RX_Cnt
//   42               }
//   43               break;
        JMP     ??UART_RX_IRQ_Handler_1
//   44           default:              
//   45                 for(int i=0;i<Rx_Buff[1] + 6;i++)
??UART_RX_IRQ_Handler_5:
        MOV.W   #0x0, R14
        JMP     ??UART_RX_IRQ_Handler_6
//   46                 {
//   47                     sum += Rx_Buff[i];
??UART_RX_IRQ_Handler_0:
        MOV.W   R14, R15
        MOVX.B  Rx_Buff(R15), R15
        MOV.B   R15, R15
        ADD.W   R15, R10
//   48                 }
        ADD.W   #0x1, R14
??UART_RX_IRQ_Handler_6:
        MOVX.B  &Rx_Buff + 1, R15
        MOV.B   R15, R15
        ADD.W   #0x6, R15
        CMP.W   R15, R14
        JL      ??UART_RX_IRQ_Handler_0
//   49                 
//   50               if(Rx_Buff[0] == 0xAA     && 
//   51                  Rx_Buff[3] == 0        &&
//   52                  Rx_Buff[4] == 1        &&
//   53                  ((sum & 0xFF) == (Rx_Buff[Rx_Buff[1] + 6])))
        CMPX.B  #0xaa, &Rx_Buff
        JNE     ??UART_RX_IRQ_Handler_1
        CMPX.B  #0x0, &Rx_Buff + 3
        JNE     ??UART_RX_IRQ_Handler_1
        CMPX.B  #0x1, &Rx_Buff + 4
        JNE     ??UART_RX_IRQ_Handler_1
        AND.W   #0xff, R10
        MOVX.B  &Rx_Buff + 1, R15
        MOV.B   R15, R15
        ADD.W   #0x6, R15
        MOVX.B  Rx_Buff(R15), R15
        MOV.B   R15, R15
        CMP.W   R15, R10
        JNE     ??UART_RX_IRQ_Handler_1
//   54                {
//   55                    if(RX_Cnt == Rx_Buff[1] + 7)
        MOVX.B  &Rx_Buff + 1, R15
        MOV.B   R15, R15
        ADD.W   #0x7, R15
        CMPX.W  R15, &RX_Cnt
        JNE     ??UART_RX_IRQ_Handler_1
//   56                    {
//   57                         ZKHD_Link_Handle(Rx_Buff);
        MOVA    #Rx_Buff, R12
          CFI FunCall ZKHD_Link_Handle
        CALLA   #ZKHD_Link_Handle
//   58                         RX_Cnt = 0;
        MOVX.W  #0x0, &RX_Cnt
//   59                    }
//   60                }
//   61               break;
//   62         }
//   63   }
//   64     //AA 05 00 00 01 00 E1 E2 E3 E4 E5
//   65 }
??UART_RX_IRQ_Handler_1:
        POPM.A  #0x6, R15
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R12H SameValue
          CFI R13H SameValue
          CFI R14H SameValue
          CFI R15H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R12L SameValue
          CFI R13L SameValue
          CFI R14L SameValue
          CFI R15L SameValue
          CFI CFA SP+4
        RETI
          CFI EndBlock cfiBlock0
//   66                

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   67 void USART_Init()
USART_Init:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function USART_Init
//   68 {
//   69     UART_Init        (UART0,115200);                      //初始化uartx模块,波特率115200，波特率高时最好把主时钟 设高些
        MOV.W   #0xc200, R14
        MOV.W   #0x1, R15
        MOV.B   #0x0, R12
          CFI FunCall UART_Init
        CALLA   #UART_Init
//   70     Set_Vector_Handler(VECTOR_UART0,UART_RX_IRQ_Handler);    //设置接收中断向量
        MOVA    #UART_RX_IRQ_Handler, R13
        MOV.B   #0x38, R12
          CFI FunCall Set_Vector_Handler
        CALLA   #Set_Vector_Handler
//   71     UART_ITConfig  (UART0,UART_RX_IRQn,TRUE);                //开串口接收中断
        MOV.B   #0x1, R14
        MOV.B   #0x1, R13
        MOV.B   #0x0, R12
          CFI FunCall UART_ITConfig
        CALLA   #UART_ITConfig
//   72     UART_ITConfig  (UART0,UART_TX_IRQn,TRUE); 
        MOV.B   #0x1, R14
        MOV.B   #0x2, R13
        MOV.B   #0x0, R12
          CFI TailCall UART_ITConfig
        BRA     #UART_ITConfig
//   73 }
          CFI EndBlock cfiBlock1

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
//  44 bytes in segment CODE
// 131 bytes in segment DATA20_Z
// 264 bytes in segment ISR_CODE
// 
// 308 bytes of CODE memory
// 131 bytes of DATA memory
//
//Errors: none
//Warnings: 1
