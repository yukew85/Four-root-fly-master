///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          01/Nov/2018  12:43:41
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\GY521.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EWD11D.tmp
//        (C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\GY521.c
//        -D NDEBUG -D RAM_VECTOR -lC
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Release\List
//        -lA
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Release\List
//        -o
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Release\Obj
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
//        -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllfn.h -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\inc\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\USB\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\USB\USB_config\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\USB\USB_User\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\srcUSB\USB_API\USB_CDC_API\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\USB\USB_API\USB_HID_API\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Drivers\src\USB\USB_API\USB_MSC_API\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\KEY\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\LED\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\12864\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\oled\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\mpu6050\inc\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\mpu6050\src\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\nokia5110\inc\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\nokia5110\src\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\LQ_1.8_TFT\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\LCD_API\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\2.2TFT\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\delay\
//        -I C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\System\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\System\inc\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\System\src\
//        -I C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\User\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\User\USER\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\UCOSII\CONFIG\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\uCOSII\App\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\uCOSII\CONFIHG\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\uCOSII\PORT\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\UCOSII\CORE\
//        -I C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\FatFs\
//        -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Lib\FatFs\option\
//        -I C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\src\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\nrf24l01\
//        -I C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\MATH\ -I
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HAL\
//        --core=430X --data_model=large -Ol --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm -DNDEBUG
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\Release\List\GY521.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME GY521

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN _Cast32sto32f
        EXTERN _Cast32fto32s
        EXTERN _Sub32f
        EXTERN _Mul32f
        EXTERN _Add32f
        EXTERN ?ClearMemoryWords20
        EXTERN ?cstart_init_copy20
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC Acc_Read
        PUBLIC GetData
        PUBLIC Gyro_Read
        PUBLIC Mpu6050_Init
        PUBLIC MpuGetData
        PUBLIC MpuGetOffset
        PUBLIC MpuOffset
        PUBWEAK _A_PBDIR_L
        PUBLIC dis_data
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN Single_ReadIIC
        EXTERN kalman_1
        EXTERN memset
        EXTERN Single_WriteIIC
        EXTERN MPU6050

// C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码\HardWare\GY521.c
//    1 #include "GY521.h" 

        ASEGN DATA16_AN:DATA:NOROOT,0224H
// union <unnamed> __data16 _A_PBDIR_L
_A_PBDIR_L:
        DS8 2
//    2 #include "i2c.h"
//    3 
//    4 

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//    5 short    dis_data;
dis_data:
        DS8 2

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
//    6 static volatile int16_t *pMpu = (int16_t *)&MPU6050;
pMpu:
        DS8 4
        REQUIRE `?<Initializer for pMpu>`

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//    7 int16_t MpuOffset[6] = {0};
MpuOffset:
        DS8 12
//    8 
//    9 //初始化MPU6050，根据需要请参考pdf进行修改************************

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   10 uint8_t Mpu6050_Init()
Mpu6050_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function Mpu6050_Init
//   11 {    
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
//   12     P3DIR |= (1<<SCL);
        BIS.B   #0x2, &0x224
//   13     
//   14     uint8_t date = SUCCESS;
        MOV.B   #0x0, R10
//   15    
//   16     Single_WriteIIC(0xd0, PWR_MGMT_1, 0x80);	//复位
        MOV.B   #0x80, R14
        MOV.B   #0x6b, R13
        MOV.B   #0xd0, R12
          CFI FunCall Single_WriteIIC
        CALLA   #Single_WriteIIC
//   17     DELAY_MS(30);
        ////////////// Start of 750000 cycles delay.
        MOV.W   #0xdc6a, R15
        NOP
        MOV.W   #0x2, R14
??Mpu6050_Init_2:
        ADD.W   #0xffff, R15
        ADDC.W  #0xffff, R14
        JC      ??Mpu6050_Init_2
        ////////////// End of delay code.
//   18     Single_WriteIIC(0xd0, SMPLRT_DIV, 0x02); //陀螺仪采样率，0x00(333Hz)
        MOV.B   #0x2, R14
        MOV.B   #0x19, R13
        MOV.B   #0xd0, R12
          CFI FunCall Single_WriteIIC
        CALLA   #Single_WriteIIC
//   19     Single_WriteIIC(0xd0, PWR_MGMT_1, 0x03);	//设置设备时钟源，陀螺仪Z轴
        MOV.B   #0x3, R14
        MOV.B   #0x6b, R13
        MOV.B   #0xd0, R12
          CFI FunCall Single_WriteIIC
        CALLA   #Single_WriteIIC
//   20     Single_WriteIIC(0xd0, CONFIGL, 0x03);   //低通滤波频率，0x03(42Hz)
        MOV.B   #0x3, R14
        MOV.B   #0x1a, R13
        MOV.B   #0xd0, R12
          CFI FunCall Single_WriteIIC
        CALLA   #Single_WriteIIC
//   21     Single_WriteIIC(0xd0, GYRO_CONFIG, 0x18);//+-2000deg/s
        MOV.B   #0x18, R14
        MOV.B   #0x1b, R13
        MOV.B   #0xd0, R12
          CFI FunCall Single_WriteIIC
        CALLA   #Single_WriteIIC
//   22     Single_WriteIIC(0xd0, ACCEL_CONFIG, 0x09);//+-4G
        MOV.B   #0x9, R14
        MOV.B   #0x1c, R13
        MOV.B   #0xd0, R12
          CFI FunCall Single_WriteIIC
        CALLA   #Single_WriteIIC
//   23     
//   24     date = Single_ReadIIC(0xd0, 0x75);  //判断MPU6050地址
        MOV.B   #0x75, R13
        MOV.B   #0xd0, R12
          CFI FunCall Single_ReadIIC
        CALLA   #Single_ReadIIC
        MOV.B   R12, R10
//   25     
//   26     if(date!= MPU6050_PRODUCT_ID) //如果地址不正确
        CMP.B   #0x68, R10
        JEQ     ??Mpu6050_Init_1
//   27     {
//   28         return 1;
        MOV.B   #0x1, R12
        JMP     ??Mpu6050_Init_0
//   29     }
//   30     else 
//   31     {
//   32         MpuGetOffset(); //调用校准数据
??Mpu6050_Init_1:
          CFI FunCall MpuGetOffset
        CALLA   #MpuGetOffset
//   33         return 0;
        MOV.B   #0x0, R12
??Mpu6050_Init_0:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
        REQUIRE _A_PBDIR_L
//   34     }
//   35     
//   36 }
//   37 //***********************************************************************
//   38 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   39 int GetData(uchar REG_Address)   //输入你想要参数的寄存器地址，头文件宏定义查询
GetData:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function GetData
          CFI NoCalls
//   40 {
//   41     return 0;
        MOV.W   #0x0, R12
        RETA
//   42 }
          CFI EndBlock cfiBlock1
//   43 
//   44 //#define  Acc_Read() IIC_read_Bytes(MPU6050_ADDRESS, 0X3B,buffer,6) //读取加速度
//   45 //#define  Gyro_Read() IIC_read_Bytes(MPU6050_ADDRESS, 0x43,&buffer[6],6)  //  读取角速度
//   46 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   47 void Acc_Read(uint8_t *ptr)
Acc_Read:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function Acc_Read
//   48 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R11
//   49     for(int i=0;i<6;i++)
        MOV.W   #0x0, R10
        JMP     ??Acc_Read_1
//   50     {
//   51         ptr[i] = Single_ReadIIC(0xd0,0x3B+i);
??Acc_Read_0:
        PUSH.W  R13
          CFI CFA SP+14
        MOV.B   R10, 0(SP)
        POP.W   R13
          CFI CFA SP+12
        ADD.B   #0x3b, R13
        MOV.B   #0xd0, R12
          CFI FunCall Single_ReadIIC
        CALLA   #Single_ReadIIC
        MOV.W   R10, R15
        RLAM.A  #0x4, R15
        RRAM.A  #0x4, R15
        ADDA    R11, R15
        MOV.B   R12, 0(R15)
//   52     }
        ADD.W   #0x1, R10
??Acc_Read_1:
        CMP.W   #0x6, R10
        JL      ??Acc_Read_0
//   53 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
//   54 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   55 void Gyro_Read(uint8_t *ptr)
Gyro_Read:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function Gyro_Read
//   56 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R11
//   57     for(int i=0;i<6;i++)
        MOV.W   #0x0, R10
        JMP     ??Gyro_Read_1
//   58     {
//   59         ptr[i+6] = Single_ReadIIC(0xd0,0x43+i);
??Gyro_Read_0:
        PUSH.W  R13
          CFI CFA SP+14
        MOV.B   R10, 0(SP)
        POP.W   R13
          CFI CFA SP+12
        ADD.B   #0x43, R13
        MOV.B   #0xd0, R12
          CFI FunCall Single_ReadIIC
        CALLA   #Single_ReadIIC
        MOV.W   R10, R15
        ADD.W   #0x6, R15
        RLAM.A  #0x4, R15
        RRAM.A  #0x4, R15
        ADDA    R11, R15
        MOV.B   R12, 0(R15)
//   60     }
        ADD.W   #0x1, R10
??Gyro_Read_1:
        CMP.W   #0x6, R10
        JL      ??Gyro_Read_0
//   61 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//   62 

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   63 void MpuGetData(void) //读取陀螺仪数据加滤波
MpuGetData:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function MpuGetData
//   64 {
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        SUBA    #0xc, SP
          CFI CFA SP+40
//   65       uint8_t i;
//   66       uint8_t buffer[12];
//   67 
//   68       Acc_Read(buffer);
        MOVA    SP, R12
          CFI FunCall Acc_Read
        CALLA   #Acc_Read
//   69       Gyro_Read(buffer);
        MOVA    SP, R12
          CFI FunCall Gyro_Read
        CALLA   #Gyro_Read
//   70       
//   71       for(i=0;i<6;i++)
        MOV.B   #0x0, R10
        JMP     ??MpuGetData_1
//   72       {
//   73           pMpu[i] = (((int16_t)buffer[i<<1] << 8) | buffer[(i<<1)+1]) - MpuOffset[i];
??MpuGetData_0:
        MOVA    SP, R11
        MOV.B   R10, R15
        RLA.W   R15
        ADD.W   #0x1, R15
        ADDA    R11, R15
        MOV.B   @R15, R11
        MOV.B   R11, R11
        MOVA    SP, R7
        MOV.B   R10, R15
        RLA.W   R15
        ADDA    R7, R15
        MOV.B   @R15, R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R11, R15
        MOV.B   R10, R11
        ADDA    R11, R11
        SUBX.W  MpuOffset(R11), R15
        MOVA    &pMpu, R11
        MOV.B   R10, R7
        ADDA    R7, R7
        ADDA    R11, R7
        MOV.W   R15, 0(R7)
//   74           
//   75           if(i < 3) //此处对加速度做一维卡尔曼滤波
        CMP.B   #0x3, R10
        JC      ??MpuGetData_2
//   76           {
//   77               {
//   78                   static struct _1_ekf_filter ekf[3] = {{0.02,0,0,0,0.001,0.543},{0.02,0,0,0,0.001,0.543},{0.02,0,0,0,0.001,0.543}};	
//   79                   kalman_1(&ekf[i],(float)pMpu[i]);  //一维卡尔曼
        MOVA    &pMpu, R15
        MOV.B   R10, R11
        ADDA    R11, R11
        ADDA    R15, R11
        MOV.W   @R11, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.B   R10, R12
        RLAM.A  #0x3, R12
        MOVA    R12, R11
        ADDA    R12, R12
        ADDA    R11, R12
        ADDA    #??ekf, R12
          CFI FunCall kalman_1
        CALLA   #kalman_1
//   80                   pMpu[i] = (int16_t)ekf[i].out;
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVA    R15, R11
        ADDA    R15, R15
        ADDA    R11, R15
        MOVX.W  ??ekf + 8(R15), R12
        MOVX.W  ??ekf + 10(R15), R13
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        MOVA    &pMpu, R15
        MOV.B   R10, R11
        ADDA    R11, R11
        ADDA    R15, R11
        MOV.W   R12, 0(R11)
//   81               }
//   82           }
//   83           if(i > 2)  //此处对角速度做一介低通滤波
??MpuGetData_2:
        CMP.B   #0x3, R10
        JNC     ??MpuGetData_3
//   84           {	
//   85               uint8_t k=i-3;
        MOV.B   R10, R11
        ADD.B   #0xfd, R11
//   86               const float factor = 0.15f;  //滤波因素			
        MOV.W   #0x999a, R8
        MOV.W   #0x3e19, R9
//   87               static float tBuff[3];		
//   88 
//   89               pMpu[i] =  tBuff[k] * (1 - factor) + pMpu[i] * factor;       
        MOV.W   #0x0, R12
        MOV.W   #0x3f80, R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOV.B   R11, R15
        RLAM.A  #0x2, R15
        MOVX.W  ??tBuff(R15), R14
        MOVX.W  ??tBuff + 2(R15), R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOVA    &pMpu, R15
        MOV.B   R10, R14
        ADDA    R14, R14
        ADDA    R15, R14
        MOV.W   @R14, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
          CFI FunCall _Cast32fto32s
        CALLA   #_Cast32fto32s
        MOVA    &pMpu, R15
        MOV.B   R10, R7
        ADDA    R7, R7
        ADDA    R15, R7
        MOV.W   R12, 0(R7)
//   90               tBuff[k] = tBuff[k] * (1 - factor) + pMpu[i] * factor;       
        MOV.B   R11, R7
        RLAM.A  #0x2, R7
        MOV.W   #0x0, R12
        MOV.W   #0x3f80, R13
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Sub32f
        CALLA   #_Sub32f
        MOVX.W  ??tBuff(R7), R14
        MOVX.W  ??tBuff + 2(R7), R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOVA    &pMpu, R15
        MOV.B   R10, R14
        ADDA    R14, R14
        ADDA    R15, R14
        MOV.W   @R14, R12
        MOV.W   R12, R13
        RLA.W   R13
        SUBC.W  R13, R13
        XOR.W   #0xffff, R13
          CFI FunCall _Cast32sto32f
        CALLA   #_Cast32sto32f
        MOV.W   R8, R14
        MOV.W   R9, R15
          CFI FunCall _Mul32f
        CALLA   #_Mul32f
        MOV.W   R6, R14
        MOV.W   R7, R15
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOV.B   R11, R11
        RLAM.A  #0x2, R11
        MOVX.W  R12, ??tBuff(R11)
        MOVX.W  R13, ??tBuff + 2(R11)
//   91           }
//   92       }
??MpuGetData_3:
        ADD.B   #0x1, R10
??MpuGetData_1:
        CMP.B   #0x6, R10
        JNC     ??MpuGetData_0
//   93 }
        ADDA    #0xc, SP
          CFI CFA SP+28
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock4

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
??ekf:
        DS8 72
        REQUIRE `?<Initializer for ekf>`

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
??tBuff:
        DS8 12
//   94 
//   95 /****************************************************************************************
//   96 *@brief   get mpu offset
//   97 *@brief   initial and cmd call this
//   98 *@param[in]
//   99 *****************************************************************************************/

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  100 void MpuGetOffset(void) //校准
MpuGetOffset:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function MpuGetOffset
//  101 {
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        SUBA    #0x24, SP
          CFI CFA SP+56
//  102 	int32_t buffer[6]={0};
        MOVA    SP, R12
        ADDA    #0xc, R12
        MOVA    #0xc, R14
          CFI FunCall ?ClearMemoryWords20
        CALLA   #?ClearMemoryWords20
//  103 	int16_t i;  
//  104 	uint8_t k=30;
        MOV.B   #0x1e, R9
//  105 	const int8_t MAX_GYRO_QUIET = 5;
        MOV.B   #0x5, R11
//  106 	const int8_t MIN_GYRO_QUIET = -5;	
        MOV.B   #0xfb, R8
//  107 /*           wait for calm down    	                                                          */
//  108 	int16_t LastGyro[3] = {0};
        MOV.W   #0x0, 0x6(SP)
        MOV.W   #0x0, 0x8(SP)
        MOV.W   #0x0, 0xa(SP)
//  109 	int16_t ErrorGyro[3];	
//  110 	/*           set offset initial to zero    		*/
//  111 	
//  112 	memset(MpuOffset,0,12);
        MOV.W   #0xc, R14
        MOV.W   #0x0, R15
        MOV.W   #0x0, R13
        MOVA    #MpuOffset, R12
          CFI FunCall memset
        CALLA   #memset
//  113 	MpuOffset[2] = 8192;   //根据手册量程设定加速度标定值 
        MOVX.W  #0x2000, &MpuOffset + 4
//  114 	
//  115 	while(k--)  //判断飞控是否处于静止状态
??MpuGetOffset_2:
        MOV.B   R9, R14
        MOV.B   R14, R9
        ADD.B   #0xff, R9
        CMP.B   #0x0, R14
        JEQ     ??MpuGetOffset_10
//  116 	{
//  117 		do
//  118 		{
//  119                     DELAY_MS(10);
??MpuGetOffset_1:
        ////////////// Start of 250000 cycles delay.
        MOV.W   #0xf422, R15
        NOP
        MOV.W   #0x0, R14
??MpuGetOffset_12:
        ADD.W   #0xffff, R15
        ADDC.W  #0xffff, R14
        JC      ??MpuGetOffset_12
          CFI FunCall MpuGetData
        ////////////// End of delay code.
//  120                     MpuGetData();
        CALLA   #MpuGetData
//  121                     for(i=0;i<3;i++)
        MOV.W   #0x0, R10
        JMP     ??MpuGetOffset_7
//  122                     {
//  123                         ErrorGyro[i] = pMpu[i+3] - LastGyro[i];
??MpuGetOffset_0:
        MOVA    &pMpu, R14
        MOV.W   R10, R15
        ADD.W   #0x3, R15
        RLAM.A  #0x4, R15
        RRAM.A  #0x4, R15
        ADDA    R15, R15
        ADDA    R14, R15
        MOV.W   @R15, R15
        MOVA    SP, R14
        ADDA    #0x6, R14
        MOV.W   R10, R13
        ADDA    R13, R13
        ADDA    R14, R13
        SUB.W   @R13, R15
        MOVA    SP, R14
        MOV.W   R10, R13
        ADDA    R13, R13
        ADDA    R14, R13
        MOV.W   R15, 0(R13)
//  124                         LastGyro[i] = pMpu[i+3];
        MOVA    &pMpu, R14
        MOV.W   R10, R15
        ADD.W   #0x3, R15
        RLAM.A  #0x4, R15
        RRAM.A  #0x4, R15
        ADDA    R15, R15
        ADDA    R14, R15
        MOVA    SP, R14
        ADDA    #0x6, R14
        MOV.W   R10, R13
        ADDA    R13, R13
        ADDA    R14, R13
        MOV.W   @R15, 0(R13)
//  125                     }
        ADD.W   #0x1, R10
??MpuGetOffset_7:
        CMP.W   #0x3, R10
        JL      ??MpuGetOffset_0
//  126 		}while ((ErrorGyro[0] >  MAX_GYRO_QUIET )|| (ErrorGyro[0] < MIN_GYRO_QUIET)
//  127                         ||(ErrorGyro[1] > MAX_GYRO_QUIET )|| (ErrorGyro[1] < MIN_GYRO_QUIET)
//  128                         ||(ErrorGyro[2] > MAX_GYRO_QUIET )|| (ErrorGyro[2] < MIN_GYRO_QUIET));
        SXT     R11
        AND.W   #0xffff, R11
        CMP.W   @SP, R11
        JL      ??MpuGetOffset_1
        SXT     R8
        AND.W   #0xffff, R8
        CMP.W   R8, 0(SP)
        JL      ??MpuGetOffset_1
        SXT     R11
        AND.W   #0xffff, R11
        CMP.W   0x2(SP), R11
        JL      ??MpuGetOffset_1
        SXT     R8
        AND.W   #0xffff, R8
        CMP.W   R8, 0x2(SP)
        JL      ??MpuGetOffset_1
        SXT     R11
        AND.W   #0xffff, R11
        CMP.W   0x4(SP), R11
        JL      ??MpuGetOffset_1
        SXT     R8
        AND.W   #0xffff, R8
        CMP.W   R8, 0x4(SP)
        JL      ??MpuGetOffset_1
        JMP     ??MpuGetOffset_2
//  129 	}
//  130 
//  131 /*           throw first 100  group data and make 256 group average as offset                    */	
//  132 	for(i=0;i<356;i++)  //取第100到第356组的平均值做为校准值
??MpuGetOffset_10:
        MOV.W   #0x0, R10
        JMP     ??MpuGetOffset_8
//  133 	{		
//  134             MpuGetData();
//  135             if(100 <= i)
//  136             {
//  137                 uint8_t k;
//  138                 for(k=0;k<6;k++)
//  139                 {
//  140                       buffer[k] += pMpu[k];
??MpuGetOffset_3:
        MOVA    SP, R15
        ADDA    #0xc, R15
        MOV.B   R13, R11
        RLAM.A  #0x2, R11
        ADDA    R15, R11
        MOVA    &pMpu, R15
        MOV.B   R13, R14
        ADDA    R14, R14
        ADDA    R15, R14
        MOV.W   @R14, R14
        MOV.W   R14, R15
        RLA.W   R15
        SUBC.W  R15, R15
        XOR.W   #0xffff, R15
        ADD.W   R14, 0(R11)
        ADDC.W  R15, 0x2(R11)
//  141                 }
        ADD.B   #0x1, R13
??MpuGetOffset_5:
        CMP.B   #0x6, R13
        JNC     ??MpuGetOffset_3
??MpuGetOffset_4:
        ADD.W   #0x1, R10
??MpuGetOffset_8:
        CMP.W   #0x164, R10
        JGE     ??MpuGetOffset_11
          CFI FunCall MpuGetData
        CALLA   #MpuGetData
        CMP.W   #0x64, R10
        JL      ??MpuGetOffset_4
        MOV.B   #0x0, R13
        JMP     ??MpuGetOffset_5
//  142             }
//  143 	}
//  144 
//  145 	for(i=0;i<6;i++)  //保存校准值
??MpuGetOffset_11:
        MOV.W   #0x0, R10
        JMP     ??MpuGetOffset_9
//  146 	{
//  147 		MpuOffset[i] = buffer[i]>>8;
??MpuGetOffset_6:
        MOVA    SP, R15
        ADDA    #0xc, R15
        MOV.W   R10, R11
        RLAM.A  #0x2, R11
        ADDA    R15, R11
        MOV.W   @R11, R14
        MOV.W   0x2(R11), R15
        SWPB    R14
        SWPB    R15
        XOR.B   R15, R14
        XOR.W   R15, R14
        SXT     R15
        MOV.W   R10, R15
        ADDA    R15, R15
        MOVX.W  R14, MpuOffset(R15)
//  148 	}
        ADD.W   #0x1, R10
??MpuGetOffset_9:
        CMP.W   #0x6, R10
        JL      ??MpuGetOffset_6
//  149 }
        ADDA    #0x24, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock5

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for pMpu>`:
        DATA32
        DC32 MPU6050

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for ekf>`:
        DATA32
        DC32 3CA3D70AH, 0H, 0H, 0H, 3A83126FH, 3F0B020CH, 3CA3D70AH, 0H, 0H, 0H
        DC32 3A83126FH, 3F0B020CH, 3CA3D70AH, 0H, 0H, 0H, 3A83126FH, 3F0B020CH

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
        DATA32
        DC32 0, 0, 0, 0, 0, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
        DATA16
        DC16 0, 0, 0

        END
// 
// 1 040 bytes in segment CODE
//     2 bytes in segment DATA16_AN
//    30 bytes in segment DATA20_C
//    76 bytes in segment DATA20_I
//    76 bytes in segment DATA20_ID
//    26 bytes in segment DATA20_Z
// 
// 1 040 bytes of CODE  memory
//   106 bytes of CONST memory
//   102 bytes of DATA  memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: 1
