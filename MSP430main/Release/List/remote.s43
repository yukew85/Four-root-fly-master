///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.12.1.987/W32 for MSP430          26/Sep/2018  16:44:45
// Copyright 1996-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430
//
//    __rt_version  =  3
//    __double_size =  32
//    __reg_r4      =  free
//    __reg_r5      =  free
//    __pic         =  no
//    __core        =  430X
//    __data_model  =  large
//    __code_model  =  large
//    Source file   =  
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HAL\remote.c
//    Command line  =  
//        -f C:\Users\颜子楠\AppData\Local\Temp\EW5E94.tmp
//        ("C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HAL\remote.c" -D NDEBUG -D RAM_VECTOR -lC
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Release\List" -lA
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Release\List" -o
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Release\Obj" -D__MSP430F5529__ -e --double=32 --dlib_config
//        D:\IAR\430\lib\dlib\dl430xllfn.h -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\inc\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\USB\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\USB\USB_config\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\USB\USB_User\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\srcUSB\USB_API\USB_CDC_API\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\USB\USB_API\USB_HID_API\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Drivers\src\USB\USB_API\USB_MSC_API\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\KEY\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\LED\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\12864\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\oled\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\mpu6050\inc\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\mpu6050\src\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\nokia5110\inc\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\nokia5110\src\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\LQ_1.8_TFT\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\LCD_API\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\2.2TFT\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\delay\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\System\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\System\inc\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\System\src\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\User\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\User\USER\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\UCOSII\CONFIG\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\uCOSII\App\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\uCOSII\CONFIHG\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\uCOSII\PORT\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\UCOSII\CORE\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\FatFs\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Lib\FatFs\option\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\src\"
//        -I "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\HardWare\nrf24l01\" -I
//        "C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\MATH\" --core=430X --data_model=large -Oh --multiplier=32
//        --hw_workaround=CPU40 --hw_workaround=nop_after_lpm -DNDEBUG
//        --code_model=large)
//    Locale        =  Chinese (Simplified)_CHN.936
//    List file     =  
//        C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 -
//        副本\Release\List\remote.s43
//
///////////////////////////////////////////////////////////////////////////////

        NAME remote

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__code_model", "large"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN _Cast32uto32f
        EXTERN _Add32f
        EXTERN _Mul32f
        EXTERN ?cstart_init_copy20
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC RC_Analy
        PUBLIC RC_rxData
        PUBLIC remote_unlock
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
        EXTERN Remote
        EXTERN ALL_flag
        EXTERN NRF2401_RecData
        EXTERN memcpy
        EXTERN pidPitch
        EXTERN pidRoll
        EXTERN pidYaw

// C:\Users\颜子楠\Desktop\教材\附件目录\2.源码\1.飞控源码 - 副本\HAL\remote.c
//    1 #include "include.h"
//    2 
//    3 #undef SUCCESS
//    4 #define SUCCESS 0
//    5 #undef FAILED
//    6 #define FAILED  1
//    7 
//    8 typedef struct
//    9 {
//   10     int16_t Start;        //起始位 0XAAAA
//   11     int16_t ContrlBit;    //校验位 ox01
//   12     int16_t THROTTLE;	  
//   13     int16_t PITCH;
//   14     int16_t ROLL;
//   15     int16_t YAW;
//   16     int16_t SW_TWO;       //左侧两档开关
//   17     int16_t SW_THREE;	  //右侧三档开关
//   18     int16_t LEFT;		  //左侧拨盘
//   19     int16_t RIGHT;		  //右侧拨盘
//   20     int16_t CaliFlag;	  //校准按键
//   21     int16_t Arm_State;	  //启动按键
//   22     int16_t Stop;         //停止位 0x5555
//   23 }send_Data_t;
//   24 
//   25 /*****************************************************************************************
//   26  *  通道数据处理
//   27  * @param[in] 
//   28  * @param[out] 
//   29  * @return     
//   30  ******************************************************************************************/	

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//   31 uint8_t RC_rxData[32];
RC_rxData:
        DS8 32
//   32 void remote_unlock(void);	

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//   33 void RC_Analy(void)  
RC_Analy:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function RC_Analy
//   34 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        SUBA    #0x1a, SP
          CFI CFA SP+38
//   35         static uint16_t cnt_15s;
//   36         volatile float PitDesired,RolDesired;
//   37 /*             Receive  and check RC data                               */	
//   38                 
//   39          if(NRF2401_RecData(RC_rxData) == RX_OK)
        MOVA    #RC_rxData, R12
          CFI FunCall NRF2401_RecData
        CALLA   #NRF2401_RecData
        CMP.B   #0x40, R12
        JNE     ??RC_Analy_3
//   40          {
//   41 		cnt_15s = 0;
        MOV.W   #0x0, R10
//   42                 send_Data_t send_Data;
//   43                 
//   44                 memcpy((uint8_t*)&send_Data,RC_rxData,sizeof(send_Data_t));                
        MOV.W   #0x1a, R14
        MOV.W   #0x0, R15
        MOVA    #RC_rxData, R13
        MOVA    SP, R12
          CFI FunCall memcpy
        CALLA   #memcpy
//   45                 
//   46 		if((send_Data.Start == 0xAAAA) && (send_Data.Stop == 0x5555))  //如果接收到的遥控数据正确
        MOV.W   @SP, R11
        CMP.W   #0xaaaa, R11
        JNE     ??RC_Analy_2
        CMP.W   #0x5555, 0x18(SP)
        JNE     ??RC_Analy_2
//   47 		{                   
//   48                       Remote.roll = send_Data.ROLL;
        MOVA    #Remote, R11
        MOV.W   0x8(SP), 0(R11)
//   49 
//   50                       Remote.pitch = send_Data.PITCH;
        MOV.W   0x6(SP), 0x2(R11)
//   51 
//   52                       Remote.thr = send_Data.THROTTLE - 100;
        MOV.W   0x4(SP), R15
        ADD.W   #0xff9c, R15
        MOV.W   R15, 0x4(R11)
//   53 
//   54                       Remote.yaw =  send_Data.YAW;
        MOV.W   0xa(SP), 0x6(R11)
//   55 
//   56                       Remote.AUX1 =  send_Data.SW_THREE;
        MOV.W   0xe(SP), 0x8(R11)
//   57 
//   58                       Remote.AUX2 =  send_Data.SW_TWO;
        MOV.W   0xc(SP), 0xa(R11)
//   59 
//   60                       //---------------------------------------------------------------------------------
//   61                       //开始处理遥控数据
//   62                       {
//   63                               const float roll_pitch_ratio = 0.04f;  //遥控控制姿态的量
//   64               
//   65                               
//   66                               pidPitch.desired = ((Remote.pitch * 1.0f)-1500)*roll_pitch_ratio;	
        MOV.W   0x2(R11), R12
        CALLA   #?Subroutine0
??CrossCallReturnLabel_0:
        MOVX.W  R12, &pidPitch
        MOVX.W  R13, &pidPitch + 2
//   67                               pidRoll.desired = ((Remote.roll * 1.0f)-1500)*roll_pitch_ratio;	
        MOV.W   @R11, R12
        CALLA   #?Subroutine0
??CrossCallReturnLabel_1:
        MOVX.W  R12, &pidRoll
        MOVX.W  R13, &pidRoll + 2
//   68                               
//   69                               if(Remote.yaw>1820 )
        CMP.W   #0x71d, 0x6(R11)
        JNC     ??RC_Analy_4
//   70                               {							
//   71                                       pidYaw.desired += 0.045f;	
        CALLA   #?Subroutine1
//   72                               }
??CrossCallReturnLabel_2:
        MOV.W   #0x3d38, R15
        JMP     ??RC_Analy_1
//   73                               else if(Remote.yaw <1180)
??RC_Analy_4:
        CMP.W   #0x49c, 0x6(R11)
        JC      ??RC_Analy_5
//   74                               {
//   75                                       pidYaw.desired -= 0.045f;	
        CALLA   #?Subroutine1
//   76                               }
??CrossCallReturnLabel_3:
        MOV.W   #0xbd38, R15
??RC_Analy_1:
          CFI FunCall _Add32f
        CALLA   #_Add32f
        MOVX.W  R12, &pidYaw
        MOVX.W  R13, &pidYaw + 2
//   77                               
//   78                               {
//   79                                       static uint16_t last_AUX1 = 1000;
//   80                                       static uint16_t last_AUX2 = 1000;
//   81       
//   82                                       //定高按键
//   83                                       if(last_AUX1!= Remote.AUX1)
??RC_Analy_5:
        MOV.W   0x8(R11), R15
        CMPX.W  &??last_AUX1, R15
        JEQ     ??RC_Analy_0
//   84                                       {
//   85                                               if(!ALL_flag.take_off)
        BITX.B  #0x4, &ALL_flag
        JNE     ??RC_Analy_0
//   86                                                       ALL_flag.height_lock ^= 1;
        XORX.B  #0x2, &ALL_flag
//   87                                       }	
//   88                       
//   89                                       if(last_AUX2!= Remote.AUX2)//预留一件起飞
??RC_Analy_0:
        MOV.W   0xa(R11), R11
        CMPX.W  &??last_AUX2, R11
        JEQ     ??RC_Analy_6
//   90                                       {
//   91                                                       ALL_flag.take_off ^= 1;
        XORX.B  #0x4, &ALL_flag
//   92                                       }
//   93 
//   94                                       last_AUX1 = Remote.AUX1;
??RC_Analy_6:
        MOVX.W  R15, &??last_AUX1
//   95                                       last_AUX2 = Remote.AUX2;
        MOVX.W  R11, &??last_AUX2
        JMP     ??RC_Analy_2
//   96                               }
//   97 
//   98                       }	
//   99                   }
//  100         }
//  101 	else //如果没有收到遥控信号，则判断为失连
//  102 	{
//  103 		cnt_15s++;
??RC_Analy_3:
        MOVX.W  &??cnt_15s, R10
        ADD.W   #0x1, R10
//  104 		if(cnt_15s>5000)
        CMP.W   #0x1389, R10
        JNC     ??RC_Analy_2
//  105 		{
//  106 			cnt_15s = 0;
        MOV.W   #0x0, R10
//  107 			ALL_flag.unlock = 0;  //失连锁定
        BICX.B  #0x1, &ALL_flag
??RC_Analy_2:
        MOVX.W  R10, &??cnt_15s
//  108 #ifdef NRF24L01_ENABLE                        
//  109 			NRF24L01_init();  //初始NRF
//  110 #endif
//  111 		}
//  112 	}
//  113         
//  114 	remote_unlock();
          CFI FunCall remote_unlock
        CALLA   #remote_unlock
//  115 }
        ADDA    #0x1a, SP
          CFI CFA SP+12
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine1:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function RC_Analy
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+42
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function RC_Analy
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond2) R10L Frame(CFA, -12)
          CFI (cfiCond2) R10H Frame(CFA, -10)
          CFI (cfiCond2) R11L Frame(CFA, -8)
          CFI (cfiCond2) R11H Frame(CFA, -6)
          CFI (cfiCond2) CFA SP+42
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOVX.W  &pidYaw, R12
        MOVX.W  &pidYaw + 2, R13
        MOV.W   #0x51ec, R14
        RETA
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?Subroutine0:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function RC_Analy
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+42
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function RC_Analy
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond5) R10L Frame(CFA, -12)
          CFI (cfiCond5) R10H Frame(CFA, -10)
          CFI (cfiCond5) R11L Frame(CFA, -8)
          CFI (cfiCond5) R11H Frame(CFA, -6)
          CFI (cfiCond5) CFA SP+42
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV.W   #0x0, R13
          CFI (cfiCond4) FunCall RC_Analy _Cast32uto32f
          CFI (cfiCond4) FunCall RC_Analy _Cast32uto32f
        CALLA   #_Cast32uto32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   #0x8000, R12
        MOV.W   #0xc4bb, R13
          CFI (cfiCond4) FunCall RC_Analy _Add32f
          CFI (cfiCond4) FunCall RC_Analy _Add32f
        CALLA   #_Add32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   #0xd70a, R12
        MOV.W   #0x3d23, R13
          CFI (cfiCond4) TailCall RC_Analy _Mul32f
          CFI (cfiCond4) TailCall RC_Analy _Mul32f
        BRA     #_Mul32f
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
??cnt_15s:
        DS8 2

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
??last_AUX1:
        DS8 2
        REQUIRE `?<Initializer for last_AUX1>`

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
??last_AUX2:
        DS8 2
        REQUIRE `?<Initializer for last_AUX2>`
//  116 
//  117 /*****************************************************************************************
//  118  *  解锁判断
//  119  * @param[in] 
//  120  * @param[out] 
//  121  * @return     
//  122  ******************************************************************************************/	

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
//  123 void remote_unlock(void)
remote_unlock:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function remote_unlock
          CFI NoCalls
//  124 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOVX.W  &Remote + 4, R15
        CMP.W   #0x47e, R15
        JC      ??remote_unlock_3
        CMPX.W  #0x4b0, &Remote + 6
        JC      ??remote_unlock_3
//  125 	volatile static uint8_t status=WAITING_1;
//  126         static uint16_t cnt=0;
//  127 
//  128 	if(Remote.thr<1150 &&Remote.yaw<1200)                         //油门遥杆左下角锁定
//  129 	{
//  130 		status = EXIT_255;
        MOVX.B  #0xff, &??status
//  131 	}
//  132 
//  133 	switch(status)
??remote_unlock_3:
        MOVA    #??status, R14
        MOV.B   @R14, R13
        MOVX.B  &??cnt_1, R12
        MOVX.W  &??cnt, R10
        SUB.B   #0x1, R13
        JEQ     ??remote_unlock_4
        SUB.B   #0x1, R13
        JEQ     ??remote_unlock_5
        SUB.B   #0x1, R13
        JEQ     ??remote_unlock_6
        SUB.B   #0x1, R13
        JEQ     ??remote_unlock_7
        SUB.B   #0x1b, R13
        JEQ     ??remote_unlock_8
        SUB.B   #0xe0, R13
        JEQ     ??remote_unlock_9
        JMP     ??remote_unlock_0
//  134 	{
//  135 		case WAITING_1://等待解锁
//  136  //解锁三步奏，油门最低->油门最高->油门最低 看到LED灯不闪了 即完成解锁			
//  137 			if(Remote.thr<1100)  //第一步        
??remote_unlock_4:
        CMP.W   #0x44c, R15
        JC      ??remote_unlock_1
//  138 			{			 
//  139                                status = WAITING_2;				 
        MOV.B   #0x2, 0(R14)
        JMP     ??remote_unlock_1
//  140 			}		
//  141 			break;
//  142 		case WAITING_2://第二步 
//  143 			if(Remote.thr>1800)          
??remote_unlock_5:
        CMP.W   #0x709, R15
        JNC     ??remote_unlock_1
//  144 			{		
//  145                               static uint8_t cnt = 0;
//  146                               cnt++;		
        ADD.B   #0x1, R12
//  147                               if(cnt>5) //最高油门需保持200ms以上，防止遥控开机初始化未完成的错误数据
        CMP.B   #0x6, R12
        JNC     ??remote_unlock_1
//  148                               {	
//  149                                               cnt=0;
        MOV.B   #0x0, R12
//  150                                               status = WAITING_3;
        MOV.B   #0x3, 0(R14)
        JMP     ??remote_unlock_1
//  151                               }
//  152 			}			
//  153 			break;
//  154 		case WAITING_3:
//  155 			if(Remote.thr<1100)  //第三步        
??remote_unlock_6:
        CMP.W   #0x44c, R15
        JC      ??remote_unlock_1
//  156 			{			 
//  157 					 status = WAITING_4;				 
        MOV.B   #0x4, 0(R14)
        JMP     ??remote_unlock_1
//  158 			}			
//  159 			break;			
//  160 		case WAITING_4:	//解锁前准备	               
//  161 				ALL_flag.unlock = 1;   //解锁标志位
??remote_unlock_7:
        BISX.B  #0x1, &ALL_flag
//  162 				status = PROCESS_31;   //进入控制
        MOV.B   #0x1f, 0(R14)
//  163 //				LED.status = AlwaysOn; //LED常亮									
//  164 				 break;		
        JMP     ??remote_unlock_1
//  165 		case PROCESS_31:	//进入解锁状态
//  166 				if(Remote.thr<1020&&!ALL_flag.height_lock)    //当遥杆拉到最低 即不飞状态
??remote_unlock_8:
        CMP.W   #0x3fc, R15
        JC      ??remote_unlock_2
        BITX.B  #0x2, &ALL_flag
        JNE     ??remote_unlock_2
//  167 				{
//  168                                     if(cnt++ > 2000)                                     // 油门遥杆处于最低6S自动上锁
        MOV.W   R10, R15
        ADD.W   #0x1, R10
        CMP.W   #0x7d1, R15
        JNC     ??remote_unlock_1
//  169                                     {								
//  170                                             status = EXIT_255;								
//  171                                     }
//  172 				}
//  173 				else if(!ALL_flag.unlock)                           //其它紧急情况可直接锁定飞控
//  174 				{
//  175 					status = EXIT_255;				
//  176 				}
//  177 				else					
//  178 					cnt = 0;
//  179 			break;
//  180 		case EXIT_255: //进入锁定
//  181 //			LED.status = AllFlashLight;	//LED在锁定状态保持闪烁                                     //exit
//  182 			cnt = 0;
//  183 //			LED.FlashTime = 100;  		 //LED在锁定状态保持闪烁时间间隔为300ms                                 
//  184 			ALL_flag.unlock = 0;      //锁定
//  185 			status = WAITING_1;     //返回等待解锁
//  186 			break;
//  187 		default:
//  188 			status = EXIT_255;
??remote_unlock_0:
        MOV.B   #0xff, 0(R14)
//  189 			break;
??remote_unlock_1:
        MOVX.W  R10, &??cnt
        MOVX.B  R12, &??cnt_1
//  190 	}
//  191 
//  192 }
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
??remote_unlock_2:
        BITX.B  #0x1, &ALL_flag
        JEQ     ??remote_unlock_0
        MOV.W   #0x0, R10
        JMP     ??remote_unlock_1
??remote_unlock_9:
        MOV.W   #0x0, R10
        BICX.B  #0x1, &ALL_flag
        MOV.B   #0x1, 0(R14)
        JMP     ??remote_unlock_1
        NOP
          CFI EndBlock cfiBlock7

        RSEG DATA20_I:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_copy20
??status:
        DS8 1
        REQUIRE `?<Initializer for status>`

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
??cnt:
        DS8 2

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
??cnt_1:
        DS8 1

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for last_AUX1>`:
        DATA16
        DC16 1000

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for last_AUX2>`:
        DATA16
        DC16 1000

        RSEG DATA20_ID:CONST:SORT:NOROOT(0)
`?<Initializer for status>`:
        DATA8
        DC8 1

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG `CODE`:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  193 /***********************END OF FILE*************************************/
//  194 
//  195 
//  196 
//  197 
//  198 
//  199 
//  200 
// 
// 554 bytes in segment CODE
//   5 bytes in segment DATA20_I
//   5 bytes in segment DATA20_ID
//  37 bytes in segment DATA20_Z
// 
// 554 bytes of CODE  memory
//   5 bytes of CONST memory
//  42 bytes of DATA  memory
//
//Errors: none
//Warnings: none
